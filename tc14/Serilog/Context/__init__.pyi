import Serilog.Core
import Serilog.Events
import System
import typing

T = typing.TypeVar('T')

class ImmutableStack[T]:
    Count: int
    Empty: list[T]
    IsEmpty: bool
    Top: T
    def GetEnumerator(self) -> list[T]: ...
    def get_Count(self) -> int: ...
    @staticmethod
    def get_Empty() -> list[T]: ...
    def get_IsEmpty(self) -> bool: ...
    @staticmethod
    def Push(t: T) -> list[T]: ...
    def get_Top(self) -> T: ...

class LogContext:
    @staticmethod
    def PushProperty(name: str, value: typing.Any, destructureObjects: bool = False) -> System.IDisposable: ...
    @staticmethod
    @typing.overload
    def Push(enricher: Serilog.Core.ILogEventEnricher) -> System.IDisposable: ...
    @staticmethod
    @typing.overload
    def Push(enrichers: list[Serilog.Core.ILogEventEnricher]) -> System.IDisposable: ...
    @staticmethod
    def PushProperties(properties: list[Serilog.Core.ILogEventEnricher]) -> System.IDisposable: ...
    @staticmethod
    def Clone() -> Serilog.Core.ILogEventEnricher: ...
    @staticmethod
    def Suspend() -> System.IDisposable: ...
    @staticmethod
    def Reset() -> None: ...

class LogContextEnricher:
    def __init__(self, ) -> None: ...
    def Enrich(self, logEvent: Serilog.Events.LogEvent, propertyFactory: Serilog.Core.ILogEventPropertyFactory) -> None: ...

class ContextStackBookmark:
    def __init__(self, bookmark: list[Serilog.Core.ILogEventEnricher]) -> None: ...
    def Dispose(self) -> None: ...

