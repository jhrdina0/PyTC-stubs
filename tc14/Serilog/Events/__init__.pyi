import Serilog.Events
import System
import System.Collections.Generic
import System.IO
import typing

class DictionaryValue(LogEventPropertyValue):
    def __init__(self, elements: list[dict[ScalarValue, LogEventPropertyValue]]) -> None: ...
    Elements: dict[ScalarValue, LogEventPropertyValue]
    def get_Elements(self) -> dict[ScalarValue, LogEventPropertyValue]: ...
    def Render(self, output: System.IO.TextWriter, format: str, formatProvider: System.IFormatProvider) -> None: ...

class LevelAlias:
    Minimum: LogEventLevel
    Maximum: LogEventLevel

class LogEvent:
    def __init__(self, timestamp: System.DateTimeOffset, level: LogEventLevel, exception: System.Exception, messageTemplate: MessageTemplate, properties: list[LogEventProperty]) -> None: ...
    Timestamp: System.DateTimeOffset
    Level: LogEventLevel
    MessageTemplate: MessageTemplate
    Properties: dict[str, LogEventPropertyValue]
    Exception: System.Exception
    def get_Timestamp(self) -> System.DateTimeOffset: ...
    def get_Level(self) -> LogEventLevel: ...
    def get_MessageTemplate(self) -> MessageTemplate: ...
    @typing.overload
    def RenderMessage(self, output: System.IO.TextWriter, formatProvider: System.IFormatProvider) -> None: ...
    @typing.overload
    def RenderMessage(self, formatProvider: System.IFormatProvider) -> str: ...
    def get_Properties(self) -> dict[str, LogEventPropertyValue]: ...
    def get_Exception(self) -> System.Exception: ...
    def AddOrUpdateProperty(self, property: LogEventProperty) -> None: ...
    def AddPropertyIfAbsent(self, property: LogEventProperty) -> None: ...
    def RemovePropertyIfPresent(self, propertyName: str) -> None: ...

class LogEventLevel(System.Enum, int):
    Verbose: LogEventLevel = ...
    Debug: LogEventLevel = ...
    Information: LogEventLevel = ...
    Warning: LogEventLevel = ...
    Error: LogEventLevel = ...
    Fatal: LogEventLevel = ...

class LogEventProperty:
    def __init__(self, name: str, value: LogEventPropertyValue) -> None: ...
    Name: str
    Value: LogEventPropertyValue
    def get_Name(self) -> str: ...
    def get_Value(self) -> LogEventPropertyValue: ...
    @staticmethod
    def IsValidName(name: str) -> bool: ...

class LogEventPropertyValue:
    def Render(self, output: System.IO.TextWriter, format: str, formatProvider: System.IFormatProvider) -> None: ...
    @typing.overload
    def ToString(self) -> str: ...
    @typing.overload
    def ToString(self, format: str, formatProvider: System.IFormatProvider) -> str: ...

class MessageTemplate:
    @typing.overload
    def __init__(self, tokens: list[Serilog.Parsing.MessageTemplateToken]) -> None: ...
    @typing.overload
    def __init__(self, text: str, tokens: list[Serilog.Parsing.MessageTemplateToken]) -> None: ...
    Empty: MessageTemplate
    Text: str
    Tokens: list[Serilog.Parsing.MessageTemplateToken]
    @staticmethod
    def get_Empty() -> MessageTemplate: ...
    def get_Text(self) -> str: ...
    def ToString(self) -> str: ...
    def get_Tokens(self) -> list[Serilog.Parsing.MessageTemplateToken]: ...
    @typing.overload
    def Render(self, properties: dict[str, LogEventPropertyValue], formatProvider: System.IFormatProvider) -> str: ...
    @typing.overload
    def Render(self, properties: dict[str, LogEventPropertyValue], output: System.IO.TextWriter, formatProvider: System.IFormatProvider) -> None: ...

class ScalarValue(LogEventPropertyValue):
    def __init__(self, value: typing.Any) -> None: ...
    Value: typing.Any
    def get_Value(self) -> typing.Any: ...
    def Render(self, output: System.IO.TextWriter, format: str, formatProvider: System.IFormatProvider) -> None: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class SequenceValue(LogEventPropertyValue):
    def __init__(self, elements: list[LogEventPropertyValue]) -> None: ...
    Elements: list[LogEventPropertyValue]
    def get_Elements(self) -> list[LogEventPropertyValue]: ...
    def Render(self, output: System.IO.TextWriter, format: str, formatProvider: System.IFormatProvider) -> None: ...

class StructureValue(LogEventPropertyValue):
    def __init__(self, properties: list[LogEventProperty], typeTag: str) -> None: ...
    TypeTag: str
    Properties: list[LogEventProperty]
    def get_TypeTag(self) -> str: ...
    def get_Properties(self) -> list[LogEventProperty]: ...
    def Render(self, output: System.IO.TextWriter, format: str, formatProvider: System.IFormatProvider) -> None: ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__0_0: dict[dict[ScalarValue, LogEventPropertyValue], ScalarValue]
    <>9__0_1: dict[dict[ScalarValue, LogEventPropertyValue], LogEventPropertyValue]

