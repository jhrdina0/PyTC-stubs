import Serilog.Core
import Serilog.Events
import System
import System.Collections.Generic
import System.Reflection

class ByteArrayScalarConversionPolicy:
    def __init__(self, ) -> None: ...
    def TryConvertToScalar(self, value: typing.Any, result: Serilog.Events.ScalarValue&) -> bool: ...

class DelegateDestructuringPolicy:
    def __init__(self, ) -> None: ...
    def TryDestructure(self, value: typing.Any, propertyValueFactory: Serilog.Core.ILogEventPropertyValueFactory, result: Serilog.Events.LogEventPropertyValue&) -> bool: ...

class EnumScalarConversionPolicy:
    def __init__(self, ) -> None: ...
    def TryConvertToScalar(self, value: typing.Any, result: Serilog.Events.ScalarValue&) -> bool: ...

class ProjectedDestructuringPolicy:
    def __init__(self, canApply: dict[System.Type, bool], projection: dict[typing.Any, typing.Any]) -> None: ...
    def TryDestructure(self, value: typing.Any, propertyValueFactory: Serilog.Core.ILogEventPropertyValueFactory, result: Serilog.Events.LogEventPropertyValue&) -> bool: ...

class ReflectionTypesScalarDestructuringPolicy:
    def __init__(self, ) -> None: ...
    def TryDestructure(self, value: typing.Any, propertyValueFactory: Serilog.Core.ILogEventPropertyValueFactory, result: Serilog.Events.LogEventPropertyValue&) -> bool: ...

class SimpleScalarConversionPolicy:
    def __init__(self, scalarTypes: list[System.Type]) -> None: ...
    def TryConvertToScalar(self, value: typing.Any, result: Serilog.Events.ScalarValue&) -> bool: ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__1_1: dict[System.Byte, str]
    <>9__1_0: dict[System.Byte, str]

