import Serilog
import Serilog.Core
import Serilog.Events
import System
import System.Collections.Generic

class AggregateSink:
    def __init__(self, sinks: list[Serilog.Core.ILogEventSink]) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...

class ConditionalSink:
    def __init__(self, wrapped: Serilog.Core.ILogEventSink, condition: dict[Serilog.Events.LogEvent, bool]) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...

class DisposeDelegatingSink:
    def __init__(self, sink: Serilog.Core.ILogEventSink, disposable: System.IDisposable) -> None: ...
    def Dispose(self) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...

class DisposingAggregateSink:
    def __init__(self, sinks: list[Serilog.Core.ILogEventSink]) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...

class FilteringSink:
    def __init__(self, sink: Serilog.Core.ILogEventSink, filters: list[Serilog.Core.ILogEventFilter], propagateExceptions: bool) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...

class RestrictedSink:
    def __init__(self, sink: Serilog.Core.ILogEventSink, levelSwitch: Serilog.Core.LoggingLevelSwitch) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...

class SafeAggregateSink:
    def __init__(self, sinks: list[Serilog.Core.ILogEventSink]) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...

class SecondaryLoggerSink:
    def __init__(self, logger: Serilog.ILogger, attemptDispose: bool = False) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...

