import Serilog
import Serilog.Events
import System
import System.Collections.Generic
import typing

class Constants:
    SourceContextPropertyName: str

class IDestructuringPolicy:
    def __init__(self , *args: typing.Any) -> None: ...
    def TryDestructure(self, value: typing.Any, propertyValueFactory: ILogEventPropertyValueFactory, result: Serilog.Events.LogEventPropertyValue&) -> bool: ...

class ILogEventEnricher:
    def __init__(self , *args: typing.Any) -> None: ...
    def Enrich(self, logEvent: Serilog.Events.LogEvent, propertyFactory: ILogEventPropertyFactory) -> None: ...

class ILogEventFilter:
    def __init__(self , *args: typing.Any) -> None: ...
    def IsEnabled(self, logEvent: Serilog.Events.LogEvent) -> bool: ...

class ILogEventPropertyFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def CreateProperty(self, name: str, value: typing.Any, destructureObjects: bool = False) -> Serilog.Events.LogEventProperty: ...

class ILogEventPropertyValueFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def CreatePropertyValue(self, value: typing.Any, destructureObjects: bool = False) -> Serilog.Events.LogEventPropertyValue: ...

class ILogEventSink:
    def __init__(self , *args: typing.Any) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...

class IMessageTemplateParser:
    def __init__(self , *args: typing.Any) -> None: ...
    def Parse(self, messageTemplate: str) -> Serilog.Events.MessageTemplate: ...

class IScalarConversionPolicy:
    def __init__(self , *args: typing.Any) -> None: ...
    def TryConvertToScalar(self, value: typing.Any, result: Serilog.Events.ScalarValue&) -> bool: ...

class LevelOverrideMap:
    def __init__(self, overrides: dict[str, LoggingLevelSwitch], defaultMinimumLevel: Serilog.Events.LogEventLevel, defaultLevelSwitch: LoggingLevelSwitch) -> None: ...
    def GetEffectiveLevel(self, context: str, minimumLevel: Serilog.Events.LogEventLevel&, levelSwitch: LoggingLevelSwitch&) -> None: ...

class Logger:
    None: Serilog.ILogger
    @typing.overload
    def ForContext(self, enricher: ILogEventEnricher) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self, enrichers: list[ILogEventEnricher]) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self, propertyName: str, value: typing.Any, destructureObjects: bool = False) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self, source: System.Type) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self) -> Serilog.ILogger: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Write(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def IsEnabled(self, level: Serilog.Events.LogEventLevel) -> bool: ...
    @typing.overload
    def Verbose(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    def BindMessageTemplate(self, messageTemplate: str, propertyValues: list[typing.Any], parsedTemplate: Serilog.Events.MessageTemplate&, boundProperties: System.Collections.Generic.IEnumerable`1[[Serilog.Events.LogEventProperty, Serilog, Version=2.0.0.0, Culture=neutral, PublicKeyToken=24c2f752a8e58a10]]&) -> bool: ...
    def BindProperty(self, propertyName: str, value: typing.Any, destructureObjects: bool, property: Serilog.Events.LogEventProperty&) -> bool: ...
    def Dispose(self) -> None: ...
    @staticmethod
    def get_None() -> Serilog.ILogger: ...

class LoggingLevelSwitch:
    def __init__(self, initialMinimumLevel: Serilog.Events.LogEventLevel = ...) -> None: ...
    MinimumLevel: Serilog.Events.LogEventLevel
    def get_MinimumLevel(self) -> Serilog.Events.LogEventLevel: ...
    def set_MinimumLevel(self, value: Serilog.Events.LogEventLevel) -> None: ...

class MessageTemplateFormatMethodAttribute(System.Attribute):
    def __init__(self, messageTemplateParameterName: str) -> None: ...
    MessageTemplateParameterName: str
    def get_MessageTemplateParameterName(self) -> str: ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__4_0: dict[dict[str, LoggingLevelSwitch], str]
    <>9__4_1: dict[dict[str, LoggingLevelSwitch], LevelOverride]

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__93_0: dict[Serilog.Events.EventProperty, Serilog.Events.LogEventProperty]

