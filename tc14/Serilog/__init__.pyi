import Serilog.Configuration
import Serilog.Core
import Serilog.Events
import Serilog.Formatting
import Serilog.Sinks.Email
import Serilog.Sinks.EventLog
import Serilog.Sinks.File
import Serilog.Sinks.SystemConsole.Themes
import System
import System.Collections.Generic
import System.Net
import System.Text
import typing

class ILogger:
    def __init__(self , *args: typing.Any) -> None: ...
    @staticmethod
    @typing.overload
    def ForContext(enricher: Serilog.Core.ILogEventEnricher) -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext(enrichers: list[Serilog.Core.ILogEventEnricher]) -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext(propertyName: str, value: typing.Any, destructureObjects: bool = False) -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext() -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext(source: System.Type) -> ILogger: ...
    @typing.overload
    def Write(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    def IsEnabled(self, level: Serilog.Events.LogEventLevel) -> bool: ...
    @typing.overload
    def Verbose(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    def BindMessageTemplate(self, messageTemplate: str, propertyValues: list[typing.Any], parsedTemplate: Serilog.Events.MessageTemplate&, boundProperties: System.Collections.Generic.IEnumerable`1[[Serilog.Events.LogEventProperty, Serilog, Version=2.0.0.0, Culture=neutral, PublicKeyToken=24c2f752a8e58a10]]&) -> bool: ...
    def BindProperty(self, propertyName: str, value: typing.Any, destructureObjects: bool, property: Serilog.Events.LogEventProperty&) -> bool: ...

class Log:
    Logger: ILogger
    @staticmethod
    def get_Logger() -> ILogger: ...
    @staticmethod
    def set_Logger(value: ILogger) -> None: ...
    @staticmethod
    def CloseAndFlush() -> None: ...
    @staticmethod
    @typing.overload
    def ForContext(enricher: Serilog.Core.ILogEventEnricher) -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext(enrichers: list[Serilog.Core.ILogEventEnricher]) -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext(propertyName: str, value: typing.Any, destructureObjects: bool = False) -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext() -> ILogger: ...
    @staticmethod
    @typing.overload
    def ForContext(source: System.Type) -> ILogger: ...
    @staticmethod
    @typing.overload
    def Write(logEvent: Serilog.Events.LogEvent) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Write(level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    def IsEnabled(level: Serilog.Events.LogEventLevel) -> bool: ...
    @staticmethod
    @typing.overload
    def Verbose(messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(exception: System.Exception, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Verbose(exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(exception: System.Exception, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Debug(exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Information(messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Information(messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Information(messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Information(messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Information(messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Information(exception: System.Exception, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Information(exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Information(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Information(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Information(exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(exception: System.Exception, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Warning(exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Error(messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Error(messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Error(messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Error(messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Error(messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Error(exception: System.Exception, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Error(exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Error(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Error(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Error(exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(exception: System.Exception, messageTemplate: str) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @staticmethod
    @typing.overload
    def Fatal(exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @staticmethod
    def BindMessageTemplate(messageTemplate: str, propertyValues: list[typing.Any], parsedTemplate: Serilog.Events.MessageTemplate&, boundProperties: System.Collections.Generic.IEnumerable`1[[Serilog.Events.LogEventProperty, Serilog, Version=2.0.0.0, Culture=neutral, PublicKeyToken=24c2f752a8e58a10]]&) -> bool: ...
    @staticmethod
    def BindProperty(propertyName: str, value: typing.Any, destructureObjects: bool, property: Serilog.Events.LogEventProperty&) -> bool: ...

class LoggerConfiguration:
    def __init__(self, ) -> None: ...
    WriteTo: Serilog.Configuration.LoggerSinkConfiguration
    AuditTo: Serilog.Configuration.LoggerAuditSinkConfiguration
    MinimumLevel: Serilog.Configuration.LoggerMinimumLevelConfiguration
    Enrich: Serilog.Configuration.LoggerEnrichmentConfiguration
    Filter: Serilog.Configuration.LoggerFilterConfiguration
    Destructure: Serilog.Configuration.LoggerDestructuringConfiguration
    ReadFrom: Serilog.Configuration.LoggerSettingsConfiguration
    def get_WriteTo(self) -> Serilog.Configuration.LoggerSinkConfiguration: ...
    def get_AuditTo(self) -> Serilog.Configuration.LoggerAuditSinkConfiguration: ...
    def get_MinimumLevel(self) -> Serilog.Configuration.LoggerMinimumLevelConfiguration: ...
    def get_Enrich(self) -> Serilog.Configuration.LoggerEnrichmentConfiguration: ...
    def get_Filter(self) -> Serilog.Configuration.LoggerFilterConfiguration: ...
    def get_Destructure(self) -> Serilog.Configuration.LoggerDestructuringConfiguration: ...
    def get_ReadFrom(self) -> Serilog.Configuration.LoggerSettingsConfiguration: ...
    def CreateLogger(self) -> Serilog.Core.Logger: ...

class LoggerExtensions:
    @staticmethod
    def ForContext(logger: ILogger, level: Serilog.Events.LogEventLevel, propertyName: str, value: TValue, destructureObjects: bool = False) -> ILogger: ...

class <>c__DisplayClass32_0:
    def __init__(self, ) -> None: ...
    disposableSinks: list[System.IDisposable]

class AppSettingsLoggerConfigurationExtensions:
    @staticmethod
    @typing.overload
    def AppSettings(settingConfiguration: Serilog.Configuration.LoggerSettingsConfiguration, settingPrefix: str) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def AppSettings(settingConfiguration: Serilog.Configuration.LoggerSettingsConfiguration, settingPrefix: str, filePath: str) -> LoggerConfiguration: ...

class ConsoleLoggerConfigurationExtensions:
    @staticmethod
    @typing.overload
    def Console(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., outputTemplate: str = '[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}', formatProvider: System.IFormatProvider, levelSwitch: Serilog.Core.LoggingLevelSwitch, standardErrorFromLevel: list[Serilog.Events.LogEventLevel], theme: Serilog.Sinks.SystemConsole.Themes.ConsoleTheme) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def Console(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., levelSwitch: Serilog.Core.LoggingLevelSwitch, standardErrorFromLevel: list[Serilog.Events.LogEventLevel]) -> LoggerConfiguration: ...

class LoggerConfigurationEmailExtensions:
    @staticmethod
    @typing.overload
    def Email(loggerConfiguration: Serilog.Configuration.LoggerSinkConfiguration, fromEmail: str, toEmail: str, outputTemplate: str = '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}', restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., batchPostingLimit: int = 100, period: list[System.TimeSpan], formatProvider: System.IFormatProvider, mailSubject: str = 'Log Email') -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def Email(loggerConfiguration: Serilog.Configuration.LoggerSinkConfiguration, fromEmail: str, toEmail: str, mailServer: str, networkCredential: System.Net.ICredentialsByHost, outputTemplate: str = '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}', restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., batchPostingLimit: int = 100, period: list[System.TimeSpan], formatProvider: System.IFormatProvider, mailSubject: str = 'Log Email') -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def Email(loggerConfiguration: Serilog.Configuration.LoggerSinkConfiguration, fromEmail: str, toEmails: list[str], mailServer: str, networkCredential: System.Net.ICredentialsByHost, outputTemplate: str = '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}', restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., batchPostingLimit: int = 100, period: list[System.TimeSpan], formatProvider: System.IFormatProvider, mailSubject: str = 'Log Email') -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def Email(loggerConfiguration: Serilog.Configuration.LoggerSinkConfiguration, connectionInfo: Serilog.Sinks.Email.EmailConnectionInfo, outputTemplate: str = '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}', restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., batchPostingLimit: int = 100, period: list[System.TimeSpan], formatProvider: System.IFormatProvider, mailSubject: str = 'Log Email') -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def Email(loggerConfiguration: Serilog.Configuration.LoggerSinkConfiguration, connectionInfo: Serilog.Sinks.Email.EmailConnectionInfo, textFormatter: Serilog.Formatting.ITextFormatter, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., batchPostingLimit: int = 100, period: list[System.TimeSpan], mailSubject: str = 'Log Email') -> LoggerConfiguration: ...

class LoggerConfigurationEventLogExtensions:
    @staticmethod
    @typing.overload
    def EventLog(loggerConfiguration: Serilog.Configuration.LoggerSinkConfiguration, source: str, logName: str, machineName: str = '.', manageEventSource: bool = False, outputTemplate: str = '{Message}{NewLine}{Exception}', formatProvider: System.IFormatProvider, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., eventIdProvider: Serilog.Sinks.EventLog.IEventIdProvider) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def EventLog(loggerConfiguration: Serilog.Configuration.LoggerSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, source: str, logName: str, machineName: str = '.', manageEventSource: bool = False, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., eventIdProvider: Serilog.Sinks.EventLog.IEventIdProvider) -> LoggerConfiguration: ...

class FileLoggerConfigurationExtensions:
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel, outputTemplate: str, formatProvider: System.IFormatProvider, fileSizeLimitBytes: list[int], levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool, shared: bool, flushToDiskInterval: list[System.TimeSpan]) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel, fileSizeLimitBytes: list[int], levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool, shared: bool, flushToDiskInterval: list[System.TimeSpan]) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel, outputTemplate: str, formatProvider: System.IFormatProvider, fileSizeLimitBytes: list[int], levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool, shared: bool, flushToDiskInterval: list[System.TimeSpan], rollingInterval: RollingInterval, rollOnFileSizeLimit: bool, retainedFileCountLimit: list[int], encoding: System.Text.Encoding) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel, fileSizeLimitBytes: list[int], levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool, shared: bool, flushToDiskInterval: list[System.TimeSpan], rollingInterval: RollingInterval, rollOnFileSizeLimit: bool, retainedFileCountLimit: list[int], encoding: System.Text.Encoding) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., outputTemplate: str = '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}', formatProvider: System.IFormatProvider, fileSizeLimitBytes: list[int] = 1073741824, levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool = False, shared: bool = False, flushToDiskInterval: list[System.TimeSpan], rollingInterval: RollingInterval = ..., rollOnFileSizeLimit: bool = False, retainedFileCountLimit: list[int] = 31, encoding: System.Text.Encoding, hooks: Serilog.Sinks.File.FileLifecycleHooks) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., fileSizeLimitBytes: list[int] = 1073741824, levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool = False, shared: bool = False, flushToDiskInterval: list[System.TimeSpan], rollingInterval: RollingInterval = ..., rollOnFileSizeLimit: bool = False, retainedFileCountLimit: list[int] = 31, encoding: System.Text.Encoding, hooks: Serilog.Sinks.File.FileLifecycleHooks) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerAuditSinkConfiguration, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel, outputTemplate: str, formatProvider: System.IFormatProvider, levelSwitch: Serilog.Core.LoggingLevelSwitch) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerAuditSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel, levelSwitch: Serilog.Core.LoggingLevelSwitch) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerAuditSinkConfiguration, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., outputTemplate: str = '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}', formatProvider: System.IFormatProvider, levelSwitch: Serilog.Core.LoggingLevelSwitch, encoding: System.Text.Encoding, hooks: Serilog.Sinks.File.FileLifecycleHooks) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def File(sinkConfiguration: Serilog.Configuration.LoggerAuditSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, path: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., levelSwitch: Serilog.Core.LoggingLevelSwitch, encoding: System.Text.Encoding, hooks: Serilog.Sinks.File.FileLifecycleHooks) -> LoggerConfiguration: ...

class RollingInterval(System.Enum, int):
    Infinite: RollingInterval = ...
    Year: RollingInterval = ...
    Month: RollingInterval = ...
    Day: RollingInterval = ...
    Hour: RollingInterval = ...
    Minute: RollingInterval = ...

class RollingFileLoggerConfigurationExtensions:
    @staticmethod
    @typing.overload
    def RollingFile(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, pathFormat: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., outputTemplate: str = '{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level}] {Message}{NewLine}{Exception}', formatProvider: System.IFormatProvider, fileSizeLimitBytes: list[int] = 1073741824, retainedFileCountLimit: list[int] = 31, levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool = False, shared: bool = False, flushToDiskInterval: list[System.TimeSpan]) -> LoggerConfiguration: ...
    @staticmethod
    @typing.overload
    def RollingFile(sinkConfiguration: Serilog.Configuration.LoggerSinkConfiguration, formatter: Serilog.Formatting.ITextFormatter, pathFormat: str, restrictedToMinimumLevel: Serilog.Events.LogEventLevel = ..., fileSizeLimitBytes: list[int] = 1073741824, retainedFileCountLimit: list[int] = 31, levelSwitch: Serilog.Core.LoggingLevelSwitch, buffered: bool = False, shared: bool = False, flushToDiskInterval: list[System.TimeSpan]) -> LoggerConfiguration: ...

