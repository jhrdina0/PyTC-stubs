import Serilog.Events
import System
import System.Collections.Generic
import System.IO
import typing

class AlignmentDirection(System.Enum, int):
    Left: AlignmentDirection = ...
    Right: AlignmentDirection = ...

class Destructuring(System.Enum, int):
    Default: Destructuring = ...
    Stringify: Destructuring = ...
    Destructure: Destructuring = ...

class MessageTemplateParser:
    def __init__(self, ) -> None: ...
    def Parse(self, messageTemplate: str) -> Serilog.Events.MessageTemplate: ...

class MessageTemplateToken:
    StartIndex: int
    Length: int
    def get_StartIndex(self) -> int: ...
    def get_Length(self) -> int: ...
    def Render(self, properties: dict[str, Serilog.Events.LogEventPropertyValue], output: System.IO.TextWriter, formatProvider: System.IFormatProvider) -> None: ...

class PropertyToken(MessageTemplateToken):
    @typing.overload
    def __init__(self, propertyName: str, rawText: str, formatObsolete: str, destructuringObsolete: Destructuring) -> None: ...
    @typing.overload
    def __init__(self, propertyName: str, rawText: str, format: str, alignment: list[Alignment], destructuring: Destructuring = ..., startIndex: int = -1) -> None: ...
    Length: int
    PropertyName: str
    Destructuring: Destructuring
    Format: str
    Alignment: list[Alignment]
    IsPositional: bool
    def get_Length(self) -> int: ...
    def Render(self, properties: dict[str, Serilog.Events.LogEventPropertyValue], output: System.IO.TextWriter, formatProvider: System.IFormatProvider) -> None: ...
    def get_PropertyName(self) -> str: ...
    def get_Destructuring(self) -> Destructuring: ...
    def get_Format(self) -> str: ...
    def get_Alignment(self) -> list[Alignment]: ...
    def get_IsPositional(self) -> bool: ...
    def TryGetPositionalValue(self, position: System.Int32&) -> bool: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...

class TextToken(MessageTemplateToken):
    def __init__(self, text: str, startIndex: int = -1) -> None: ...
    Length: int
    Text: str
    def get_Length(self) -> int: ...
    def Render(self, properties: dict[str, Serilog.Events.LogEventPropertyValue], output: System.IO.TextWriter, formatProvider: System.IFormatProvider) -> None: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def ToString(self) -> str: ...
    def get_Text(self) -> str: ...

class <Tokenize>d__1:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__messageTemplate: str

