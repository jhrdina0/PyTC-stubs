import Serilog
import Serilog.Core
import Serilog.Events
import Serilog.Formatting
import System
import System.Collections.Generic
import System.IO
import System.Text
import System.Threading
import typing

class Clock:
    DateTimeNow: System.DateTime
    @staticmethod
    def get_DateTimeNow() -> System.DateTime: ...
    @staticmethod
    def SetTestDateTimeNow(now: System.DateTime) -> None: ...

class FileLifecycleHooks:
    def OnFileOpened(self, underlyingStream: System.IO.Stream, encoding: System.Text.Encoding) -> System.IO.Stream: ...
    def OnFileDeleting(self, path: str) -> None: ...

class FileSink:
    def __init__(self, path: str, textFormatter: Serilog.Formatting.ITextFormatter, fileSizeLimitBytes: list[int], encoding: System.Text.Encoding, buffered: bool = False) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...
    def FlushToDisk(self) -> None: ...

class IFileSink:
    def __init__(self , *args: typing.Any) -> None: ...
    def EmitOrOverflow(self, logEvent: Serilog.Events.LogEvent) -> bool: ...

class IFlushableFileSink:
    def __init__(self , *args: typing.Any) -> None: ...
    def FlushToDisk(self) -> None: ...

class IOErrors:
    @staticmethod
    def IsLockedFile(ex: System.IO.IOException) -> bool: ...

class NullSink:
    def __init__(self, ) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...

class PathRoller:
    def __init__(self, path: str, interval: Serilog.RollingInterval) -> None: ...
    LogFileDirectory: str
    DirectorySearchPattern: str
    def get_LogFileDirectory(self) -> str: ...
    def get_DirectorySearchPattern(self) -> str: ...
    def GetLogFilePath(self, date: System.DateTime, sequenceNumber: list[int], path: System.String&) -> None: ...
    def SelectMatches(self, filenames: list[str]) -> list[RollingLogFile]: ...
    def GetCurrentCheckpoint(self, instant: System.DateTime) -> list[System.DateTime]: ...
    def GetNextCheckpoint(self, instant: System.DateTime) -> list[System.DateTime]: ...

class PeriodicFlushToDiskSink:
    def __init__(self, sink: Serilog.Core.ILogEventSink, flushInterval: System.TimeSpan) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...

class RollingFileSink:
    def __init__(self, path: str, textFormatter: Serilog.Formatting.ITextFormatter, fileSizeLimitBytes: list[int], retainedFileCountLimit: list[int], encoding: System.Text.Encoding, buffered: bool, shared: bool, rollingInterval: Serilog.RollingInterval, rollOnFileSizeLimit: bool, hooks: FileLifecycleHooks) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...
    def FlushToDisk(self) -> None: ...

class RollingIntervalExtensions:
    @staticmethod
    def GetFormat(interval: Serilog.RollingInterval) -> str: ...
    @staticmethod
    def GetCurrentCheckpoint(interval: Serilog.RollingInterval, instant: System.DateTime) -> list[System.DateTime]: ...
    @staticmethod
    def GetNextCheckpoint(interval: Serilog.RollingInterval, instant: System.DateTime) -> list[System.DateTime]: ...

class RollingLogFile:
    def __init__(self, filename: str, dateTime: list[System.DateTime], sequenceNumber: list[int]) -> None: ...
    Filename: str
    DateTime: list[System.DateTime]
    SequenceNumber: list[int]
    def get_Filename(self) -> str: ...
    def get_DateTime(self) -> list[System.DateTime]: ...
    def get_SequenceNumber(self) -> list[int]: ...

class SharedFileSink:
    def __init__(self, path: str, textFormatter: Serilog.Formatting.ITextFormatter, fileSizeLimitBytes: list[int], encoding: System.Text.Encoding) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...
    def FlushToDisk(self) -> None: ...

class WriteCountingStream(System.IO.Stream):
    def __init__(self, stream: System.IO.Stream) -> None: ...
    CountedLength: int
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    def get_CountedLength(self) -> int: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def Flush(self) -> None: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__4_0: list[System.DateTime]

class <SelectMatches>d__15:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__filenames: list[str]
    <>4__this: PathRoller

class <>c__DisplayClass3_0:
    def __init__(self, ) -> None: ...
    flushable: IFlushableFileSink
    <>4__this: PeriodicFlushToDiskSink

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__3_1: System.Threading.TimerCallback

class <>c__DisplayClass17_0:
    def __init__(self, ) -> None: ...
    currentCheckpoint: list[System.DateTime]

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__17_1: dict[RollingLogFile, list[int]]
    <>9__18_0: dict[RollingLogFile, list[System.DateTime]]
    <>9__18_1: dict[RollingLogFile, list[int]]
    <>9__18_2: dict[RollingLogFile, str]

class <>c__DisplayClass18_0:
    def __init__(self, ) -> None: ...
    currentFileName: str

