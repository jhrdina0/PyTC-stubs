import Serilog.Events
import Serilog.Formatting
import System
import typing

class EventIdHashProvider:
    def __init__(self, ) -> None: ...
    def ComputeEventId(self, logEvent: Serilog.Events.LogEvent) -> System.UInt16: ...

class EventLogSink:
    @typing.overload
    def __init__(self, source: str, logName: str, textFormatter: Serilog.Formatting.ITextFormatter, machineName: str, manageEventSource: bool) -> None: ...
    @typing.overload
    def __init__(self, source: str, logName: str, textFormatter: Serilog.Formatting.ITextFormatter, machineName: str, manageEventSource: bool, eventIdProvider: IEventIdProvider) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...

class IEventIdProvider:
    def __init__(self , *args: typing.Any) -> None: ...
    def ComputeEventId(self, logEvent: Serilog.Events.LogEvent) -> System.UInt16: ...

