import Serilog.Events
import Serilog.Formatting
import System
import System.Collections.Generic
import System.IO
import System.Text

class Clock:
    DateTimeNow: System.DateTime
    @staticmethod
    def get_DateTimeNow() -> System.DateTime: ...
    @staticmethod
    def SetTestDateTimeNow(now: System.DateTime) -> None: ...

class IOErrors:
    @staticmethod
    def IsLockedFile(ex: System.IO.IOException) -> bool: ...

class RollingFileSink:
    def __init__(self, pathFormat: str, textFormatter: Serilog.Formatting.ITextFormatter, fileSizeLimitBytes: list[int], retainedFileCountLimit: list[int], encoding: System.Text.Encoding, buffered: bool = False, shared: bool = False) -> None: ...
    def Emit(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    def Dispose(self) -> None: ...
    def FlushToDisk(self) -> None: ...

class RollingLogFile:
    def __init__(self, filename: str, dateTime: System.DateTime, sequenceNumber: int) -> None: ...
    Filename: str
    DateTime: System.DateTime
    SequenceNumber: int
    def get_Filename(self) -> str: ...
    def get_DateTime(self) -> System.DateTime: ...
    def get_SequenceNumber(self) -> int: ...

class Specifier:
    Date: Specifier
    Hour: Specifier
    HalfHour: Specifier
    Token: str
    Format: str
    Interval: System.TimeSpan
    def get_Token(self) -> str: ...
    def get_Format(self) -> str: ...
    def get_Interval(self) -> System.TimeSpan: ...
    def GetCurrentCheckpoint(self, instant: System.DateTime) -> System.DateTime: ...
    def GetNextCheckpoint(self, instant: System.DateTime) -> System.DateTime: ...
    @staticmethod
    def TryGetSpecifier(pathTemplate: str, specifier: Specifier&) -> bool: ...

class TemplatedPathRoller:
    def __init__(self, pathTemplate: str) -> None: ...
    LogFileDirectory: str
    DirectorySearchPattern: str
    def get_LogFileDirectory(self) -> str: ...
    def get_DirectorySearchPattern(self) -> str: ...
    def GetLogFilePath(self, date: System.DateTime, sequenceNumber: int, path: System.String&) -> None: ...
    def SelectMatches(self, filenames: list[str]) -> list[RollingLogFile]: ...
    def GetCurrentCheckpoint(self, instant: System.DateTime) -> System.DateTime: ...
    def GetNextCheckpoint(self, instant: System.DateTime) -> System.DateTime: ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__4_0: list[System.DateTime]

class <>c__DisplayClass14_0:
    def __init__(self, ) -> None: ...
    currentCheckpoint: System.DateTime

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__14_1: dict[RollingLogFile, int]
    <>9__15_0: dict[RollingLogFile, System.DateTime]
    <>9__15_1: dict[RollingLogFile, int]
    <>9__15_2: dict[RollingLogFile, str]

class <>c__DisplayClass15_0:
    def __init__(self, ) -> None: ...
    currentFileName: str

class <>c__DisplayClass15_0:
    def __init__(self, ) -> None: ...
    pathTemplate: str

class <SelectMatches>d__14:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__filenames: list[str]
    <>4__this: TemplatedPathRoller

