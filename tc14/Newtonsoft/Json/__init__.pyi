import Newtonsoft.Json.Linq
import Newtonsoft.Json.Schema
import Newtonsoft.Json.Serialization
import System
import System.Collections
import System.Collections.Generic
import System.Collections.ObjectModel
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Serialization.Formatters
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Linq
import typing

class ConstructorHandling(System.Enum, int):
    Default: ConstructorHandling = ...
    AllowNonPublicDefaultConstructor: ConstructorHandling = ...

class DateFormatHandling(System.Enum, int):
    IsoDateFormat: DateFormatHandling = ...
    MicrosoftDateFormat: DateFormatHandling = ...

class DateParseHandling(System.Enum, int):
    None: DateParseHandling = ...
    DateTime: DateParseHandling = ...
    DateTimeOffset: DateParseHandling = ...

class DateTimeZoneHandling(System.Enum, int):
    Local: DateTimeZoneHandling = ...
    Utc: DateTimeZoneHandling = ...
    Unspecified: DateTimeZoneHandling = ...
    RoundtripKind: DateTimeZoneHandling = ...

class DefaultJsonNameTable(JsonNameTable):
    def __init__(self, ) -> None: ...
    def Get(self, key: list[System.Char], start: int, length: int) -> str: ...
    def Add(self, key: str) -> str: ...

class DefaultValueHandling(System.Enum, int):
    Include: DefaultValueHandling = ...
    Ignore: DefaultValueHandling = ...
    Populate: DefaultValueHandling = ...
    IgnoreAndPopulate: DefaultValueHandling = ...

class FloatFormatHandling(System.Enum, int):
    String: FloatFormatHandling = ...
    Symbol: FloatFormatHandling = ...
    DefaultValue: FloatFormatHandling = ...

class FloatParseHandling(System.Enum, int):
    Double: FloatParseHandling = ...
    Decimal: FloatParseHandling = ...

class Formatting(System.Enum, int):
    None: Formatting = ...
    Indented: Formatting = ...

class IArrayPool:
    def __init__(self , *args: typing.Any) -> None: ...
    def Rent(self, minimumLength: int) -> list[T]: ...
    def Return(self, array: list[T]) -> None: ...

class IJsonLineInfo:
    def __init__(self , *args: typing.Any) -> None: ...
    LineNumber: int
    LinePosition: int
    def HasLineInfo(self) -> bool: ...
    def get_LineNumber(self) -> int: ...
    def get_LinePosition(self) -> int: ...

class JsonArrayAttribute(JsonContainerAttribute):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, allowNullItems: bool) -> None: ...
    @typing.overload
    def __init__(self, id: str) -> None: ...
    AllowNullItems: bool
    def get_AllowNullItems(self) -> bool: ...
    def set_AllowNullItems(self, value: bool) -> None: ...

class JsonConstructorAttribute(System.Attribute):
    def __init__(self, ) -> None: ...

class JsonContainerAttribute(System.Attribute):
    Id: str
    Title: str
    Description: str
    ItemConverterType: System.Type
    ItemConverterParameters: list[typing.Any]
    NamingStrategyType: System.Type
    NamingStrategyParameters: list[typing.Any]
    IsReference: bool
    ItemIsReference: bool
    ItemReferenceLoopHandling: ReferenceLoopHandling
    ItemTypeNameHandling: TypeNameHandling
    def get_Id(self) -> str: ...
    def set_Id(self, value: str) -> None: ...
    def get_Title(self) -> str: ...
    def set_Title(self, value: str) -> None: ...
    def get_Description(self) -> str: ...
    def set_Description(self, value: str) -> None: ...
    def get_ItemConverterType(self) -> System.Type: ...
    def set_ItemConverterType(self, value: System.Type) -> None: ...
    def get_ItemConverterParameters(self) -> list[typing.Any]: ...
    def set_ItemConverterParameters(self, value: list[typing.Any]) -> None: ...
    def get_NamingStrategyType(self) -> System.Type: ...
    def set_NamingStrategyType(self, value: System.Type) -> None: ...
    def get_NamingStrategyParameters(self) -> list[typing.Any]: ...
    def set_NamingStrategyParameters(self, value: list[typing.Any]) -> None: ...
    def get_IsReference(self) -> bool: ...
    def set_IsReference(self, value: bool) -> None: ...
    def get_ItemIsReference(self) -> bool: ...
    def set_ItemIsReference(self, value: bool) -> None: ...
    def get_ItemReferenceLoopHandling(self) -> ReferenceLoopHandling: ...
    def set_ItemReferenceLoopHandling(self, value: ReferenceLoopHandling) -> None: ...
    def get_ItemTypeNameHandling(self) -> TypeNameHandling: ...
    def set_ItemTypeNameHandling(self, value: TypeNameHandling) -> None: ...

class JsonConvert:
    True: str
    False: str
    Null: str
    Undefined: str
    PositiveInfinity: str
    NegativeInfinity: str
    NaN: str
    DefaultSettings: list[JsonSerializerSettings]
    @staticmethod
    def get_DefaultSettings() -> list[JsonSerializerSettings]: ...
    @staticmethod
    def set_DefaultSettings(value: list[JsonSerializerSettings]) -> None: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.DateTime) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.DateTime, format: DateFormatHandling, timeZoneHandling: DateTimeZoneHandling) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.DateTimeOffset) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.DateTimeOffset, format: DateFormatHandling) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: bool) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.Char) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.Enum) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: int) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: int) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.UInt16) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.UInt32) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: int) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.UInt64) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: float) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: float) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.Byte) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.SByte) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.Decimal) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.Guid) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.TimeSpan) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: System.Uri) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: str) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: str, delimiter: System.Char) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: str, delimiter: System.Char, stringEscapeHandling: StringEscapeHandling) -> str: ...
    @staticmethod
    @typing.overload
    def ToString(value: typing.Any) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any, formatting: Formatting) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any, converters: list[JsonConverter]) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any, formatting: Formatting, converters: list[JsonConverter]) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any, settings: JsonSerializerSettings) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any, type: System.Type, settings: JsonSerializerSettings) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any, formatting: Formatting, settings: JsonSerializerSettings) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeObject(value: typing.Any, type: System.Type, formatting: Formatting, settings: JsonSerializerSettings) -> str: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str, settings: JsonSerializerSettings) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str, type: System.Type) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str) -> T: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str, converters: list[JsonConverter]) -> T: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str, settings: JsonSerializerSettings) -> T: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str, type: System.Type, converters: list[JsonConverter]) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def DeserializeObject(value: str, type: System.Type, settings: JsonSerializerSettings) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def DeserializeAnonymousType(value: str, anonymousTypeObject: T) -> T: ...
    @staticmethod
    @typing.overload
    def DeserializeAnonymousType(value: str, anonymousTypeObject: T, settings: JsonSerializerSettings) -> T: ...
    @staticmethod
    @typing.overload
    def PopulateObject(value: str, target: typing.Any) -> None: ...
    @staticmethod
    @typing.overload
    def PopulateObject(value: str, target: typing.Any, settings: JsonSerializerSettings) -> None: ...
    @staticmethod
    @typing.overload
    def SerializeXmlNode(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeXmlNode(node: System.Xml.XmlNode, formatting: Formatting) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeXmlNode(node: System.Xml.XmlNode, formatting: Formatting, omitRootObject: bool) -> str: ...
    @staticmethod
    @typing.overload
    def DeserializeXmlNode(value: str) -> System.Xml.XmlDocument: ...
    @staticmethod
    @typing.overload
    def DeserializeXmlNode(value: str, deserializeRootElementName: str) -> System.Xml.XmlDocument: ...
    @staticmethod
    @typing.overload
    def DeserializeXmlNode(value: str, deserializeRootElementName: str, writeArrayAttribute: bool) -> System.Xml.XmlDocument: ...
    @staticmethod
    @typing.overload
    def DeserializeXmlNode(value: str, deserializeRootElementName: str, writeArrayAttribute: bool, encodeSpecialCharacters: bool) -> System.Xml.XmlDocument: ...
    @staticmethod
    @typing.overload
    def SerializeXNode(node: System.Xml.Linq.XObject) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeXNode(node: System.Xml.Linq.XObject, formatting: Formatting) -> str: ...
    @staticmethod
    @typing.overload
    def SerializeXNode(node: System.Xml.Linq.XObject, formatting: Formatting, omitRootObject: bool) -> str: ...
    @staticmethod
    @typing.overload
    def DeserializeXNode(value: str) -> System.Xml.Linq.XDocument: ...
    @staticmethod
    @typing.overload
    def DeserializeXNode(value: str, deserializeRootElementName: str) -> System.Xml.Linq.XDocument: ...
    @staticmethod
    @typing.overload
    def DeserializeXNode(value: str, deserializeRootElementName: str, writeArrayAttribute: bool) -> System.Xml.Linq.XDocument: ...
    @staticmethod
    @typing.overload
    def DeserializeXNode(value: str, deserializeRootElementName: str, writeArrayAttribute: bool, encodeSpecialCharacters: bool) -> System.Xml.Linq.XDocument: ...

class JsonConverter:
    CanRead: bool
    CanWrite: bool
    def WriteJson(self, writer: JsonWriter, value: typing.Any, serializer: JsonSerializer) -> None: ...
    def ReadJson(self, reader: JsonReader, objectType: System.Type, existingValue: typing.Any, serializer: JsonSerializer) -> typing.Any: ...
    def CanConvert(self, objectType: System.Type) -> bool: ...
    def get_CanRead(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...

T = typing.TypeVar('T')

class JsonConverter[T](JsonConverter):
    @typing.overload
    def WriteJson(self, writer: JsonWriter, value: typing.Any, serializer: JsonSerializer) -> None: ...
    @typing.overload
    def WriteJson(self, writer: JsonWriter, value: T, serializer: JsonSerializer) -> None: ...
    @typing.overload
    def ReadJson(self, reader: JsonReader, objectType: System.Type, existingValue: typing.Any, serializer: JsonSerializer) -> typing.Any: ...
    @typing.overload
    def ReadJson(self, reader: JsonReader, objectType: System.Type, existingValue: T, hasExistingValue: bool, serializer: JsonSerializer) -> T: ...
    def CanConvert(self, objectType: System.Type) -> bool: ...

class JsonConverterAttribute(System.Attribute):
    @typing.overload
    def __init__(self, converterType: System.Type) -> None: ...
    @typing.overload
    def __init__(self, converterType: System.Type, converterParameters: list[typing.Any]) -> None: ...
    ConverterType: System.Type
    ConverterParameters: list[typing.Any]
    def get_ConverterType(self) -> System.Type: ...
    def get_ConverterParameters(self) -> list[typing.Any]: ...

class JsonConverterCollection(list[JsonConverter]):
    def __init__(self, ) -> None: ...

class JsonDictionaryAttribute(JsonContainerAttribute):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, id: str) -> None: ...

class JsonException(System.Exception):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...

class JsonExtensionDataAttribute(System.Attribute):
    def __init__(self, ) -> None: ...
    WriteData: bool
    ReadData: bool
    def get_WriteData(self) -> bool: ...
    def set_WriteData(self, value: bool) -> None: ...
    def get_ReadData(self) -> bool: ...
    def set_ReadData(self, value: bool) -> None: ...

class JsonIgnoreAttribute(System.Attribute):
    def __init__(self, ) -> None: ...

class JsonNameTable:
    def Get(self, key: list[System.Char], start: int, length: int) -> str: ...

class JsonObjectAttribute(JsonContainerAttribute):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, memberSerialization: MemberSerialization) -> None: ...
    @typing.overload
    def __init__(self, id: str) -> None: ...
    MemberSerialization: MemberSerialization
    MissingMemberHandling: MissingMemberHandling
    ItemNullValueHandling: NullValueHandling
    ItemRequired: Required
    def get_MemberSerialization(self) -> MemberSerialization: ...
    def set_MemberSerialization(self, value: MemberSerialization) -> None: ...
    def get_MissingMemberHandling(self) -> MissingMemberHandling: ...
    def set_MissingMemberHandling(self, value: MissingMemberHandling) -> None: ...
    def get_ItemNullValueHandling(self) -> NullValueHandling: ...
    def set_ItemNullValueHandling(self, value: NullValueHandling) -> None: ...
    def get_ItemRequired(self) -> Required: ...
    def set_ItemRequired(self, value: Required) -> None: ...

class JsonContainerType(System.Enum, int):
    None: JsonContainerType = ...
    Object: JsonContainerType = ...
    Array: JsonContainerType = ...
    Constructor: JsonContainerType = ...

class JsonPropertyAttribute(System.Attribute):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, propertyName: str) -> None: ...
    ItemConverterType: System.Type
    ItemConverterParameters: list[typing.Any]
    NamingStrategyType: System.Type
    NamingStrategyParameters: list[typing.Any]
    NullValueHandling: NullValueHandling
    DefaultValueHandling: DefaultValueHandling
    ReferenceLoopHandling: ReferenceLoopHandling
    ObjectCreationHandling: ObjectCreationHandling
    TypeNameHandling: TypeNameHandling
    IsReference: bool
    Order: int
    Required: Required
    PropertyName: str
    ItemReferenceLoopHandling: ReferenceLoopHandling
    ItemTypeNameHandling: TypeNameHandling
    ItemIsReference: bool
    def get_ItemConverterType(self) -> System.Type: ...
    def set_ItemConverterType(self, value: System.Type) -> None: ...
    def get_ItemConverterParameters(self) -> list[typing.Any]: ...
    def set_ItemConverterParameters(self, value: list[typing.Any]) -> None: ...
    def get_NamingStrategyType(self) -> System.Type: ...
    def set_NamingStrategyType(self, value: System.Type) -> None: ...
    def get_NamingStrategyParameters(self) -> list[typing.Any]: ...
    def set_NamingStrategyParameters(self, value: list[typing.Any]) -> None: ...
    def get_NullValueHandling(self) -> NullValueHandling: ...
    def set_NullValueHandling(self, value: NullValueHandling) -> None: ...
    def get_DefaultValueHandling(self) -> DefaultValueHandling: ...
    def set_DefaultValueHandling(self, value: DefaultValueHandling) -> None: ...
    def get_ReferenceLoopHandling(self) -> ReferenceLoopHandling: ...
    def set_ReferenceLoopHandling(self, value: ReferenceLoopHandling) -> None: ...
    def get_ObjectCreationHandling(self) -> ObjectCreationHandling: ...
    def set_ObjectCreationHandling(self, value: ObjectCreationHandling) -> None: ...
    def get_TypeNameHandling(self) -> TypeNameHandling: ...
    def set_TypeNameHandling(self, value: TypeNameHandling) -> None: ...
    def get_IsReference(self) -> bool: ...
    def set_IsReference(self, value: bool) -> None: ...
    def get_Order(self) -> int: ...
    def set_Order(self, value: int) -> None: ...
    def get_Required(self) -> Required: ...
    def set_Required(self, value: Required) -> None: ...
    def get_PropertyName(self) -> str: ...
    def set_PropertyName(self, value: str) -> None: ...
    def get_ItemReferenceLoopHandling(self) -> ReferenceLoopHandling: ...
    def set_ItemReferenceLoopHandling(self, value: ReferenceLoopHandling) -> None: ...
    def get_ItemTypeNameHandling(self) -> TypeNameHandling: ...
    def set_ItemTypeNameHandling(self, value: TypeNameHandling) -> None: ...
    def get_ItemIsReference(self) -> bool: ...
    def set_ItemIsReference(self, value: bool) -> None: ...

class JsonReader:
    CloseInput: bool
    SupportMultipleContent: bool
    QuoteChar: System.Char
    DateTimeZoneHandling: DateTimeZoneHandling
    DateParseHandling: DateParseHandling
    FloatParseHandling: FloatParseHandling
    DateFormatString: str
    MaxDepth: list[int]
    TokenType: JsonToken
    Value: typing.Any
    ValueType: System.Type
    Depth: int
    Path: str
    Culture: System.Globalization.CultureInfo
    def ReadAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[bool]: ...
    def SkipAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def ReadAsBooleanAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[bool]]: ...
    def ReadAsBytesAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.Byte]]: ...
    def ReadAsDateTimeAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.DateTime]]: ...
    def ReadAsDateTimeOffsetAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.DateTimeOffset]]: ...
    def ReadAsDecimalAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.Decimal]]: ...
    def ReadAsDoubleAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[float]]: ...
    def ReadAsInt32Async(self, cancellationToken: System.Threading.CancellationToken) -> list[list[int]]: ...
    def ReadAsStringAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[str]: ...
    def get_CloseInput(self) -> bool: ...
    def set_CloseInput(self, value: bool) -> None: ...
    def get_SupportMultipleContent(self) -> bool: ...
    def set_SupportMultipleContent(self, value: bool) -> None: ...
    def get_QuoteChar(self) -> System.Char: ...
    def get_DateTimeZoneHandling(self) -> DateTimeZoneHandling: ...
    def set_DateTimeZoneHandling(self, value: DateTimeZoneHandling) -> None: ...
    def get_DateParseHandling(self) -> DateParseHandling: ...
    def set_DateParseHandling(self, value: DateParseHandling) -> None: ...
    def get_FloatParseHandling(self) -> FloatParseHandling: ...
    def set_FloatParseHandling(self, value: FloatParseHandling) -> None: ...
    def get_DateFormatString(self) -> str: ...
    def set_DateFormatString(self, value: str) -> None: ...
    def get_MaxDepth(self) -> list[int]: ...
    def set_MaxDepth(self, value: list[int]) -> None: ...
    def get_TokenType(self) -> JsonToken: ...
    def get_Value(self) -> typing.Any: ...
    def get_ValueType(self) -> System.Type: ...
    def get_Depth(self) -> int: ...
    def get_Path(self) -> str: ...
    def get_Culture(self) -> System.Globalization.CultureInfo: ...
    def set_Culture(self, value: System.Globalization.CultureInfo) -> None: ...
    def Read(self) -> bool: ...
    def ReadAsInt32(self) -> list[int]: ...
    def ReadAsString(self) -> str: ...
    def ReadAsBytes(self) -> list[System.Byte]: ...
    def ReadAsDouble(self) -> list[float]: ...
    def ReadAsBoolean(self) -> list[bool]: ...
    def ReadAsDecimal(self) -> list[System.Decimal]: ...
    def ReadAsDateTime(self) -> list[System.DateTime]: ...
    def ReadAsDateTimeOffset(self) -> list[System.DateTimeOffset]: ...
    def Skip(self) -> None: ...
    def Close(self) -> None: ...

class JsonReaderException(JsonException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @typing.overload
    def __init__(self, message: str, path: str, lineNumber: int, linePosition: int, innerException: System.Exception) -> None: ...
    LineNumber: int
    LinePosition: int
    Path: str
    def get_LineNumber(self) -> int: ...
    def get_LinePosition(self) -> int: ...
    def get_Path(self) -> str: ...

class JsonRequiredAttribute(System.Attribute):
    def __init__(self, ) -> None: ...

class JsonSerializationException(JsonException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @typing.overload
    def __init__(self, message: str, path: str, lineNumber: int, linePosition: int, innerException: System.Exception) -> None: ...
    LineNumber: int
    LinePosition: int
    Path: str
    def get_LineNumber(self) -> int: ...
    def get_LinePosition(self) -> int: ...
    def get_Path(self) -> str: ...

class JsonSerializer:
    def __init__(self, ) -> None: ...
    ReferenceResolver: Newtonsoft.Json.Serialization.IReferenceResolver
    Binder: System.Runtime.Serialization.SerializationBinder
    SerializationBinder: Newtonsoft.Json.Serialization.ISerializationBinder
    TraceWriter: Newtonsoft.Json.Serialization.ITraceWriter
    EqualityComparer: System.Collections.IEqualityComparer
    TypeNameHandling: TypeNameHandling
    TypeNameAssemblyFormat: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
    TypeNameAssemblyFormatHandling: TypeNameAssemblyFormatHandling
    PreserveReferencesHandling: PreserveReferencesHandling
    ReferenceLoopHandling: ReferenceLoopHandling
    MissingMemberHandling: MissingMemberHandling
    NullValueHandling: NullValueHandling
    DefaultValueHandling: DefaultValueHandling
    ObjectCreationHandling: ObjectCreationHandling
    ConstructorHandling: ConstructorHandling
    MetadataPropertyHandling: MetadataPropertyHandling
    Converters: JsonConverterCollection
    ContractResolver: Newtonsoft.Json.Serialization.IContractResolver
    Context: System.Runtime.Serialization.StreamingContext
    Formatting: Formatting
    DateFormatHandling: DateFormatHandling
    DateTimeZoneHandling: DateTimeZoneHandling
    DateParseHandling: DateParseHandling
    FloatParseHandling: FloatParseHandling
    FloatFormatHandling: FloatFormatHandling
    StringEscapeHandling: StringEscapeHandling
    DateFormatString: str
    Culture: System.Globalization.CultureInfo
    MaxDepth: list[int]
    CheckAdditionalContent: bool
    def add_Error(self, value: list[Newtonsoft.Json.Serialization.ErrorEventArgs]) -> None: ...
    def remove_Error(self, value: list[Newtonsoft.Json.Serialization.ErrorEventArgs]) -> None: ...
    def get_ReferenceResolver(self) -> Newtonsoft.Json.Serialization.IReferenceResolver: ...
    def set_ReferenceResolver(self, value: Newtonsoft.Json.Serialization.IReferenceResolver) -> None: ...
    def get_Binder(self) -> System.Runtime.Serialization.SerializationBinder: ...
    def set_Binder(self, value: System.Runtime.Serialization.SerializationBinder) -> None: ...
    def get_SerializationBinder(self) -> Newtonsoft.Json.Serialization.ISerializationBinder: ...
    def set_SerializationBinder(self, value: Newtonsoft.Json.Serialization.ISerializationBinder) -> None: ...
    def get_TraceWriter(self) -> Newtonsoft.Json.Serialization.ITraceWriter: ...
    def set_TraceWriter(self, value: Newtonsoft.Json.Serialization.ITraceWriter) -> None: ...
    def get_EqualityComparer(self) -> System.Collections.IEqualityComparer: ...
    def set_EqualityComparer(self, value: System.Collections.IEqualityComparer) -> None: ...
    def get_TypeNameHandling(self) -> TypeNameHandling: ...
    def set_TypeNameHandling(self, value: TypeNameHandling) -> None: ...
    def get_TypeNameAssemblyFormat(self) -> System.Runtime.Serialization.Formatters.FormatterAssemblyStyle: ...
    def set_TypeNameAssemblyFormat(self, value: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle) -> None: ...
    def get_TypeNameAssemblyFormatHandling(self) -> TypeNameAssemblyFormatHandling: ...
    def set_TypeNameAssemblyFormatHandling(self, value: TypeNameAssemblyFormatHandling) -> None: ...
    def get_PreserveReferencesHandling(self) -> PreserveReferencesHandling: ...
    def set_PreserveReferencesHandling(self, value: PreserveReferencesHandling) -> None: ...
    def get_ReferenceLoopHandling(self) -> ReferenceLoopHandling: ...
    def set_ReferenceLoopHandling(self, value: ReferenceLoopHandling) -> None: ...
    def get_MissingMemberHandling(self) -> MissingMemberHandling: ...
    def set_MissingMemberHandling(self, value: MissingMemberHandling) -> None: ...
    def get_NullValueHandling(self) -> NullValueHandling: ...
    def set_NullValueHandling(self, value: NullValueHandling) -> None: ...
    def get_DefaultValueHandling(self) -> DefaultValueHandling: ...
    def set_DefaultValueHandling(self, value: DefaultValueHandling) -> None: ...
    def get_ObjectCreationHandling(self) -> ObjectCreationHandling: ...
    def set_ObjectCreationHandling(self, value: ObjectCreationHandling) -> None: ...
    def get_ConstructorHandling(self) -> ConstructorHandling: ...
    def set_ConstructorHandling(self, value: ConstructorHandling) -> None: ...
    def get_MetadataPropertyHandling(self) -> MetadataPropertyHandling: ...
    def set_MetadataPropertyHandling(self, value: MetadataPropertyHandling) -> None: ...
    def get_Converters(self) -> JsonConverterCollection: ...
    def get_ContractResolver(self) -> Newtonsoft.Json.Serialization.IContractResolver: ...
    def set_ContractResolver(self, value: Newtonsoft.Json.Serialization.IContractResolver) -> None: ...
    def get_Context(self) -> System.Runtime.Serialization.StreamingContext: ...
    def set_Context(self, value: System.Runtime.Serialization.StreamingContext) -> None: ...
    def get_Formatting(self) -> Formatting: ...
    def set_Formatting(self, value: Formatting) -> None: ...
    def get_DateFormatHandling(self) -> DateFormatHandling: ...
    def set_DateFormatHandling(self, value: DateFormatHandling) -> None: ...
    def get_DateTimeZoneHandling(self) -> DateTimeZoneHandling: ...
    def set_DateTimeZoneHandling(self, value: DateTimeZoneHandling) -> None: ...
    def get_DateParseHandling(self) -> DateParseHandling: ...
    def set_DateParseHandling(self, value: DateParseHandling) -> None: ...
    def get_FloatParseHandling(self) -> FloatParseHandling: ...
    def set_FloatParseHandling(self, value: FloatParseHandling) -> None: ...
    def get_FloatFormatHandling(self) -> FloatFormatHandling: ...
    def set_FloatFormatHandling(self, value: FloatFormatHandling) -> None: ...
    def get_StringEscapeHandling(self) -> StringEscapeHandling: ...
    def set_StringEscapeHandling(self, value: StringEscapeHandling) -> None: ...
    def get_DateFormatString(self) -> str: ...
    def set_DateFormatString(self, value: str) -> None: ...
    def get_Culture(self) -> System.Globalization.CultureInfo: ...
    def set_Culture(self, value: System.Globalization.CultureInfo) -> None: ...
    def get_MaxDepth(self) -> list[int]: ...
    def set_MaxDepth(self, value: list[int]) -> None: ...
    def get_CheckAdditionalContent(self) -> bool: ...
    def set_CheckAdditionalContent(self, value: bool) -> None: ...
    @staticmethod
    @typing.overload
    def Create() -> JsonSerializer: ...
    @staticmethod
    @typing.overload
    def Create(settings: JsonSerializerSettings) -> JsonSerializer: ...
    @staticmethod
    @typing.overload
    def CreateDefault() -> JsonSerializer: ...
    @staticmethod
    @typing.overload
    def CreateDefault(settings: JsonSerializerSettings) -> JsonSerializer: ...
    @typing.overload
    def Populate(self, reader: System.IO.TextReader, target: typing.Any) -> None: ...
    @typing.overload
    def Populate(self, reader: JsonReader, target: typing.Any) -> None: ...
    @typing.overload
    def Deserialize(self, reader: JsonReader) -> typing.Any: ...
    @typing.overload
    def Deserialize(self, reader: System.IO.TextReader, objectType: System.Type) -> typing.Any: ...
    @typing.overload
    def Deserialize(self, reader: JsonReader) -> T: ...
    @typing.overload
    def Deserialize(self, reader: JsonReader, objectType: System.Type) -> typing.Any: ...
    @typing.overload
    def Serialize(self, textWriter: System.IO.TextWriter, value: typing.Any) -> None: ...
    @typing.overload
    def Serialize(self, jsonWriter: JsonWriter, value: typing.Any, objectType: System.Type) -> None: ...
    @typing.overload
    def Serialize(self, textWriter: System.IO.TextWriter, value: typing.Any, objectType: System.Type) -> None: ...
    @typing.overload
    def Serialize(self, jsonWriter: JsonWriter, value: typing.Any) -> None: ...

class JsonSerializerSettings:
    def __init__(self, ) -> None: ...
    ReferenceLoopHandling: ReferenceLoopHandling
    MissingMemberHandling: MissingMemberHandling
    ObjectCreationHandling: ObjectCreationHandling
    NullValueHandling: NullValueHandling
    DefaultValueHandling: DefaultValueHandling
    Converters: list[JsonConverter]
    PreserveReferencesHandling: PreserveReferencesHandling
    TypeNameHandling: TypeNameHandling
    MetadataPropertyHandling: MetadataPropertyHandling
    TypeNameAssemblyFormat: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
    TypeNameAssemblyFormatHandling: TypeNameAssemblyFormatHandling
    ConstructorHandling: ConstructorHandling
    ContractResolver: Newtonsoft.Json.Serialization.IContractResolver
    EqualityComparer: System.Collections.IEqualityComparer
    ReferenceResolver: Newtonsoft.Json.Serialization.IReferenceResolver
    ReferenceResolverProvider: list[Newtonsoft.Json.Serialization.IReferenceResolver]
    TraceWriter: Newtonsoft.Json.Serialization.ITraceWriter
    Binder: System.Runtime.Serialization.SerializationBinder
    SerializationBinder: Newtonsoft.Json.Serialization.ISerializationBinder
    Error: list[Newtonsoft.Json.Serialization.ErrorEventArgs]
    Context: System.Runtime.Serialization.StreamingContext
    DateFormatString: str
    MaxDepth: list[int]
    Formatting: Formatting
    DateFormatHandling: DateFormatHandling
    DateTimeZoneHandling: DateTimeZoneHandling
    DateParseHandling: DateParseHandling
    FloatFormatHandling: FloatFormatHandling
    FloatParseHandling: FloatParseHandling
    StringEscapeHandling: StringEscapeHandling
    Culture: System.Globalization.CultureInfo
    CheckAdditionalContent: bool
    def get_ReferenceLoopHandling(self) -> ReferenceLoopHandling: ...
    def set_ReferenceLoopHandling(self, value: ReferenceLoopHandling) -> None: ...
    def get_MissingMemberHandling(self) -> MissingMemberHandling: ...
    def set_MissingMemberHandling(self, value: MissingMemberHandling) -> None: ...
    def get_ObjectCreationHandling(self) -> ObjectCreationHandling: ...
    def set_ObjectCreationHandling(self, value: ObjectCreationHandling) -> None: ...
    def get_NullValueHandling(self) -> NullValueHandling: ...
    def set_NullValueHandling(self, value: NullValueHandling) -> None: ...
    def get_DefaultValueHandling(self) -> DefaultValueHandling: ...
    def set_DefaultValueHandling(self, value: DefaultValueHandling) -> None: ...
    def get_Converters(self) -> list[JsonConverter]: ...
    def set_Converters(self, value: list[JsonConverter]) -> None: ...
    def get_PreserveReferencesHandling(self) -> PreserveReferencesHandling: ...
    def set_PreserveReferencesHandling(self, value: PreserveReferencesHandling) -> None: ...
    def get_TypeNameHandling(self) -> TypeNameHandling: ...
    def set_TypeNameHandling(self, value: TypeNameHandling) -> None: ...
    def get_MetadataPropertyHandling(self) -> MetadataPropertyHandling: ...
    def set_MetadataPropertyHandling(self, value: MetadataPropertyHandling) -> None: ...
    def get_TypeNameAssemblyFormat(self) -> System.Runtime.Serialization.Formatters.FormatterAssemblyStyle: ...
    def set_TypeNameAssemblyFormat(self, value: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle) -> None: ...
    def get_TypeNameAssemblyFormatHandling(self) -> TypeNameAssemblyFormatHandling: ...
    def set_TypeNameAssemblyFormatHandling(self, value: TypeNameAssemblyFormatHandling) -> None: ...
    def get_ConstructorHandling(self) -> ConstructorHandling: ...
    def set_ConstructorHandling(self, value: ConstructorHandling) -> None: ...
    def get_ContractResolver(self) -> Newtonsoft.Json.Serialization.IContractResolver: ...
    def set_ContractResolver(self, value: Newtonsoft.Json.Serialization.IContractResolver) -> None: ...
    def get_EqualityComparer(self) -> System.Collections.IEqualityComparer: ...
    def set_EqualityComparer(self, value: System.Collections.IEqualityComparer) -> None: ...
    def get_ReferenceResolver(self) -> Newtonsoft.Json.Serialization.IReferenceResolver: ...
    def set_ReferenceResolver(self, value: Newtonsoft.Json.Serialization.IReferenceResolver) -> None: ...
    def get_ReferenceResolverProvider(self) -> list[Newtonsoft.Json.Serialization.IReferenceResolver]: ...
    def set_ReferenceResolverProvider(self, value: list[Newtonsoft.Json.Serialization.IReferenceResolver]) -> None: ...
    def get_TraceWriter(self) -> Newtonsoft.Json.Serialization.ITraceWriter: ...
    def set_TraceWriter(self, value: Newtonsoft.Json.Serialization.ITraceWriter) -> None: ...
    def get_Binder(self) -> System.Runtime.Serialization.SerializationBinder: ...
    def set_Binder(self, value: System.Runtime.Serialization.SerializationBinder) -> None: ...
    def get_SerializationBinder(self) -> Newtonsoft.Json.Serialization.ISerializationBinder: ...
    def set_SerializationBinder(self, value: Newtonsoft.Json.Serialization.ISerializationBinder) -> None: ...
    def get_Error(self) -> list[Newtonsoft.Json.Serialization.ErrorEventArgs]: ...
    def set_Error(self, value: list[Newtonsoft.Json.Serialization.ErrorEventArgs]) -> None: ...
    def get_Context(self) -> System.Runtime.Serialization.StreamingContext: ...
    def set_Context(self, value: System.Runtime.Serialization.StreamingContext) -> None: ...
    def get_DateFormatString(self) -> str: ...
    def set_DateFormatString(self, value: str) -> None: ...
    def get_MaxDepth(self) -> list[int]: ...
    def set_MaxDepth(self, value: list[int]) -> None: ...
    def get_Formatting(self) -> Formatting: ...
    def set_Formatting(self, value: Formatting) -> None: ...
    def get_DateFormatHandling(self) -> DateFormatHandling: ...
    def set_DateFormatHandling(self, value: DateFormatHandling) -> None: ...
    def get_DateTimeZoneHandling(self) -> DateTimeZoneHandling: ...
    def set_DateTimeZoneHandling(self, value: DateTimeZoneHandling) -> None: ...
    def get_DateParseHandling(self) -> DateParseHandling: ...
    def set_DateParseHandling(self, value: DateParseHandling) -> None: ...
    def get_FloatFormatHandling(self) -> FloatFormatHandling: ...
    def set_FloatFormatHandling(self, value: FloatFormatHandling) -> None: ...
    def get_FloatParseHandling(self) -> FloatParseHandling: ...
    def set_FloatParseHandling(self, value: FloatParseHandling) -> None: ...
    def get_StringEscapeHandling(self) -> StringEscapeHandling: ...
    def set_StringEscapeHandling(self, value: StringEscapeHandling) -> None: ...
    def get_Culture(self) -> System.Globalization.CultureInfo: ...
    def set_Culture(self, value: System.Globalization.CultureInfo) -> None: ...
    def get_CheckAdditionalContent(self) -> bool: ...
    def set_CheckAdditionalContent(self, value: bool) -> None: ...

class JsonTextReader(JsonReader):
    def __init__(self, reader: System.IO.TextReader) -> None: ...
    PropertyNameTable: JsonNameTable
    ArrayPool: list[System.Char]
    LineNumber: int
    LinePosition: int
    def ReadAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[bool]: ...
    def ReadAsBooleanAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[bool]]: ...
    def ReadAsBytesAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.Byte]]: ...
    def ReadAsDateTimeAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.DateTime]]: ...
    def ReadAsDateTimeOffsetAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.DateTimeOffset]]: ...
    def ReadAsDecimalAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[System.Decimal]]: ...
    def ReadAsDoubleAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[list[float]]: ...
    def ReadAsInt32Async(self, cancellationToken: System.Threading.CancellationToken) -> list[list[int]]: ...
    def ReadAsStringAsync(self, cancellationToken: System.Threading.CancellationToken) -> list[str]: ...
    def get_PropertyNameTable(self) -> JsonNameTable: ...
    def set_PropertyNameTable(self, value: JsonNameTable) -> None: ...
    def get_ArrayPool(self) -> list[System.Char]: ...
    def set_ArrayPool(self, value: list[System.Char]) -> None: ...
    def Read(self) -> bool: ...
    def ReadAsInt32(self) -> list[int]: ...
    def ReadAsDateTime(self) -> list[System.DateTime]: ...
    def ReadAsString(self) -> str: ...
    def ReadAsBytes(self) -> list[System.Byte]: ...
    def ReadAsBoolean(self) -> list[bool]: ...
    def ReadAsDateTimeOffset(self) -> list[System.DateTimeOffset]: ...
    def ReadAsDecimal(self) -> list[System.Decimal]: ...
    def ReadAsDouble(self) -> list[float]: ...
    def Close(self) -> None: ...
    def HasLineInfo(self) -> bool: ...
    def get_LineNumber(self) -> int: ...
    def get_LinePosition(self) -> int: ...

class ReadType(System.Enum, int):
    Read: ReadType = ...
    ReadAsInt32: ReadType = ...
    ReadAsInt64: ReadType = ...
    ReadAsBytes: ReadType = ...
    ReadAsString: ReadType = ...
    ReadAsDecimal: ReadType = ...
    ReadAsDateTime: ReadType = ...
    ReadAsDateTimeOffset: ReadType = ...
    ReadAsDouble: ReadType = ...
    ReadAsBoolean: ReadType = ...

class JsonTextWriter(JsonWriter):
    def __init__(self, textWriter: System.IO.TextWriter) -> None: ...
    ArrayPool: list[System.Char]
    Indentation: int
    QuoteChar: System.Char
    IndentChar: System.Char
    QuoteName: bool
    @typing.overload
    def WriteValue(self, value: System.Guid) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.TimeSpan) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Uri) -> None: ...
    @typing.overload
    def WriteValue(self, value: typing.Any) -> None: ...
    @typing.overload
    def WriteValue(self, value: str) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt32) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt64) -> None: ...
    @typing.overload
    def WriteValue(self, value: float) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[float]) -> None: ...
    @typing.overload
    def WriteValue(self, value: float) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[float]) -> None: ...
    @typing.overload
    def WriteValue(self, value: bool) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt16) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Char) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Byte) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.SByte) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Decimal) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.DateTime) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.DateTimeOffset) -> None: ...
    def WriteComment(self, text: str) -> None: ...
    def WriteWhitespace(self, ws: str) -> None: ...
    def FlushAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def CloseAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteRawAsync(self, json: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteNullAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WritePropertyNameAsync(self, name: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WritePropertyNameAsync(self, name: str, escape: bool, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteStartArrayAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteStartObjectAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteStartConstructorAsync(self, name: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteUndefinedAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteWhitespaceAsync(self, ws: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: bool, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[bool], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Byte, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Byte], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Byte], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Char, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Char], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.DateTime, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.DateTime], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.DateTimeOffset, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.DateTimeOffset], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Decimal, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Decimal], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: float, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[float], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: float, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[float], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Guid, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Guid], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: int, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[int], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: int, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[int], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: typing.Any, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.SByte, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.SByte], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: int, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[int], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.TimeSpan, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.TimeSpan], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.UInt32, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.UInt32], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.UInt64, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.UInt64], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Uri, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.UInt16, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.UInt16], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteCommentAsync(self, text: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndArrayAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndConstructorAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndObjectAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteRawValueAsync(self, json: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def get_ArrayPool(self) -> list[System.Char]: ...
    def set_ArrayPool(self, value: list[System.Char]) -> None: ...
    def get_Indentation(self) -> int: ...
    def set_Indentation(self, value: int) -> None: ...
    def get_QuoteChar(self) -> System.Char: ...
    def set_QuoteChar(self, value: System.Char) -> None: ...
    def get_IndentChar(self) -> System.Char: ...
    def set_IndentChar(self, value: System.Char) -> None: ...
    def get_QuoteName(self) -> bool: ...
    def set_QuoteName(self, value: bool) -> None: ...
    def Flush(self) -> None: ...
    def Close(self) -> None: ...
    def WriteStartObject(self) -> None: ...
    def WriteStartArray(self) -> None: ...
    def WriteStartConstructor(self, name: str) -> None: ...
    @typing.overload
    def WritePropertyName(self, name: str) -> None: ...
    @typing.overload
    def WritePropertyName(self, name: str, escape: bool) -> None: ...
    def WriteNull(self) -> None: ...
    def WriteUndefined(self) -> None: ...
    def WriteRaw(self, json: str) -> None: ...

class JsonToken(System.Enum, int):
    None: JsonToken = ...
    StartObject: JsonToken = ...
    StartArray: JsonToken = ...
    StartConstructor: JsonToken = ...
    PropertyName: JsonToken = ...
    Comment: JsonToken = ...
    Raw: JsonToken = ...
    Integer: JsonToken = ...
    Float: JsonToken = ...
    String: JsonToken = ...
    Boolean: JsonToken = ...
    Null: JsonToken = ...
    Undefined: JsonToken = ...
    EndObject: JsonToken = ...
    EndArray: JsonToken = ...
    EndConstructor: JsonToken = ...
    Date: JsonToken = ...
    Bytes: JsonToken = ...

class JsonValidatingReader(JsonReader):
    def __init__(self, reader: JsonReader) -> None: ...
    Value: typing.Any
    Depth: int
    Path: str
    QuoteChar: System.Char
    TokenType: JsonToken
    ValueType: System.Type
    Schema: Newtonsoft.Json.Schema.JsonSchema
    Reader: JsonReader
    def add_ValidationEventHandler(self, value: Newtonsoft.Json.Schema.ValidationEventHandler) -> None: ...
    def remove_ValidationEventHandler(self, value: Newtonsoft.Json.Schema.ValidationEventHandler) -> None: ...
    def get_Value(self) -> typing.Any: ...
    def get_Depth(self) -> int: ...
    def get_Path(self) -> str: ...
    def get_QuoteChar(self) -> System.Char: ...
    def get_TokenType(self) -> JsonToken: ...
    def get_ValueType(self) -> System.Type: ...
    def get_Schema(self) -> Newtonsoft.Json.Schema.JsonSchema: ...
    def set_Schema(self, value: Newtonsoft.Json.Schema.JsonSchema) -> None: ...
    def get_Reader(self) -> JsonReader: ...
    def Close(self) -> None: ...
    def ReadAsInt32(self) -> list[int]: ...
    def ReadAsBytes(self) -> list[System.Byte]: ...
    def ReadAsDecimal(self) -> list[System.Decimal]: ...
    def ReadAsDouble(self) -> list[float]: ...
    def ReadAsBoolean(self) -> list[bool]: ...
    def ReadAsString(self) -> str: ...
    def ReadAsDateTime(self) -> list[System.DateTime]: ...
    def ReadAsDateTimeOffset(self) -> list[System.DateTimeOffset]: ...
    def Read(self) -> bool: ...

class JsonWriter:
    CloseOutput: bool
    AutoCompleteOnClose: bool
    WriteState: WriteState
    Path: str
    Formatting: Formatting
    DateFormatHandling: DateFormatHandling
    DateTimeZoneHandling: DateTimeZoneHandling
    StringEscapeHandling: StringEscapeHandling
    FloatFormatHandling: FloatFormatHandling
    DateFormatString: str
    Culture: System.Globalization.CultureInfo
    def CloseAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def FlushAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteRawAsync(self, json: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndArrayAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndConstructorAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteEndObjectAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteNullAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WritePropertyNameAsync(self, name: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WritePropertyNameAsync(self, name: str, escape: bool, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteStartArrayAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteCommentAsync(self, text: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteRawValueAsync(self, json: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteStartConstructorAsync(self, name: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteStartObjectAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteTokenAsync(self, reader: JsonReader, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteTokenAsync(self, reader: JsonReader, writeChildren: bool, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteTokenAsync(self, token: JsonToken, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteTokenAsync(self, token: JsonToken, value: typing.Any, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: bool, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[bool], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Byte, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Byte], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Byte], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Char, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Char], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.DateTime, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.DateTime], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.DateTimeOffset, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.DateTimeOffset], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Decimal, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Decimal], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: float, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[float], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: float, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[float], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Guid, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.Guid], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: int, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[int], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: int, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[int], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: typing.Any, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.SByte, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.SByte], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: int, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[int], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.TimeSpan, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.TimeSpan], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.UInt32, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.UInt32], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.UInt64, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.UInt64], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.Uri, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: System.UInt16, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    @typing.overload
    def WriteValueAsync(self, value: list[System.UInt16], cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteUndefinedAsync(self, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def WriteWhitespaceAsync(self, ws: str, cancellationToken: System.Threading.CancellationToken) -> System.Threading.Tasks.Task: ...
    def get_CloseOutput(self) -> bool: ...
    def set_CloseOutput(self, value: bool) -> None: ...
    def get_AutoCompleteOnClose(self) -> bool: ...
    def set_AutoCompleteOnClose(self, value: bool) -> None: ...
    def get_WriteState(self) -> WriteState: ...
    def get_Path(self) -> str: ...
    def get_Formatting(self) -> Formatting: ...
    def set_Formatting(self, value: Formatting) -> None: ...
    def get_DateFormatHandling(self) -> DateFormatHandling: ...
    def set_DateFormatHandling(self, value: DateFormatHandling) -> None: ...
    def get_DateTimeZoneHandling(self) -> DateTimeZoneHandling: ...
    def set_DateTimeZoneHandling(self, value: DateTimeZoneHandling) -> None: ...
    def get_StringEscapeHandling(self) -> StringEscapeHandling: ...
    def set_StringEscapeHandling(self, value: StringEscapeHandling) -> None: ...
    def get_FloatFormatHandling(self) -> FloatFormatHandling: ...
    def set_FloatFormatHandling(self, value: FloatFormatHandling) -> None: ...
    def get_DateFormatString(self) -> str: ...
    def set_DateFormatString(self, value: str) -> None: ...
    def get_Culture(self) -> System.Globalization.CultureInfo: ...
    def set_Culture(self, value: System.Globalization.CultureInfo) -> None: ...
    def Flush(self) -> None: ...
    def Close(self) -> None: ...
    def WriteStartObject(self) -> None: ...
    def WriteEndObject(self) -> None: ...
    def WriteStartArray(self) -> None: ...
    def WriteEndArray(self) -> None: ...
    def WriteStartConstructor(self, name: str) -> None: ...
    def WriteEndConstructor(self) -> None: ...
    @typing.overload
    def WritePropertyName(self, name: str) -> None: ...
    @typing.overload
    def WritePropertyName(self, name: str, escape: bool) -> None: ...
    def WriteEnd(self) -> None: ...
    @typing.overload
    def WriteToken(self, reader: JsonReader) -> None: ...
    @typing.overload
    def WriteToken(self, reader: JsonReader, writeChildren: bool) -> None: ...
    @typing.overload
    def WriteToken(self, token: JsonToken, value: typing.Any) -> None: ...
    @typing.overload
    def WriteToken(self, token: JsonToken) -> None: ...
    def WriteNull(self) -> None: ...
    def WriteUndefined(self) -> None: ...
    def WriteRaw(self, json: str) -> None: ...
    def WriteRawValue(self, json: str) -> None: ...
    @typing.overload
    def WriteValue(self, value: str) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt32) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt64) -> None: ...
    @typing.overload
    def WriteValue(self, value: float) -> None: ...
    @typing.overload
    def WriteValue(self, value: float) -> None: ...
    @typing.overload
    def WriteValue(self, value: bool) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt16) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Char) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Byte) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.SByte) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Decimal) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.DateTime) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.DateTimeOffset) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Guid) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.TimeSpan) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[int]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.UInt32]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[int]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.UInt64]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[float]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[float]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[bool]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[int]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.UInt16]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Char]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.SByte]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Decimal]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.DateTime]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.DateTimeOffset]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Guid]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.TimeSpan]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Uri) -> None: ...
    @typing.overload
    def WriteValue(self, value: typing.Any) -> None: ...
    def WriteComment(self, text: str) -> None: ...
    def WriteWhitespace(self, ws: str) -> None: ...

class JsonWriterException(JsonException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @typing.overload
    def __init__(self, message: str, path: str, innerException: System.Exception) -> None: ...
    Path: str
    def get_Path(self) -> str: ...

class MemberSerialization(System.Enum, int):
    OptOut: MemberSerialization = ...
    OptIn: MemberSerialization = ...
    Fields: MemberSerialization = ...

class MetadataPropertyHandling(System.Enum, int):
    Default: MetadataPropertyHandling = ...
    ReadAhead: MetadataPropertyHandling = ...
    Ignore: MetadataPropertyHandling = ...

class MissingMemberHandling(System.Enum, int):
    Ignore: MissingMemberHandling = ...
    Error: MissingMemberHandling = ...

class NullValueHandling(System.Enum, int):
    Include: NullValueHandling = ...
    Ignore: NullValueHandling = ...

class ObjectCreationHandling(System.Enum, int):
    Auto: ObjectCreationHandling = ...
    Reuse: ObjectCreationHandling = ...
    Replace: ObjectCreationHandling = ...

class PreserveReferencesHandling(System.Enum, int):
    None: PreserveReferencesHandling = ...
    Objects: PreserveReferencesHandling = ...
    Arrays: PreserveReferencesHandling = ...
    All: PreserveReferencesHandling = ...

class ReferenceLoopHandling(System.Enum, int):
    Error: ReferenceLoopHandling = ...
    Ignore: ReferenceLoopHandling = ...
    Serialize: ReferenceLoopHandling = ...

class Required(System.Enum, int):
    Default: Required = ...
    AllowNull: Required = ...
    Always: Required = ...
    DisallowNull: Required = ...

class StringEscapeHandling(System.Enum, int):
    Default: StringEscapeHandling = ...
    EscapeNonAscii: StringEscapeHandling = ...
    EscapeHtml: StringEscapeHandling = ...

class TypeNameAssemblyFormatHandling(System.Enum, int):
    Simple: TypeNameAssemblyFormatHandling = ...
    Full: TypeNameAssemblyFormatHandling = ...

class TypeNameHandling(System.Enum, int):
    None: TypeNameHandling = ...
    Objects: TypeNameHandling = ...
    Arrays: TypeNameHandling = ...
    All: TypeNameHandling = ...
    Auto: TypeNameHandling = ...

class WriteState(System.Enum, int):
    Error: WriteState = ...
    Closed: WriteState = ...
    Object: WriteState = ...
    Array: WriteState = ...
    Constructor: WriteState = ...
    Property: WriteState = ...
    Start: WriteState = ...

class Entry:
    pass

class State(System.Enum, int):
    Start: State = ...
    Complete: State = ...
    Property: State = ...
    ObjectStart: State = ...
    Object: State = ...
    ArrayStart: State = ...
    Array: State = ...
    Closed: State = ...
    PostValue: State = ...
    ConstructorStart: State = ...
    Constructor: State = ...
    Error: State = ...
    Finished: State = ...

class <>c__DisplayClass93_0:
    def __init__(self, ) -> None: ...
    value: Newtonsoft.Json.Serialization.IReferenceResolver

class SchemaScope:
    def __init__(self, tokenType: Newtonsoft.Json.Linq.JTokenType, schemas: list[Newtonsoft.Json.Schema.JsonSchemaModel]) -> None: ...
    CurrentPropertyName: str
    ArrayItemCount: int
    IsUniqueArray: bool
    UniqueArrayItems: list[Newtonsoft.Json.Linq.JToken]
    CurrentItemWriter: Newtonsoft.Json.Linq.JTokenWriter
    Schemas: list[Newtonsoft.Json.Schema.JsonSchemaModel]
    RequiredProperties: dict[str, bool]
    TokenType: Newtonsoft.Json.Linq.JTokenType
    def get_CurrentPropertyName(self) -> str: ...
    def set_CurrentPropertyName(self, value: str) -> None: ...
    def get_ArrayItemCount(self) -> int: ...
    def set_ArrayItemCount(self, value: int) -> None: ...
    def get_IsUniqueArray(self) -> bool: ...
    def get_UniqueArrayItems(self) -> list[Newtonsoft.Json.Linq.JToken]: ...
    def get_CurrentItemWriter(self) -> Newtonsoft.Json.Linq.JTokenWriter: ...
    def set_CurrentItemWriter(self, value: Newtonsoft.Json.Linq.JTokenWriter) -> None: ...
    def get_Schemas(self) -> list[Newtonsoft.Json.Schema.JsonSchemaModel]: ...
    def get_RequiredProperties(self) -> dict[str, bool]: ...
    def get_TokenType(self) -> Newtonsoft.Json.Linq.JTokenType: ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__50_0: dict[Newtonsoft.Json.Schema.JsonSchemaModel, bool]
    <>9__50_1: dict[Newtonsoft.Json.Schema.JsonSchemaModel, bool]
    <>9__50_2: dict[Newtonsoft.Json.Schema.JsonSchemaModel, bool]
    <>9__51_0: dict[bool, bool]
    <>9__51_1: dict[dict[str, bool], bool]
    <>9__51_2: dict[dict[str, bool], str]

class State(System.Enum, int):
    Start: State = ...
    Property: State = ...
    ObjectStart: State = ...
    Object: State = ...
    ArrayStart: State = ...
    Array: State = ...
    ConstructorStart: State = ...
    Constructor: State = ...
    Closed: State = ...
    Error: State = ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__27_0: dict[str, str]
    <>9__27_1: dict[str, bool]
    <>9__27_2: dict[Newtonsoft.Json.Schema.JsonSchemaModel, bool]
    <>9__28_0: dict[dict[str, Newtonsoft.Json.Schema.JsonSchemaModel], bool]
    <>9__28_1: dict[dict[str, Newtonsoft.Json.Schema.JsonSchemaModel], str]

