import Newtonsoft.Json
import Newtonsoft.Json.Linq
import Newtonsoft.Json.Serialization
import System
import System.Collections.Generic
import System.Collections.ObjectModel
import System.Runtime.Serialization
import typing

class Extensions:
    @staticmethod
    @typing.overload
    def IsValid(source: Newtonsoft.Json.Linq.JToken, schema: JsonSchema) -> bool: ...
    @staticmethod
    @typing.overload
    def IsValid(source: Newtonsoft.Json.Linq.JToken, schema: JsonSchema, errorMessages: System.Collections.Generic.IList`1[[System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]&) -> bool: ...
    @staticmethod
    @typing.overload
    def Validate(source: Newtonsoft.Json.Linq.JToken, schema: JsonSchema) -> None: ...
    @staticmethod
    @typing.overload
    def Validate(source: Newtonsoft.Json.Linq.JToken, schema: JsonSchema, validationEventHandler: ValidationEventHandler) -> None: ...

class JsonSchema:
    def __init__(self, ) -> None: ...
    Id: str
    Title: str
    Required: list[bool]
    ReadOnly: list[bool]
    Hidden: list[bool]
    Transient: list[bool]
    Description: str
    Type: list[JsonSchemaType]
    Pattern: str
    MinimumLength: list[int]
    MaximumLength: list[int]
    DivisibleBy: list[float]
    Minimum: list[float]
    Maximum: list[float]
    ExclusiveMinimum: list[bool]
    ExclusiveMaximum: list[bool]
    MinimumItems: list[int]
    MaximumItems: list[int]
    Items: list[JsonSchema]
    PositionalItemsValidation: bool
    AdditionalItems: JsonSchema
    AllowAdditionalItems: bool
    UniqueItems: bool
    Properties: dict[str, JsonSchema]
    AdditionalProperties: JsonSchema
    PatternProperties: dict[str, JsonSchema]
    AllowAdditionalProperties: bool
    Requires: str
    Enum: list[Newtonsoft.Json.Linq.JToken]
    Disallow: list[JsonSchemaType]
    Default: Newtonsoft.Json.Linq.JToken
    Extends: list[JsonSchema]
    Format: str
    def get_Id(self) -> str: ...
    def set_Id(self, value: str) -> None: ...
    def get_Title(self) -> str: ...
    def set_Title(self, value: str) -> None: ...
    def get_Required(self) -> list[bool]: ...
    def set_Required(self, value: list[bool]) -> None: ...
    def get_ReadOnly(self) -> list[bool]: ...
    def set_ReadOnly(self, value: list[bool]) -> None: ...
    def get_Hidden(self) -> list[bool]: ...
    def set_Hidden(self, value: list[bool]) -> None: ...
    def get_Transient(self) -> list[bool]: ...
    def set_Transient(self, value: list[bool]) -> None: ...
    def get_Description(self) -> str: ...
    def set_Description(self, value: str) -> None: ...
    def get_Type(self) -> list[JsonSchemaType]: ...
    def set_Type(self, value: list[JsonSchemaType]) -> None: ...
    def get_Pattern(self) -> str: ...
    def set_Pattern(self, value: str) -> None: ...
    def get_MinimumLength(self) -> list[int]: ...
    def set_MinimumLength(self, value: list[int]) -> None: ...
    def get_MaximumLength(self) -> list[int]: ...
    def set_MaximumLength(self, value: list[int]) -> None: ...
    def get_DivisibleBy(self) -> list[float]: ...
    def set_DivisibleBy(self, value: list[float]) -> None: ...
    def get_Minimum(self) -> list[float]: ...
    def set_Minimum(self, value: list[float]) -> None: ...
    def get_Maximum(self) -> list[float]: ...
    def set_Maximum(self, value: list[float]) -> None: ...
    def get_ExclusiveMinimum(self) -> list[bool]: ...
    def set_ExclusiveMinimum(self, value: list[bool]) -> None: ...
    def get_ExclusiveMaximum(self) -> list[bool]: ...
    def set_ExclusiveMaximum(self, value: list[bool]) -> None: ...
    def get_MinimumItems(self) -> list[int]: ...
    def set_MinimumItems(self, value: list[int]) -> None: ...
    def get_MaximumItems(self) -> list[int]: ...
    def set_MaximumItems(self, value: list[int]) -> None: ...
    def get_Items(self) -> list[JsonSchema]: ...
    def set_Items(self, value: list[JsonSchema]) -> None: ...
    def get_PositionalItemsValidation(self) -> bool: ...
    def set_PositionalItemsValidation(self, value: bool) -> None: ...
    @staticmethod
    def get_AdditionalItems() -> JsonSchema: ...
    def set_AdditionalItems(self, value: JsonSchema) -> None: ...
    def get_AllowAdditionalItems(self) -> bool: ...
    def set_AllowAdditionalItems(self, value: bool) -> None: ...
    def get_UniqueItems(self) -> bool: ...
    def set_UniqueItems(self, value: bool) -> None: ...
    def get_Properties(self) -> dict[str, JsonSchema]: ...
    def set_Properties(self, value: dict[str, JsonSchema]) -> None: ...
    @staticmethod
    def get_AdditionalProperties() -> JsonSchema: ...
    def set_AdditionalProperties(self, value: JsonSchema) -> None: ...
    def get_PatternProperties(self) -> dict[str, JsonSchema]: ...
    def set_PatternProperties(self, value: dict[str, JsonSchema]) -> None: ...
    def get_AllowAdditionalProperties(self) -> bool: ...
    def set_AllowAdditionalProperties(self, value: bool) -> None: ...
    def get_Requires(self) -> str: ...
    def set_Requires(self, value: str) -> None: ...
    def get_Enum(self) -> list[Newtonsoft.Json.Linq.JToken]: ...
    def set_Enum(self, value: list[Newtonsoft.Json.Linq.JToken]) -> None: ...
    def get_Disallow(self) -> list[JsonSchemaType]: ...
    def set_Disallow(self, value: list[JsonSchemaType]) -> None: ...
    def get_Default(self) -> Newtonsoft.Json.Linq.JToken: ...
    def set_Default(self, value: Newtonsoft.Json.Linq.JToken) -> None: ...
    def get_Extends(self) -> list[JsonSchema]: ...
    def set_Extends(self, value: list[JsonSchema]) -> None: ...
    def get_Format(self) -> str: ...
    def set_Format(self, value: str) -> None: ...
    @staticmethod
    @typing.overload
    def Read(reader: Newtonsoft.Json.JsonReader) -> JsonSchema: ...
    @staticmethod
    @typing.overload
    def Read(reader: Newtonsoft.Json.JsonReader, resolver: JsonSchemaResolver) -> JsonSchema: ...
    @staticmethod
    @typing.overload
    def Parse(json: str) -> JsonSchema: ...
    @staticmethod
    @typing.overload
    def Parse(json: str, resolver: JsonSchemaResolver) -> JsonSchema: ...
    @typing.overload
    def WriteTo(self, writer: Newtonsoft.Json.JsonWriter) -> None: ...
    @typing.overload
    def WriteTo(self, writer: Newtonsoft.Json.JsonWriter, resolver: JsonSchemaResolver) -> None: ...
    def ToString(self) -> str: ...

class JsonSchemaBuilder:
    def __init__(self, resolver: JsonSchemaResolver) -> None: ...

class JsonSchemaConstants:
    JsonSchemaTypeMapping: dict[str, JsonSchemaType]
    TypePropertyName: str
    PropertiesPropertyName: str
    ItemsPropertyName: str
    AdditionalItemsPropertyName: str
    RequiredPropertyName: str
    PatternPropertiesPropertyName: str
    AdditionalPropertiesPropertyName: str
    RequiresPropertyName: str
    MinimumPropertyName: str
    MaximumPropertyName: str
    ExclusiveMinimumPropertyName: str
    ExclusiveMaximumPropertyName: str
    MinimumItemsPropertyName: str
    MaximumItemsPropertyName: str
    PatternPropertyName: str
    MaximumLengthPropertyName: str
    MinimumLengthPropertyName: str
    EnumPropertyName: str
    ReadOnlyPropertyName: str
    TitlePropertyName: str
    DescriptionPropertyName: str
    FormatPropertyName: str
    DefaultPropertyName: str
    TransientPropertyName: str
    DivisibleByPropertyName: str
    HiddenPropertyName: str
    DisallowPropertyName: str
    ExtendsPropertyName: str
    IdPropertyName: str
    UniqueItemsPropertyName: str
    OptionValuePropertyName: str
    OptionLabelPropertyName: str

class JsonSchemaException(Newtonsoft.Json.JsonException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    LineNumber: int
    LinePosition: int
    Path: str
    def get_LineNumber(self) -> int: ...
    def get_LinePosition(self) -> int: ...
    def get_Path(self) -> str: ...

class JsonSchemaGenerator:
    def __init__(self, ) -> None: ...
    UndefinedSchemaIdHandling: UndefinedSchemaIdHandling
    ContractResolver: Newtonsoft.Json.Serialization.IContractResolver
    def get_UndefinedSchemaIdHandling(self) -> UndefinedSchemaIdHandling: ...
    def set_UndefinedSchemaIdHandling(self, value: UndefinedSchemaIdHandling) -> None: ...
    def get_ContractResolver(self) -> Newtonsoft.Json.Serialization.IContractResolver: ...
    def set_ContractResolver(self, value: Newtonsoft.Json.Serialization.IContractResolver) -> None: ...
    @typing.overload
    def Generate(self, type: System.Type) -> JsonSchema: ...
    @typing.overload
    def Generate(self, type: System.Type, resolver: JsonSchemaResolver) -> JsonSchema: ...
    @typing.overload
    def Generate(self, type: System.Type, rootSchemaNullable: bool) -> JsonSchema: ...
    @typing.overload
    def Generate(self, type: System.Type, resolver: JsonSchemaResolver, rootSchemaNullable: bool) -> JsonSchema: ...

class JsonSchemaModel:
    def __init__(self, ) -> None: ...
    Required: bool
    Type: JsonSchemaType
    MinimumLength: list[int]
    MaximumLength: list[int]
    DivisibleBy: list[float]
    Minimum: list[float]
    Maximum: list[float]
    ExclusiveMinimum: bool
    ExclusiveMaximum: bool
    MinimumItems: list[int]
    MaximumItems: list[int]
    Patterns: list[str]
    Items: list[JsonSchemaModel]
    Properties: dict[str, JsonSchemaModel]
    PatternProperties: dict[str, JsonSchemaModel]
    AdditionalProperties: JsonSchemaModel
    AdditionalItems: JsonSchemaModel
    PositionalItemsValidation: bool
    AllowAdditionalProperties: bool
    AllowAdditionalItems: bool
    UniqueItems: bool
    Enum: list[Newtonsoft.Json.Linq.JToken]
    Disallow: JsonSchemaType
    def get_Required(self) -> bool: ...
    def set_Required(self, value: bool) -> None: ...
    def get_Type(self) -> JsonSchemaType: ...
    def set_Type(self, value: JsonSchemaType) -> None: ...
    def get_MinimumLength(self) -> list[int]: ...
    def set_MinimumLength(self, value: list[int]) -> None: ...
    def get_MaximumLength(self) -> list[int]: ...
    def set_MaximumLength(self, value: list[int]) -> None: ...
    def get_DivisibleBy(self) -> list[float]: ...
    def set_DivisibleBy(self, value: list[float]) -> None: ...
    def get_Minimum(self) -> list[float]: ...
    def set_Minimum(self, value: list[float]) -> None: ...
    def get_Maximum(self) -> list[float]: ...
    def set_Maximum(self, value: list[float]) -> None: ...
    def get_ExclusiveMinimum(self) -> bool: ...
    def set_ExclusiveMinimum(self, value: bool) -> None: ...
    def get_ExclusiveMaximum(self) -> bool: ...
    def set_ExclusiveMaximum(self, value: bool) -> None: ...
    def get_MinimumItems(self) -> list[int]: ...
    def set_MinimumItems(self, value: list[int]) -> None: ...
    def get_MaximumItems(self) -> list[int]: ...
    def set_MaximumItems(self, value: list[int]) -> None: ...
    def get_Patterns(self) -> list[str]: ...
    def set_Patterns(self, value: list[str]) -> None: ...
    def get_Items(self) -> list[JsonSchemaModel]: ...
    def set_Items(self, value: list[JsonSchemaModel]) -> None: ...
    def get_Properties(self) -> dict[str, JsonSchemaModel]: ...
    def set_Properties(self, value: dict[str, JsonSchemaModel]) -> None: ...
    def get_PatternProperties(self) -> dict[str, JsonSchemaModel]: ...
    def set_PatternProperties(self, value: dict[str, JsonSchemaModel]) -> None: ...
    @staticmethod
    def get_AdditionalProperties() -> JsonSchemaModel: ...
    def set_AdditionalProperties(self, value: JsonSchemaModel) -> None: ...
    @staticmethod
    def get_AdditionalItems() -> JsonSchemaModel: ...
    def set_AdditionalItems(self, value: JsonSchemaModel) -> None: ...
    def get_PositionalItemsValidation(self) -> bool: ...
    def set_PositionalItemsValidation(self, value: bool) -> None: ...
    def get_AllowAdditionalProperties(self) -> bool: ...
    def set_AllowAdditionalProperties(self, value: bool) -> None: ...
    def get_AllowAdditionalItems(self) -> bool: ...
    def set_AllowAdditionalItems(self, value: bool) -> None: ...
    def get_UniqueItems(self) -> bool: ...
    def set_UniqueItems(self, value: bool) -> None: ...
    def get_Enum(self) -> list[Newtonsoft.Json.Linq.JToken]: ...
    def set_Enum(self, value: list[Newtonsoft.Json.Linq.JToken]) -> None: ...
    def get_Disallow(self) -> JsonSchemaType: ...
    def set_Disallow(self, value: JsonSchemaType) -> None: ...
    @staticmethod
    def Create(schemata: list[JsonSchema]) -> JsonSchemaModel: ...

class JsonSchemaModelBuilder:
    def __init__(self, ) -> None: ...
    def Build(self, schema: JsonSchema) -> JsonSchemaModel: ...
    def AddSchema(self, existingNode: JsonSchemaNode, schema: JsonSchema) -> JsonSchemaNode: ...
    def AddProperties(self, source: dict[str, JsonSchema], target: dict[str, JsonSchemaNode]) -> None: ...
    def AddProperty(self, target: dict[str, JsonSchemaNode], propertyName: str, schema: JsonSchema) -> None: ...
    def AddItem(self, parentNode: JsonSchemaNode, index: int, schema: JsonSchema) -> None: ...
    def AddAdditionalProperties(self, parentNode: JsonSchemaNode, schema: JsonSchema) -> None: ...
    def AddAdditionalItems(self, parentNode: JsonSchemaNode, schema: JsonSchema) -> None: ...

class JsonSchemaNode:
    def __init__(self, schema: JsonSchema) -> None: ...
    Id: str
    Schemas: list[JsonSchema]
    Properties: dict[str, JsonSchemaNode]
    PatternProperties: dict[str, JsonSchemaNode]
    Items: list[JsonSchemaNode]
    AdditionalProperties: JsonSchemaNode
    AdditionalItems: JsonSchemaNode
    def get_Id(self) -> str: ...
    def get_Schemas(self) -> list[JsonSchema]: ...
    def get_Properties(self) -> dict[str, JsonSchemaNode]: ...
    def get_PatternProperties(self) -> dict[str, JsonSchemaNode]: ...
    def get_Items(self) -> list[JsonSchemaNode]: ...
    @staticmethod
    def get_AdditionalProperties() -> JsonSchemaNode: ...
    def set_AdditionalProperties(self, value: JsonSchemaNode) -> None: ...
    @staticmethod
    def get_AdditionalItems() -> JsonSchemaNode: ...
    def set_AdditionalItems(self, value: JsonSchemaNode) -> None: ...
    @staticmethod
    def Combine(schema: JsonSchema) -> JsonSchemaNode: ...
    @staticmethod
    def GetId(schemata: list[JsonSchema]) -> str: ...

class JsonSchemaNodeCollection(dict[str, JsonSchemaNode]):
    def __init__(self, ) -> None: ...

class JsonSchemaResolver:
    def __init__(self, ) -> None: ...
    LoadedSchemas: list[JsonSchema]
    def get_LoadedSchemas(self) -> list[JsonSchema]: ...
    def GetSchema(self, reference: str) -> JsonSchema: ...

class JsonSchemaType(System.Enum, int):
    None: JsonSchemaType = ...
    String: JsonSchemaType = ...
    Float: JsonSchemaType = ...
    Integer: JsonSchemaType = ...
    Boolean: JsonSchemaType = ...
    Object: JsonSchemaType = ...
    Array: JsonSchemaType = ...
    Null: JsonSchemaType = ...
    Any: JsonSchemaType = ...

class JsonSchemaWriter:
    def __init__(self, writer: Newtonsoft.Json.JsonWriter, resolver: JsonSchemaResolver) -> None: ...
    def WriteSchema(self, schema: JsonSchema) -> None: ...

class UndefinedSchemaIdHandling(System.Enum, int):
    None: UndefinedSchemaIdHandling = ...
    UseTypeName: UndefinedSchemaIdHandling = ...
    UseAssemblyQualifiedName: UndefinedSchemaIdHandling = ...

class ValidationEventArgs(System.EventArgs):
    Exception: JsonSchemaException
    Path: str
    Message: str
    def get_Exception(self) -> JsonSchemaException: ...
    def get_Path(self) -> str: ...
    def get_Message(self) -> str: ...

class ValidationEventHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: ValidationEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: ValidationEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class <>c__DisplayClass0_0:
    def __init__(self, ) -> None: ...
    valid: bool

class <>c__DisplayClass1_0:
    def __init__(self, ) -> None: ...
    errors: list[str]

class <>c__DisplayClass23_0:
    def __init__(self, ) -> None: ...
    type: JsonSchemaType

class TypeSchema:
    def __init__(self, type: System.Type, schema: JsonSchema) -> None: ...
    Type: System.Type
    Schema: JsonSchema
    def get_Type(self) -> System.Type: ...
    def get_Schema(self) -> JsonSchema: ...

class <>c__DisplayClass23_0:
    def __init__(self, ) -> None: ...
    type: System.Type

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__26_0: dict[JsonSchema, str]
    <>9__26_1: dict[str, str]

class <>c__DisplayClass5_0:
    def __init__(self, ) -> None: ...
    reference: str

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__7_0: dict[JsonSchemaType, bool]

