import Newtonsoft.Json.Linq
import System
import System.Collections.Generic
import typing

class ArrayIndexFilter(PathFilter):
    def __init__(self, ) -> None: ...
    Index: list[int]
    def get_Index(self) -> list[int]: ...
    def set_Index(self, value: list[int]) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class ArrayMultipleIndexFilter(PathFilter):
    def __init__(self, indexes: list[int]) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class ArraySliceFilter(PathFilter):
    def __init__(self, ) -> None: ...
    Start: list[int]
    End: list[int]
    Step: list[int]
    def get_Start(self) -> list[int]: ...
    def set_Start(self, value: list[int]) -> None: ...
    def get_End(self) -> list[int]: ...
    def set_End(self, value: list[int]) -> None: ...
    def get_Step(self) -> list[int]: ...
    def set_Step(self, value: list[int]) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class FieldFilter(PathFilter):
    def __init__(self, name: str) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class FieldMultipleFilter(PathFilter):
    def __init__(self, names: list[str]) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class JPath:
    def __init__(self, expression: str) -> None: ...
    Filters: list[PathFilter]
    def get_Filters(self) -> list[PathFilter]: ...

class PathFilter:
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class QueryOperator(System.Enum, int):
    None: QueryOperator = ...
    Equals: QueryOperator = ...
    NotEquals: QueryOperator = ...
    Exists: QueryOperator = ...
    LessThan: QueryOperator = ...
    LessThanOrEquals: QueryOperator = ...
    GreaterThan: QueryOperator = ...
    GreaterThanOrEquals: QueryOperator = ...
    And: QueryOperator = ...
    Or: QueryOperator = ...
    RegexEquals: QueryOperator = ...
    StrictEquals: QueryOperator = ...
    StrictNotEquals: QueryOperator = ...

class QueryExpression:
    def __init__(self, operator: QueryOperator) -> None: ...
    @typing.overload
    def IsMatch(self, root: Newtonsoft.Json.Linq.JToken, t: Newtonsoft.Json.Linq.JToken) -> bool: ...
    @typing.overload
    def IsMatch(self, root: Newtonsoft.Json.Linq.JToken, t: Newtonsoft.Json.Linq.JToken, settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> bool: ...

class CompositeExpression(QueryExpression):
    def __init__(self, operator: QueryOperator) -> None: ...
    Expressions: list[QueryExpression]
    def get_Expressions(self) -> list[QueryExpression]: ...
    def set_Expressions(self, value: list[QueryExpression]) -> None: ...
    def IsMatch(self, root: Newtonsoft.Json.Linq.JToken, t: Newtonsoft.Json.Linq.JToken, settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> bool: ...

class BooleanQueryExpression(QueryExpression):
    def __init__(self, operator: QueryOperator, left: typing.Any, right: typing.Any) -> None: ...
    Left: typing.Any
    Right: typing.Any
    def IsMatch(self, root: Newtonsoft.Json.Linq.JToken, t: Newtonsoft.Json.Linq.JToken, settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> bool: ...

class QueryFilter(PathFilter):
    def __init__(self, expression: QueryExpression) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class QueryScanFilter(PathFilter):
    def __init__(self, expression: QueryExpression) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class RootFilter(PathFilter):
    Instance: RootFilter
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class ScanFilter(PathFilter):
    def __init__(self, name: str) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class ScanMultipleFilter(PathFilter):
    def __init__(self, names: list[str]) -> None: ...
    def ExecuteFilter(self, root: Newtonsoft.Json.Linq.JToken, current: list[Newtonsoft.Json.Linq.JToken], settings: Newtonsoft.Json.Linq.JsonSelectSettings) -> list[Newtonsoft.Json.Linq.JToken]: ...

class <ExecuteFilter>d__4:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: ArrayIndexFilter
    <>3__settings: Newtonsoft.Json.Linq.JsonSelectSettings

class <ExecuteFilter>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: ArrayMultipleIndexFilter
    <>3__settings: Newtonsoft.Json.Linq.JsonSelectSettings

class <ExecuteFilter>d__12:
    def __init__(self, <>1__state: int) -> None: ...
    <>4__this: ArraySliceFilter
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>3__settings: Newtonsoft.Json.Linq.JsonSelectSettings

class <ExecuteFilter>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: FieldFilter
    <>3__settings: Newtonsoft.Json.Linq.JsonSelectSettings

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__2_0: dict[str, str]

class <ExecuteFilter>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: FieldMultipleFilter
    <>3__settings: Newtonsoft.Json.Linq.JsonSelectSettings

class <ExecuteFilter>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: QueryFilter
    <>3__root: Newtonsoft.Json.Linq.JToken
    <>3__settings: Newtonsoft.Json.Linq.JsonSelectSettings

class <ExecuteFilter>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: QueryScanFilter
    <>3__root: Newtonsoft.Json.Linq.JToken
    <>3__settings: Newtonsoft.Json.Linq.JsonSelectSettings

class <ExecuteFilter>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: ScanFilter

class <ExecuteFilter>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>3__current: list[Newtonsoft.Json.Linq.JToken]
    <>4__this: ScanMultipleFilter

