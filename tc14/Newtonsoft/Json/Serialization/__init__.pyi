import Newtonsoft.Json
import Newtonsoft.Json.Utilities
import System
import System.Collections
import System.Collections.Generic
import System.Collections.ObjectModel
import System.ComponentModel
import System.Diagnostics
import System.Globalization
import System.Reflection
import System.Runtime.Serialization
import System.Runtime.Serialization.Formatters
import typing

T = typing.TypeVar('T')

class CachedAttributeGetter[T]:
    @staticmethod
    def GetAttribute(type: typing.Any) -> T: ...

class CamelCaseNamingStrategy(NamingStrategy):
    @typing.overload
    def __init__(self, processDictionaryKeys: bool, overrideSpecifiedNames: bool) -> None: ...
    @typing.overload
    def __init__(self, processDictionaryKeys: bool, overrideSpecifiedNames: bool, processExtensionDataNames: bool) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...

class CamelCasePropertyNamesContractResolver(DefaultContractResolver):
    def __init__(self, ) -> None: ...
    def ResolveContract(self, type: System.Type) -> JsonContract: ...

class DefaultContractResolver:
    def __init__(self, ) -> None: ...
    DynamicCodeGeneration: bool
    DefaultMembersSearchFlags: System.Reflection.BindingFlags
    SerializeCompilerGeneratedMembers: bool
    IgnoreSerializableInterface: bool
    IgnoreSerializableAttribute: bool
    IgnoreIsSpecifiedMembers: bool
    IgnoreShouldSerializeMembers: bool
    NamingStrategy: NamingStrategy
    def get_DynamicCodeGeneration(self) -> bool: ...
    def get_DefaultMembersSearchFlags(self) -> System.Reflection.BindingFlags: ...
    def set_DefaultMembersSearchFlags(self, value: System.Reflection.BindingFlags) -> None: ...
    def get_SerializeCompilerGeneratedMembers(self) -> bool: ...
    def set_SerializeCompilerGeneratedMembers(self, value: bool) -> None: ...
    def get_IgnoreSerializableInterface(self) -> bool: ...
    def set_IgnoreSerializableInterface(self, value: bool) -> None: ...
    def get_IgnoreSerializableAttribute(self) -> bool: ...
    def set_IgnoreSerializableAttribute(self, value: bool) -> None: ...
    def get_IgnoreIsSpecifiedMembers(self) -> bool: ...
    def set_IgnoreIsSpecifiedMembers(self, value: bool) -> None: ...
    def get_IgnoreShouldSerializeMembers(self) -> bool: ...
    def set_IgnoreShouldSerializeMembers(self, value: bool) -> None: ...
    def get_NamingStrategy(self) -> NamingStrategy: ...
    def set_NamingStrategy(self, value: NamingStrategy) -> None: ...
    def ResolveContract(self, type: System.Type) -> JsonContract: ...
    def GetResolvedPropertyName(self, propertyName: str) -> str: ...

class DefaultNamingStrategy(NamingStrategy):
    def __init__(self, ) -> None: ...

class DefaultReferenceResolver:
    def __init__(self, ) -> None: ...
    def ResolveReference(self, context: typing.Any, reference: str) -> typing.Any: ...
    def GetReference(self, context: typing.Any, value: typing.Any) -> str: ...
    def AddReference(self, context: typing.Any, reference: str, value: typing.Any) -> None: ...
    def IsReferenced(self, context: typing.Any, value: typing.Any) -> bool: ...

class DefaultSerializationBinder(System.Runtime.Serialization.SerializationBinder):
    def __init__(self, ) -> None: ...
    def BindToType(self, assemblyName: str, typeName: str) -> System.Type: ...
    def BindToName(self, serializedType: System.Type, assemblyName: System.String&, typeName: System.String&) -> None: ...

class DiagnosticsTraceWriter:
    def __init__(self, ) -> None: ...
    LevelFilter: System.Diagnostics.TraceLevel
    def get_LevelFilter(self) -> System.Diagnostics.TraceLevel: ...
    def set_LevelFilter(self, value: System.Diagnostics.TraceLevel) -> None: ...
    def Trace(self, level: System.Diagnostics.TraceLevel, message: str, ex: System.Exception) -> None: ...

class DynamicValueProvider:
    def __init__(self, memberInfo: System.Reflection.MemberInfo) -> None: ...
    def SetValue(self, target: typing.Any, value: typing.Any) -> None: ...
    def GetValue(self, target: typing.Any) -> typing.Any: ...

class ErrorContext:
    Error: System.Exception
    OriginalObject: typing.Any
    Member: typing.Any
    Path: str
    Handled: bool
    def get_Error(self) -> System.Exception: ...
    def get_OriginalObject(self) -> typing.Any: ...
    def get_Member(self) -> typing.Any: ...
    def get_Path(self) -> str: ...
    def get_Handled(self) -> bool: ...
    def set_Handled(self, value: bool) -> None: ...

class ErrorEventArgs(System.EventArgs):
    def __init__(self, currentObject: typing.Any, errorContext: ErrorContext) -> None: ...
    CurrentObject: typing.Any
    ErrorContext: ErrorContext
    def get_CurrentObject(self) -> typing.Any: ...
    def get_ErrorContext(self) -> ErrorContext: ...

class ExpressionValueProvider:
    def __init__(self, memberInfo: System.Reflection.MemberInfo) -> None: ...
    def SetValue(self, target: typing.Any, value: typing.Any) -> None: ...
    def GetValue(self, target: typing.Any) -> typing.Any: ...

class IAttributeProvider:
    def __init__(self , *args: typing.Any) -> None: ...
    @typing.overload
    def GetAttributes(self, inherit: bool) -> list[System.Attribute]: ...
    @typing.overload
    def GetAttributes(self, attributeType: System.Type, inherit: bool) -> list[System.Attribute]: ...

class IContractResolver:
    def __init__(self , *args: typing.Any) -> None: ...
    def ResolveContract(self, type: System.Type) -> JsonContract: ...

class IReferenceResolver:
    def __init__(self , *args: typing.Any) -> None: ...
    def ResolveReference(self, context: typing.Any, reference: str) -> typing.Any: ...
    def GetReference(self, context: typing.Any, value: typing.Any) -> str: ...
    def IsReferenced(self, context: typing.Any, value: typing.Any) -> bool: ...
    def AddReference(self, context: typing.Any, reference: str, value: typing.Any) -> None: ...

class ISerializationBinder:
    def __init__(self , *args: typing.Any) -> None: ...
    def BindToType(self, assemblyName: str, typeName: str) -> System.Type: ...
    def BindToName(self, serializedType: System.Type, assemblyName: System.String&, typeName: System.String&) -> None: ...

class ITraceWriter:
    def __init__(self , *args: typing.Any) -> None: ...
    LevelFilter: System.Diagnostics.TraceLevel
    def get_LevelFilter(self) -> System.Diagnostics.TraceLevel: ...
    def Trace(self, level: System.Diagnostics.TraceLevel, message: str, ex: System.Exception) -> None: ...

class IValueProvider:
    def __init__(self , *args: typing.Any) -> None: ...
    def SetValue(self, target: typing.Any, value: typing.Any) -> None: ...
    def GetValue(self, target: typing.Any) -> typing.Any: ...

class JsonArrayContract(JsonContainerContract):
    def __init__(self, underlyingType: System.Type) -> None: ...
    CollectionItemType: System.Type
    IsMultidimensionalArray: bool
    OverrideCreator: list[typing.Any]
    HasParameterizedCreator: bool
    def get_CollectionItemType(self) -> System.Type: ...
    def get_IsMultidimensionalArray(self) -> bool: ...
    def get_OverrideCreator(self) -> list[typing.Any]: ...
    def set_OverrideCreator(self, value: list[typing.Any]) -> None: ...
    def get_HasParameterizedCreator(self) -> bool: ...
    def set_HasParameterizedCreator(self, value: bool) -> None: ...

class JsonContainerContract(JsonContract):
    ItemConverter: Newtonsoft.Json.JsonConverter
    ItemIsReference: list[bool]
    ItemReferenceLoopHandling: list[Newtonsoft.Json.ReferenceLoopHandling]
    ItemTypeNameHandling: list[Newtonsoft.Json.TypeNameHandling]
    def get_ItemConverter(self) -> Newtonsoft.Json.JsonConverter: ...
    def set_ItemConverter(self, value: Newtonsoft.Json.JsonConverter) -> None: ...
    def get_ItemIsReference(self) -> list[bool]: ...
    def set_ItemIsReference(self, value: list[bool]) -> None: ...
    def get_ItemReferenceLoopHandling(self) -> list[Newtonsoft.Json.ReferenceLoopHandling]: ...
    def set_ItemReferenceLoopHandling(self, value: list[Newtonsoft.Json.ReferenceLoopHandling]) -> None: ...
    def get_ItemTypeNameHandling(self) -> list[Newtonsoft.Json.TypeNameHandling]: ...
    def set_ItemTypeNameHandling(self, value: list[Newtonsoft.Json.TypeNameHandling]) -> None: ...

class JsonContractType(System.Enum, int):
    None: JsonContractType = ...
    Object: JsonContractType = ...
    Array: JsonContractType = ...
    Primitive: JsonContractType = ...
    String: JsonContractType = ...
    Dictionary: JsonContractType = ...
    Dynamic: JsonContractType = ...
    Serializable: JsonContractType = ...
    Linq: JsonContractType = ...

class SerializationCallback(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, o: typing.Any, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def BeginInvoke(self, o: typing.Any, context: System.Runtime.Serialization.StreamingContext, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SerializationErrorCallback(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, o: typing.Any, context: System.Runtime.Serialization.StreamingContext, errorContext: ErrorContext) -> None: ...
    def BeginInvoke(self, o: typing.Any, context: System.Runtime.Serialization.StreamingContext, errorContext: ErrorContext, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ExtensionDataSetter(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, o: typing.Any, key: str, value: typing.Any) -> None: ...
    def BeginInvoke(self, o: typing.Any, key: str, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ExtensionDataGetter(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, o: typing.Any) -> list[dict[typing.Any, typing.Any]]: ...
    def BeginInvoke(self, o: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> list[dict[typing.Any, typing.Any]]: ...

class JsonContract:
    UnderlyingType: System.Type
    CreatedType: System.Type
    IsReference: list[bool]
    Converter: Newtonsoft.Json.JsonConverter
    InternalConverter: Newtonsoft.Json.JsonConverter
    OnDeserializedCallbacks: list[SerializationCallback]
    OnDeserializingCallbacks: list[SerializationCallback]
    OnSerializedCallbacks: list[SerializationCallback]
    OnSerializingCallbacks: list[SerializationCallback]
    OnErrorCallbacks: list[SerializationErrorCallback]
    DefaultCreator: list[typing.Any]
    DefaultCreatorNonPublic: bool
    def get_UnderlyingType(self) -> System.Type: ...
    def get_CreatedType(self) -> System.Type: ...
    def set_CreatedType(self, value: System.Type) -> None: ...
    def get_IsReference(self) -> list[bool]: ...
    def set_IsReference(self, value: list[bool]) -> None: ...
    def get_Converter(self) -> Newtonsoft.Json.JsonConverter: ...
    def set_Converter(self, value: Newtonsoft.Json.JsonConverter) -> None: ...
    def get_InternalConverter(self) -> Newtonsoft.Json.JsonConverter: ...
    def get_OnDeserializedCallbacks(self) -> list[SerializationCallback]: ...
    def get_OnDeserializingCallbacks(self) -> list[SerializationCallback]: ...
    def get_OnSerializedCallbacks(self) -> list[SerializationCallback]: ...
    def get_OnSerializingCallbacks(self) -> list[SerializationCallback]: ...
    def get_OnErrorCallbacks(self) -> list[SerializationErrorCallback]: ...
    def get_DefaultCreator(self) -> list[typing.Any]: ...
    def set_DefaultCreator(self, value: list[typing.Any]) -> None: ...
    def get_DefaultCreatorNonPublic(self) -> bool: ...
    def set_DefaultCreatorNonPublic(self, value: bool) -> None: ...

class JsonDictionaryContract(JsonContainerContract):
    def __init__(self, underlyingType: System.Type) -> None: ...
    DictionaryKeyResolver: dict[str, str]
    DictionaryKeyType: System.Type
    DictionaryValueType: System.Type
    OverrideCreator: list[typing.Any]
    HasParameterizedCreator: bool
    def get_DictionaryKeyResolver(self) -> dict[str, str]: ...
    def set_DictionaryKeyResolver(self, value: dict[str, str]) -> None: ...
    def get_DictionaryKeyType(self) -> System.Type: ...
    def get_DictionaryValueType(self) -> System.Type: ...
    def get_OverrideCreator(self) -> list[typing.Any]: ...
    def set_OverrideCreator(self, value: list[typing.Any]) -> None: ...
    def get_HasParameterizedCreator(self) -> bool: ...
    def set_HasParameterizedCreator(self, value: bool) -> None: ...

class JsonDynamicContract(JsonContainerContract):
    def __init__(self, underlyingType: System.Type) -> None: ...
    Properties: JsonPropertyCollection
    PropertyNameResolver: dict[str, str]
    def get_Properties(self) -> JsonPropertyCollection: ...
    def get_PropertyNameResolver(self) -> dict[str, str]: ...
    def set_PropertyNameResolver(self, value: dict[str, str]) -> None: ...

class JsonFormatterConverter:
    def __init__(self, reader: JsonSerializerInternalReader, contract: JsonISerializableContract, member: JsonProperty) -> None: ...
    @typing.overload
    def Convert(self, value: typing.Any, type: System.Type) -> typing.Any: ...
    @typing.overload
    def Convert(self, value: typing.Any, typeCode: System.TypeCode) -> typing.Any: ...
    def ToBoolean(self, value: typing.Any) -> bool: ...
    def ToByte(self, value: typing.Any) -> System.Byte: ...
    def ToChar(self, value: typing.Any) -> System.Char: ...
    def ToDateTime(self, value: typing.Any) -> System.DateTime: ...
    def ToDecimal(self, value: typing.Any) -> System.Decimal: ...
    def ToDouble(self, value: typing.Any) -> float: ...
    def ToInt16(self, value: typing.Any) -> int: ...
    def ToInt32(self, value: typing.Any) -> int: ...
    def ToInt64(self, value: typing.Any) -> int: ...
    def ToSByte(self, value: typing.Any) -> System.SByte: ...
    def ToSingle(self, value: typing.Any) -> float: ...
    def ToString(self, value: typing.Any) -> str: ...
    def ToUInt16(self, value: typing.Any) -> System.UInt16: ...
    def ToUInt32(self, value: typing.Any) -> System.UInt32: ...
    def ToUInt64(self, value: typing.Any) -> System.UInt64: ...

class JsonISerializableContract(JsonContainerContract):
    def __init__(self, underlyingType: System.Type) -> None: ...
    ISerializableCreator: list[typing.Any]
    def get_ISerializableCreator(self) -> list[typing.Any]: ...
    def set_ISerializableCreator(self, value: list[typing.Any]) -> None: ...

class JsonLinqContract(JsonContract):
    def __init__(self, underlyingType: System.Type) -> None: ...

class JsonObjectContract(JsonContainerContract):
    def __init__(self, underlyingType: System.Type) -> None: ...
    MemberSerialization: Newtonsoft.Json.MemberSerialization
    MissingMemberHandling: list[Newtonsoft.Json.MissingMemberHandling]
    ItemRequired: list[Newtonsoft.Json.Required]
    ItemNullValueHandling: list[Newtonsoft.Json.NullValueHandling]
    Properties: JsonPropertyCollection
    CreatorParameters: JsonPropertyCollection
    OverrideCreator: list[typing.Any]
    ExtensionDataSetter: ExtensionDataSetter
    ExtensionDataGetter: ExtensionDataGetter
    ExtensionDataValueType: System.Type
    ExtensionDataNameResolver: dict[str, str]
    def get_MemberSerialization(self) -> Newtonsoft.Json.MemberSerialization: ...
    def set_MemberSerialization(self, value: Newtonsoft.Json.MemberSerialization) -> None: ...
    def get_MissingMemberHandling(self) -> list[Newtonsoft.Json.MissingMemberHandling]: ...
    def set_MissingMemberHandling(self, value: list[Newtonsoft.Json.MissingMemberHandling]) -> None: ...
    def get_ItemRequired(self) -> list[Newtonsoft.Json.Required]: ...
    def set_ItemRequired(self, value: list[Newtonsoft.Json.Required]) -> None: ...
    def get_ItemNullValueHandling(self) -> list[Newtonsoft.Json.NullValueHandling]: ...
    def set_ItemNullValueHandling(self, value: list[Newtonsoft.Json.NullValueHandling]) -> None: ...
    def get_Properties(self) -> JsonPropertyCollection: ...
    def get_CreatorParameters(self) -> JsonPropertyCollection: ...
    def get_OverrideCreator(self) -> list[typing.Any]: ...
    def set_OverrideCreator(self, value: list[typing.Any]) -> None: ...
    def get_ExtensionDataSetter(self) -> ExtensionDataSetter: ...
    def set_ExtensionDataSetter(self, value: ExtensionDataSetter) -> None: ...
    def get_ExtensionDataGetter(self) -> ExtensionDataGetter: ...
    def set_ExtensionDataGetter(self, value: ExtensionDataGetter) -> None: ...
    def get_ExtensionDataValueType(self) -> System.Type: ...
    def set_ExtensionDataValueType(self, value: System.Type) -> None: ...
    def get_ExtensionDataNameResolver(self) -> dict[str, str]: ...
    def set_ExtensionDataNameResolver(self, value: dict[str, str]) -> None: ...

class JsonPrimitiveContract(JsonContract):
    def __init__(self, underlyingType: System.Type) -> None: ...

class JsonProperty:
    def __init__(self, ) -> None: ...
    PropertyName: str
    DeclaringType: System.Type
    Order: list[int]
    UnderlyingName: str
    ValueProvider: IValueProvider
    AttributeProvider: IAttributeProvider
    PropertyType: System.Type
    Converter: Newtonsoft.Json.JsonConverter
    MemberConverter: Newtonsoft.Json.JsonConverter
    Ignored: bool
    Readable: bool
    Writable: bool
    HasMemberAttribute: bool
    DefaultValue: typing.Any
    Required: Newtonsoft.Json.Required
    IsRequiredSpecified: bool
    IsReference: list[bool]
    NullValueHandling: list[Newtonsoft.Json.NullValueHandling]
    DefaultValueHandling: list[Newtonsoft.Json.DefaultValueHandling]
    ReferenceLoopHandling: list[Newtonsoft.Json.ReferenceLoopHandling]
    ObjectCreationHandling: list[Newtonsoft.Json.ObjectCreationHandling]
    TypeNameHandling: list[Newtonsoft.Json.TypeNameHandling]
    ShouldSerialize: list[typing.Any]
    ShouldDeserialize: list[typing.Any]
    GetIsSpecified: list[typing.Any]
    SetIsSpecified: dict[typing.Any, typing.Any]
    ItemConverter: Newtonsoft.Json.JsonConverter
    ItemIsReference: list[bool]
    ItemTypeNameHandling: list[Newtonsoft.Json.TypeNameHandling]
    ItemReferenceLoopHandling: list[Newtonsoft.Json.ReferenceLoopHandling]
    def get_PropertyName(self) -> str: ...
    def set_PropertyName(self, value: str) -> None: ...
    def get_DeclaringType(self) -> System.Type: ...
    def set_DeclaringType(self, value: System.Type) -> None: ...
    def get_Order(self) -> list[int]: ...
    def set_Order(self, value: list[int]) -> None: ...
    def get_UnderlyingName(self) -> str: ...
    def set_UnderlyingName(self, value: str) -> None: ...
    def get_ValueProvider(self) -> IValueProvider: ...
    def set_ValueProvider(self, value: IValueProvider) -> None: ...
    def get_AttributeProvider(self) -> IAttributeProvider: ...
    def set_AttributeProvider(self, value: IAttributeProvider) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_Converter(self) -> Newtonsoft.Json.JsonConverter: ...
    def set_Converter(self, value: Newtonsoft.Json.JsonConverter) -> None: ...
    def get_MemberConverter(self) -> Newtonsoft.Json.JsonConverter: ...
    def set_MemberConverter(self, value: Newtonsoft.Json.JsonConverter) -> None: ...
    def get_Ignored(self) -> bool: ...
    def set_Ignored(self, value: bool) -> None: ...
    def get_Readable(self) -> bool: ...
    def set_Readable(self, value: bool) -> None: ...
    def get_Writable(self) -> bool: ...
    def set_Writable(self, value: bool) -> None: ...
    def get_HasMemberAttribute(self) -> bool: ...
    def set_HasMemberAttribute(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Required(self) -> Newtonsoft.Json.Required: ...
    def set_Required(self, value: Newtonsoft.Json.Required) -> None: ...
    def get_IsRequiredSpecified(self) -> bool: ...
    def get_IsReference(self) -> list[bool]: ...
    def set_IsReference(self, value: list[bool]) -> None: ...
    def get_NullValueHandling(self) -> list[Newtonsoft.Json.NullValueHandling]: ...
    def set_NullValueHandling(self, value: list[Newtonsoft.Json.NullValueHandling]) -> None: ...
    def get_DefaultValueHandling(self) -> list[Newtonsoft.Json.DefaultValueHandling]: ...
    def set_DefaultValueHandling(self, value: list[Newtonsoft.Json.DefaultValueHandling]) -> None: ...
    def get_ReferenceLoopHandling(self) -> list[Newtonsoft.Json.ReferenceLoopHandling]: ...
    def set_ReferenceLoopHandling(self, value: list[Newtonsoft.Json.ReferenceLoopHandling]) -> None: ...
    def get_ObjectCreationHandling(self) -> list[Newtonsoft.Json.ObjectCreationHandling]: ...
    def set_ObjectCreationHandling(self, value: list[Newtonsoft.Json.ObjectCreationHandling]) -> None: ...
    def get_TypeNameHandling(self) -> list[Newtonsoft.Json.TypeNameHandling]: ...
    def set_TypeNameHandling(self, value: list[Newtonsoft.Json.TypeNameHandling]) -> None: ...
    def get_ShouldSerialize(self) -> list[typing.Any]: ...
    def set_ShouldSerialize(self, value: list[typing.Any]) -> None: ...
    def get_ShouldDeserialize(self) -> list[typing.Any]: ...
    def set_ShouldDeserialize(self, value: list[typing.Any]) -> None: ...
    def get_GetIsSpecified(self) -> list[typing.Any]: ...
    def set_GetIsSpecified(self, value: list[typing.Any]) -> None: ...
    def get_SetIsSpecified(self) -> dict[typing.Any, typing.Any]: ...
    def set_SetIsSpecified(self, value: dict[typing.Any, typing.Any]) -> None: ...
    def ToString(self) -> str: ...
    def get_ItemConverter(self) -> Newtonsoft.Json.JsonConverter: ...
    def set_ItemConverter(self, value: Newtonsoft.Json.JsonConverter) -> None: ...
    def get_ItemIsReference(self) -> list[bool]: ...
    def set_ItemIsReference(self, value: list[bool]) -> None: ...
    def get_ItemTypeNameHandling(self) -> list[Newtonsoft.Json.TypeNameHandling]: ...
    def set_ItemTypeNameHandling(self, value: list[Newtonsoft.Json.TypeNameHandling]) -> None: ...
    def get_ItemReferenceLoopHandling(self) -> list[Newtonsoft.Json.ReferenceLoopHandling]: ...
    def set_ItemReferenceLoopHandling(self, value: list[Newtonsoft.Json.ReferenceLoopHandling]) -> None: ...

class JsonPropertyCollection(dict[str, JsonProperty]):
    def __init__(self, type: System.Type) -> None: ...
    def AddProperty(self, property: JsonProperty) -> None: ...
    def GetClosestMatchProperty(self, propertyName: str) -> JsonProperty: ...
    def GetProperty(self, propertyName: str, comparisonType: System.StringComparison) -> JsonProperty: ...

class JsonSerializerInternalBase:
    pass

class JsonSerializerInternalReader(JsonSerializerInternalBase):
    def __init__(self, serializer: Newtonsoft.Json.JsonSerializer) -> None: ...
    def Populate(self, reader: Newtonsoft.Json.JsonReader, target: typing.Any) -> None: ...
    def Deserialize(self, reader: Newtonsoft.Json.JsonReader, objectType: System.Type, checkAdditionalContent: bool) -> typing.Any: ...
    def CreateNewObject(self, reader: Newtonsoft.Json.JsonReader, objectContract: JsonObjectContract, containerMember: JsonProperty, containerProperty: JsonProperty, id: str, createdFromNonDefaultCreator: bool) -> typing.Any: ...

class JsonSerializerInternalWriter(JsonSerializerInternalBase):
    def __init__(self, serializer: Newtonsoft.Json.JsonSerializer) -> None: ...
    def Serialize(self, jsonWriter: Newtonsoft.Json.JsonWriter, value: typing.Any, objectType: System.Type) -> None: ...

class JsonSerializerProxy(Newtonsoft.Json.JsonSerializer):
    @typing.overload
    def __init__(self, serializerReader: JsonSerializerInternalReader) -> None: ...
    @typing.overload
    def __init__(self, serializerWriter: JsonSerializerInternalWriter) -> None: ...
    ReferenceResolver: IReferenceResolver
    TraceWriter: ITraceWriter
    EqualityComparer: System.Collections.IEqualityComparer
    Converters: Newtonsoft.Json.JsonConverterCollection
    DefaultValueHandling: Newtonsoft.Json.DefaultValueHandling
    ContractResolver: IContractResolver
    MissingMemberHandling: Newtonsoft.Json.MissingMemberHandling
    NullValueHandling: Newtonsoft.Json.NullValueHandling
    ObjectCreationHandling: Newtonsoft.Json.ObjectCreationHandling
    ReferenceLoopHandling: Newtonsoft.Json.ReferenceLoopHandling
    PreserveReferencesHandling: Newtonsoft.Json.PreserveReferencesHandling
    TypeNameHandling: Newtonsoft.Json.TypeNameHandling
    MetadataPropertyHandling: Newtonsoft.Json.MetadataPropertyHandling
    TypeNameAssemblyFormat: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
    TypeNameAssemblyFormatHandling: Newtonsoft.Json.TypeNameAssemblyFormatHandling
    ConstructorHandling: Newtonsoft.Json.ConstructorHandling
    Binder: System.Runtime.Serialization.SerializationBinder
    SerializationBinder: ISerializationBinder
    Context: System.Runtime.Serialization.StreamingContext
    Formatting: Newtonsoft.Json.Formatting
    DateFormatHandling: Newtonsoft.Json.DateFormatHandling
    DateTimeZoneHandling: Newtonsoft.Json.DateTimeZoneHandling
    DateParseHandling: Newtonsoft.Json.DateParseHandling
    FloatFormatHandling: Newtonsoft.Json.FloatFormatHandling
    FloatParseHandling: Newtonsoft.Json.FloatParseHandling
    StringEscapeHandling: Newtonsoft.Json.StringEscapeHandling
    DateFormatString: str
    Culture: System.Globalization.CultureInfo
    MaxDepth: list[int]
    CheckAdditionalContent: bool
    def add_Error(self, value: list[ErrorEventArgs]) -> None: ...
    def remove_Error(self, value: list[ErrorEventArgs]) -> None: ...
    def get_ReferenceResolver(self) -> IReferenceResolver: ...
    def set_ReferenceResolver(self, value: IReferenceResolver) -> None: ...
    def get_TraceWriter(self) -> ITraceWriter: ...
    def set_TraceWriter(self, value: ITraceWriter) -> None: ...
    def get_EqualityComparer(self) -> System.Collections.IEqualityComparer: ...
    def set_EqualityComparer(self, value: System.Collections.IEqualityComparer) -> None: ...
    def get_Converters(self) -> Newtonsoft.Json.JsonConverterCollection: ...
    def get_DefaultValueHandling(self) -> Newtonsoft.Json.DefaultValueHandling: ...
    def set_DefaultValueHandling(self, value: Newtonsoft.Json.DefaultValueHandling) -> None: ...
    def get_ContractResolver(self) -> IContractResolver: ...
    def set_ContractResolver(self, value: IContractResolver) -> None: ...
    def get_MissingMemberHandling(self) -> Newtonsoft.Json.MissingMemberHandling: ...
    def set_MissingMemberHandling(self, value: Newtonsoft.Json.MissingMemberHandling) -> None: ...
    def get_NullValueHandling(self) -> Newtonsoft.Json.NullValueHandling: ...
    def set_NullValueHandling(self, value: Newtonsoft.Json.NullValueHandling) -> None: ...
    def get_ObjectCreationHandling(self) -> Newtonsoft.Json.ObjectCreationHandling: ...
    def set_ObjectCreationHandling(self, value: Newtonsoft.Json.ObjectCreationHandling) -> None: ...
    def get_ReferenceLoopHandling(self) -> Newtonsoft.Json.ReferenceLoopHandling: ...
    def set_ReferenceLoopHandling(self, value: Newtonsoft.Json.ReferenceLoopHandling) -> None: ...
    def get_PreserveReferencesHandling(self) -> Newtonsoft.Json.PreserveReferencesHandling: ...
    def set_PreserveReferencesHandling(self, value: Newtonsoft.Json.PreserveReferencesHandling) -> None: ...
    def get_TypeNameHandling(self) -> Newtonsoft.Json.TypeNameHandling: ...
    def set_TypeNameHandling(self, value: Newtonsoft.Json.TypeNameHandling) -> None: ...
    def get_MetadataPropertyHandling(self) -> Newtonsoft.Json.MetadataPropertyHandling: ...
    def set_MetadataPropertyHandling(self, value: Newtonsoft.Json.MetadataPropertyHandling) -> None: ...
    def get_TypeNameAssemblyFormat(self) -> System.Runtime.Serialization.Formatters.FormatterAssemblyStyle: ...
    def set_TypeNameAssemblyFormat(self, value: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle) -> None: ...
    def get_TypeNameAssemblyFormatHandling(self) -> Newtonsoft.Json.TypeNameAssemblyFormatHandling: ...
    def set_TypeNameAssemblyFormatHandling(self, value: Newtonsoft.Json.TypeNameAssemblyFormatHandling) -> None: ...
    def get_ConstructorHandling(self) -> Newtonsoft.Json.ConstructorHandling: ...
    def set_ConstructorHandling(self, value: Newtonsoft.Json.ConstructorHandling) -> None: ...
    def get_Binder(self) -> System.Runtime.Serialization.SerializationBinder: ...
    def set_Binder(self, value: System.Runtime.Serialization.SerializationBinder) -> None: ...
    def get_SerializationBinder(self) -> ISerializationBinder: ...
    def set_SerializationBinder(self, value: ISerializationBinder) -> None: ...
    def get_Context(self) -> System.Runtime.Serialization.StreamingContext: ...
    def set_Context(self, value: System.Runtime.Serialization.StreamingContext) -> None: ...
    def get_Formatting(self) -> Newtonsoft.Json.Formatting: ...
    def set_Formatting(self, value: Newtonsoft.Json.Formatting) -> None: ...
    def get_DateFormatHandling(self) -> Newtonsoft.Json.DateFormatHandling: ...
    def set_DateFormatHandling(self, value: Newtonsoft.Json.DateFormatHandling) -> None: ...
    def get_DateTimeZoneHandling(self) -> Newtonsoft.Json.DateTimeZoneHandling: ...
    def set_DateTimeZoneHandling(self, value: Newtonsoft.Json.DateTimeZoneHandling) -> None: ...
    def get_DateParseHandling(self) -> Newtonsoft.Json.DateParseHandling: ...
    def set_DateParseHandling(self, value: Newtonsoft.Json.DateParseHandling) -> None: ...
    def get_FloatFormatHandling(self) -> Newtonsoft.Json.FloatFormatHandling: ...
    def set_FloatFormatHandling(self, value: Newtonsoft.Json.FloatFormatHandling) -> None: ...
    def get_FloatParseHandling(self) -> Newtonsoft.Json.FloatParseHandling: ...
    def set_FloatParseHandling(self, value: Newtonsoft.Json.FloatParseHandling) -> None: ...
    def get_StringEscapeHandling(self) -> Newtonsoft.Json.StringEscapeHandling: ...
    def set_StringEscapeHandling(self, value: Newtonsoft.Json.StringEscapeHandling) -> None: ...
    def get_DateFormatString(self) -> str: ...
    def set_DateFormatString(self, value: str) -> None: ...
    def get_Culture(self) -> System.Globalization.CultureInfo: ...
    def set_Culture(self, value: System.Globalization.CultureInfo) -> None: ...
    def get_MaxDepth(self) -> list[int]: ...
    def set_MaxDepth(self, value: list[int]) -> None: ...
    def get_CheckAdditionalContent(self) -> bool: ...
    def set_CheckAdditionalContent(self, value: bool) -> None: ...

class JsonStringContract(JsonPrimitiveContract):
    def __init__(self, underlyingType: System.Type) -> None: ...

class JsonTypeReflector:
    IdPropertyName: str
    RefPropertyName: str
    TypePropertyName: str
    ValuePropertyName: str
    ArrayValuesPropertyName: str
    ShouldSerializePrefix: str
    SpecifiedPostfix: str
    ConcurrentDictionaryTypeName: str
    DynamicCodeGeneration: bool
    FullyTrusted: bool
    ReflectionDelegateFactory: Newtonsoft.Json.Utilities.ReflectionDelegateFactory
    @staticmethod
    def GetCachedAttribute(attributeProvider: typing.Any) -> T: ...
    @staticmethod
    def CanTypeDescriptorConvertString(type: System.Type, typeConverter: System.ComponentModel.TypeConverter&) -> bool: ...
    @staticmethod
    def GetDataContractAttribute(type: System.Type) -> System.Runtime.Serialization.DataContractAttribute: ...
    @staticmethod
    def GetDataMemberAttribute(memberInfo: System.Reflection.MemberInfo) -> System.Runtime.Serialization.DataMemberAttribute: ...
    @staticmethod
    def GetObjectMemberSerialization(objectType: System.Type, ignoreSerializableAttribute: bool) -> Newtonsoft.Json.MemberSerialization: ...
    @staticmethod
    def GetJsonConverter(attributeProvider: typing.Any) -> Newtonsoft.Json.JsonConverter: ...
    @staticmethod
    def CreateJsonConverterInstance(converterType: System.Type, args: list[typing.Any]) -> Newtonsoft.Json.JsonConverter: ...
    @staticmethod
    def CreateNamingStrategyInstance(namingStrategyType: System.Type, args: list[typing.Any]) -> NamingStrategy: ...
    @staticmethod
    def GetContainerNamingStrategy(containerAttribute: Newtonsoft.Json.JsonContainerAttribute) -> NamingStrategy: ...
    @staticmethod
    def IsNonSerializable(provider: typing.Any) -> bool: ...
    @staticmethod
    def IsSerializable(provider: typing.Any) -> bool: ...
    @staticmethod
    def GetAttribute(provider: typing.Any) -> T: ...
    @staticmethod
    def get_DynamicCodeGeneration() -> bool: ...
    @staticmethod
    def get_FullyTrusted() -> bool: ...
    @staticmethod
    def get_ReflectionDelegateFactory() -> Newtonsoft.Json.Utilities.ReflectionDelegateFactory: ...

class KebabCaseNamingStrategy(NamingStrategy):
    @typing.overload
    def __init__(self, processDictionaryKeys: bool, overrideSpecifiedNames: bool) -> None: ...
    @typing.overload
    def __init__(self, processDictionaryKeys: bool, overrideSpecifiedNames: bool, processExtensionDataNames: bool) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...

class MemoryTraceWriter:
    def __init__(self, ) -> None: ...
    LevelFilter: System.Diagnostics.TraceLevel
    def get_LevelFilter(self) -> System.Diagnostics.TraceLevel: ...
    def set_LevelFilter(self, value: System.Diagnostics.TraceLevel) -> None: ...
    def Trace(self, level: System.Diagnostics.TraceLevel, message: str, ex: System.Exception) -> None: ...
    def GetTraceMessages(self) -> list[str]: ...
    def ToString(self) -> str: ...

class NamingStrategy:
    ProcessDictionaryKeys: bool
    ProcessExtensionDataNames: bool
    OverrideSpecifiedNames: bool
    def get_ProcessDictionaryKeys(self) -> bool: ...
    def set_ProcessDictionaryKeys(self, value: bool) -> None: ...
    def get_ProcessExtensionDataNames(self) -> bool: ...
    def set_ProcessExtensionDataNames(self, value: bool) -> None: ...
    def get_OverrideSpecifiedNames(self) -> bool: ...
    def set_OverrideSpecifiedNames(self, value: bool) -> None: ...
    def GetPropertyName(self, name: str, hasSpecifiedName: bool) -> str: ...
    def GetExtensionDataName(self, name: str) -> str: ...
    def GetDictionaryKey(self, key: str) -> str: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: typing.Any) -> bool: ...

T = typing.TypeVar('T')

class ObjectConstructor[T](System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, args: list[typing.Any]) -> typing.Any: ...
    def BeginInvoke(self, args: list[typing.Any], callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> typing.Any: ...

class OnErrorAttribute(System.Attribute):
    def __init__(self, ) -> None: ...

class ReflectionAttributeProvider:
    def __init__(self, attributeProvider: typing.Any) -> None: ...
    @typing.overload
    def GetAttributes(self, inherit: bool) -> list[System.Attribute]: ...
    @typing.overload
    def GetAttributes(self, attributeType: System.Type, inherit: bool) -> list[System.Attribute]: ...

class ReflectionValueProvider:
    def __init__(self, memberInfo: System.Reflection.MemberInfo) -> None: ...
    def SetValue(self, target: typing.Any, value: typing.Any) -> None: ...
    def GetValue(self, target: typing.Any) -> typing.Any: ...

class SerializationBinderAdapter:
    def __init__(self, serializationBinder: System.Runtime.Serialization.SerializationBinder) -> None: ...
    SerializationBinder: System.Runtime.Serialization.SerializationBinder
    def BindToType(self, assemblyName: str, typeName: str) -> System.Type: ...
    def BindToName(self, serializedType: System.Type, assemblyName: System.String&, typeName: System.String&) -> None: ...

class SnakeCaseNamingStrategy(NamingStrategy):
    @typing.overload
    def __init__(self, processDictionaryKeys: bool, overrideSpecifiedNames: bool) -> None: ...
    @typing.overload
    def __init__(self, processDictionaryKeys: bool, overrideSpecifiedNames: bool, processExtensionDataNames: bool) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...

class TraceJsonReader(Newtonsoft.Json.JsonReader):
    def __init__(self, innerReader: Newtonsoft.Json.JsonReader) -> None: ...
    Depth: int
    Path: str
    QuoteChar: System.Char
    TokenType: Newtonsoft.Json.JsonToken
    Value: typing.Any
    ValueType: System.Type
    def GetDeserializedJsonMessage(self) -> str: ...
    def Read(self) -> bool: ...
    def ReadAsInt32(self) -> list[int]: ...
    def ReadAsString(self) -> str: ...
    def ReadAsBytes(self) -> list[System.Byte]: ...
    def ReadAsDecimal(self) -> list[System.Decimal]: ...
    def ReadAsDouble(self) -> list[float]: ...
    def ReadAsBoolean(self) -> list[bool]: ...
    def ReadAsDateTime(self) -> list[System.DateTime]: ...
    def ReadAsDateTimeOffset(self) -> list[System.DateTimeOffset]: ...
    def WriteCurrentToken(self) -> None: ...
    def get_Depth(self) -> int: ...
    def get_Path(self) -> str: ...
    def get_QuoteChar(self) -> System.Char: ...
    def get_TokenType(self) -> Newtonsoft.Json.JsonToken: ...
    def get_Value(self) -> typing.Any: ...
    def get_ValueType(self) -> System.Type: ...
    def Close(self) -> None: ...

class TraceJsonWriter(Newtonsoft.Json.JsonWriter):
    def __init__(self, innerWriter: Newtonsoft.Json.JsonWriter) -> None: ...
    def GetSerializedJsonMessage(self) -> str: ...
    @typing.overload
    def WriteValue(self, value: System.Decimal) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Decimal]) -> None: ...
    @typing.overload
    def WriteValue(self, value: bool) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[bool]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Byte) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Char) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Char]) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.DateTime) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.DateTime]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.DateTimeOffset) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.DateTimeOffset]) -> None: ...
    @typing.overload
    def WriteValue(self, value: float) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[float]) -> None: ...
    @typing.overload
    def WriteValue(self, value: float) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[float]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Guid) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.Guid]) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[int]) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[int]) -> None: ...
    @typing.overload
    def WriteValue(self, value: typing.Any) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.SByte) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.SByte]) -> None: ...
    @typing.overload
    def WriteValue(self, value: int) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[int]) -> None: ...
    @typing.overload
    def WriteValue(self, value: str) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.TimeSpan) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.TimeSpan]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt32) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.UInt32]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt64) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.UInt64]) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.Uri) -> None: ...
    @typing.overload
    def WriteValue(self, value: System.UInt16) -> None: ...
    @typing.overload
    def WriteValue(self, value: list[System.UInt16]) -> None: ...
    def WriteUndefined(self) -> None: ...
    def WriteNull(self) -> None: ...
    def WriteWhitespace(self, ws: str) -> None: ...
    def WriteComment(self, text: str) -> None: ...
    def WriteStartArray(self) -> None: ...
    def WriteEndArray(self) -> None: ...
    def WriteStartConstructor(self, name: str) -> None: ...
    def WriteEndConstructor(self) -> None: ...
    @typing.overload
    def WritePropertyName(self, name: str) -> None: ...
    @typing.overload
    def WritePropertyName(self, name: str, escape: bool) -> None: ...
    def WriteStartObject(self) -> None: ...
    def WriteEndObject(self) -> None: ...
    def WriteRawValue(self, json: str) -> None: ...
    def WriteRaw(self, json: str) -> None: ...
    def Close(self) -> None: ...
    def Flush(self) -> None: ...

TEnumeratorKey = typing.TypeVar('TEnumeratorKey'), TEnumeratorValue = typing.TypeVar('TEnumeratorValue')

class EnumerableDictionaryWrapper[TEnumeratorKey, TEnumeratorValue]:
    def __init__(self, e: list[dict[TEnumeratorKey, TEnumeratorValue]]) -> None: ...
    def GetEnumerator(self) -> list[dict[typing.Any, typing.Any]]: ...

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__40_0: dict[System.Reflection.MemberInfo, bool]
    <>9__40_1: dict[System.Reflection.MemberInfo, bool]
    <>9__44_0: dict[System.Type, list[System.Reflection.MemberInfo]]
    <>9__44_1: dict[System.Reflection.MemberInfo, bool]
    <>9__47_0: dict[System.Reflection.ConstructorInfo, bool]
    <>9__75_0: dict[JsonProperty, int]

class <>c__DisplayClass42_0:
    def __init__(self, ) -> None: ...
    namingStrategy: NamingStrategy

class <>c__DisplayClass45_0:
    def __init__(self, ) -> None: ...
    getExtensionDataDictionary: dict[typing.Any, typing.Any]
    member: System.Reflection.MemberInfo

class <>c__DisplayClass45_1:
    def __init__(self, ) -> None: ...
    setExtensionDataDictionary: dict[typing.Any, typing.Any]
    createExtensionDataDictionary: list[typing.Any]
    setExtensionDataDictionaryValue: dict[typing.Any, typing.Any]
    CS$<>8__locals1: <>c__DisplayClass45_0

class <>c__DisplayClass45_2:
    def __init__(self, ) -> None: ...
    createEnumerableWrapper: list[typing.Any]
    CS$<>8__locals2: <>c__DisplayClass45_0

class <>c__DisplayClass62_0:
    def __init__(self, ) -> None: ...
    namingStrategy: NamingStrategy

class <>c__DisplayClass67_0:
    def __init__(self, ) -> None: ...
    namingStrategy: NamingStrategy

class <>c__DisplayClass80_0:
    def __init__(self, ) -> None: ...
    shouldSerializeCall: dict[typing.Any, typing.Any]

class <>c__DisplayClass81_0:
    def __init__(self, ) -> None: ...
    specifiedPropertyGet: dict[typing.Any, typing.Any]

class <>c__DisplayClass57_0:
    def __init__(self, ) -> None: ...
    callbackMethodInfo: System.Reflection.MethodInfo

class <>c__DisplayClass58_0:
    def __init__(self, ) -> None: ...
    callbackMethodInfo: System.Reflection.MethodInfo

class ReferenceEqualsEqualityComparer:
    def __init__(self, ) -> None: ...

class PropertyPresence(System.Enum, int):
    None: PropertyPresence = ...
    Null: PropertyPresence = ...
    Value: PropertyPresence = ...

class CreatorPropertyContext:
    def __init__(self, name: str) -> None: ...
    Name: str
    Property: JsonProperty
    ConstructorProperty: JsonProperty
    Presence: list[PropertyPresence]
    Value: typing.Any
    Used: bool

class <>c__DisplayClass38_0:
    def __init__(self, ) -> None: ...
    property: JsonProperty

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__38_0: dict[JsonProperty, str]
    <>9__38_2: dict[JsonProperty, str]
    <>9__42_0: dict[JsonProperty, JsonProperty]
    <>9__42_1: dict[JsonProperty, PropertyPresence]

class <>c__DisplayClass22_0:
    def __init__(self, ) -> None: ...
    type: System.Type
    defaultConstructor: list[typing.Any]

class <>c:
    def __init__(self, ) -> None: ...
    <>9: <>c
    <>9__22_1: dict[typing.Any, System.Type]

TEnumeratorKey = typing.TypeVar('TEnumeratorKey'), TEnumeratorValue = typing.TypeVar('TEnumeratorValue')

class <GetEnumerator>d__2[TEnumeratorKey, TEnumeratorValue]:
    def __init__(self, <>1__state: int) -> None: ...
    <>4__this: dict[TEnumeratorKey, TEnumeratorValue]

