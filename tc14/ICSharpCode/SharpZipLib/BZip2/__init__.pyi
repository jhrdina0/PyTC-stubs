import ICSharpCode.SharpZipLib
import System
import System.IO
import typing

class BZip2:
    @staticmethod
    def Decompress(inStream: System.IO.Stream, outStream: System.IO.Stream, isStreamOwner: bool) -> None: ...
    @staticmethod
    def Compress(inStream: System.IO.Stream, outStream: System.IO.Stream, isStreamOwner: bool, level: int) -> None: ...

class BZip2Constants:
    RandomNumbers: list[int]
    BaseBlockSize: int
    MaximumAlphaSize: int
    MaximumCodeLength: int
    RunA: int
    RunB: int
    GroupCount: int
    GroupSize: int
    NumberOfIterations: int
    MaximumSelectors: int
    OvershootBytes: int

class BZip2Exception(ICSharpCode.SharpZipLib.SharpZipBaseException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...

class BZip2InputStream(System.IO.Stream):
    def __init__(self, stream: System.IO.Stream) -> None: ...
    IsStreamOwner: bool
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Flush(self) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def ReadByte(self) -> int: ...

class BZip2OutputStream(System.IO.Stream):
    @typing.overload
    def __init__(self, stream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, stream: System.IO.Stream, blockSize: int) -> None: ...
    IsStreamOwner: bool
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    BytesWritten: int
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...
    def get_BytesWritten(self) -> int: ...
    def Flush(self) -> None: ...

