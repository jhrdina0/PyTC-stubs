import ICSharpCode.SharpZipLib
import System
import System.Collections.Generic
import System.IO
import System.Text
import typing

class InvalidHeaderException(TarException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, exception: System.Exception) -> None: ...

class ProgressMessageHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, archive: TarArchive, entry: TarEntry, message: str) -> None: ...
    def BeginInvoke(self, archive: TarArchive, entry: TarEntry, message: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class TarArchive:
    AsciiTranslate: bool
    PathPrefix: str
    RootPath: str
    ApplyUserInfoOverrides: bool
    UserId: int
    UserName: str
    GroupId: int
    GroupName: str
    RecordSize: int
    IsStreamOwner: bool
    def add_ProgressMessageEvent(self, value: ProgressMessageHandler) -> None: ...
    def remove_ProgressMessageEvent(self, value: ProgressMessageHandler) -> None: ...
    @staticmethod
    @typing.overload
    def CreateInputTarArchive(inputStream: System.IO.Stream) -> TarArchive: ...
    @staticmethod
    @typing.overload
    def CreateInputTarArchive(inputStream: System.IO.Stream, nameEncoding: System.Text.Encoding) -> TarArchive: ...
    @staticmethod
    @typing.overload
    def CreateInputTarArchive(inputStream: System.IO.Stream, blockFactor: int) -> TarArchive: ...
    @staticmethod
    @typing.overload
    def CreateInputTarArchive(inputStream: System.IO.Stream, blockFactor: int, nameEncoding: System.Text.Encoding) -> TarArchive: ...
    @staticmethod
    @typing.overload
    def CreateOutputTarArchive(outputStream: System.IO.Stream, nameEncoding: System.Text.Encoding) -> TarArchive: ...
    @staticmethod
    @typing.overload
    def CreateOutputTarArchive(outputStream: System.IO.Stream) -> TarArchive: ...
    @staticmethod
    @typing.overload
    def CreateOutputTarArchive(outputStream: System.IO.Stream, blockFactor: int) -> TarArchive: ...
    @staticmethod
    @typing.overload
    def CreateOutputTarArchive(outputStream: System.IO.Stream, blockFactor: int, nameEncoding: System.Text.Encoding) -> TarArchive: ...
    def SetKeepOldFiles(self, keepExistingFiles: bool) -> None: ...
    def get_AsciiTranslate(self) -> bool: ...
    def set_AsciiTranslate(self, value: bool) -> None: ...
    def SetAsciiTranslation(self, translateAsciiFiles: bool) -> None: ...
    def get_PathPrefix(self) -> str: ...
    def set_PathPrefix(self, value: str) -> None: ...
    def get_RootPath(self) -> str: ...
    def set_RootPath(self, value: str) -> None: ...
    def SetUserInfo(self, userId: int, userName: str, groupId: int, groupName: str) -> None: ...
    def get_ApplyUserInfoOverrides(self) -> bool: ...
    def set_ApplyUserInfoOverrides(self, value: bool) -> None: ...
    def get_UserId(self) -> int: ...
    def get_UserName(self) -> str: ...
    def get_GroupId(self) -> int: ...
    def get_GroupName(self) -> str: ...
    def get_RecordSize(self) -> int: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def CloseArchive(self) -> None: ...
    def ListContents(self) -> None: ...
    @typing.overload
    def ExtractContents(self, destinationDirectory: str) -> None: ...
    @typing.overload
    def ExtractContents(self, destinationDirectory: str, allowParentTraversal: bool) -> None: ...
    def WriteEntry(self, sourceEntry: TarEntry, recurse: bool) -> None: ...
    def Dispose(self) -> None: ...
    def Close(self) -> None: ...

class TarBuffer:
    BlockSize: int
    DefaultBlockFactor: int
    DefaultRecordSize: int
    RecordSize: int
    BlockFactor: int
    CurrentBlock: int
    IsStreamOwner: bool
    CurrentRecord: int
    def get_RecordSize(self) -> int: ...
    def GetRecordSize(self) -> int: ...
    def get_BlockFactor(self) -> int: ...
    def GetBlockFactor(self) -> int: ...
    @staticmethod
    @typing.overload
    def CreateInputTarBuffer(inputStream: System.IO.Stream) -> TarBuffer: ...
    @staticmethod
    @typing.overload
    def CreateInputTarBuffer(inputStream: System.IO.Stream, blockFactor: int) -> TarBuffer: ...
    @staticmethod
    @typing.overload
    def CreateOutputTarBuffer(outputStream: System.IO.Stream) -> TarBuffer: ...
    @staticmethod
    @typing.overload
    def CreateOutputTarBuffer(outputStream: System.IO.Stream, blockFactor: int) -> TarBuffer: ...
    def IsEOFBlock(self, block: list[System.Byte]) -> bool: ...
    @staticmethod
    def IsEndOfArchiveBlock(block: list[System.Byte]) -> bool: ...
    def SkipBlock(self) -> None: ...
    def ReadBlock(self) -> list[System.Byte]: ...
    def get_CurrentBlock(self) -> int: ...
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def GetCurrentBlockNum(self) -> int: ...
    def get_CurrentRecord(self) -> int: ...
    def GetCurrentRecordNum(self) -> int: ...
    @typing.overload
    def WriteBlock(self, block: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteBlock(self, buffer: list[System.Byte], offset: int) -> None: ...
    def Close(self) -> None: ...

class TarEntry:
    @typing.overload
    def __init__(self, headerBuffer: list[System.Byte]) -> None: ...
    @typing.overload
    def __init__(self, headerBuffer: list[System.Byte], nameEncoding: System.Text.Encoding) -> None: ...
    @typing.overload
    def __init__(self, header: TarHeader) -> None: ...
    TarHeader: TarHeader
    Name: str
    UserId: int
    GroupId: int
    UserName: str
    GroupName: str
    ModTime: System.DateTime
    File: str
    Size: int
    IsDirectory: bool
    def Clone(self) -> typing.Any: ...
    @staticmethod
    def CreateTarEntry(name: str) -> TarEntry: ...
    @staticmethod
    def CreateEntryFromFile(fileName: str) -> TarEntry: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def IsDescendent(self, toTest: TarEntry) -> bool: ...
    def get_TarHeader(self) -> TarHeader: ...
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_UserId(self) -> int: ...
    def set_UserId(self, value: int) -> None: ...
    def get_GroupId(self) -> int: ...
    def set_GroupId(self, value: int) -> None: ...
    def get_UserName(self) -> str: ...
    def set_UserName(self, value: str) -> None: ...
    def get_GroupName(self) -> str: ...
    def set_GroupName(self, value: str) -> None: ...
    def SetIds(self, userId: int, groupId: int) -> None: ...
    def SetNames(self, userName: str, groupName: str) -> None: ...
    def get_ModTime(self) -> System.DateTime: ...
    def set_ModTime(self, value: System.DateTime) -> None: ...
    def get_File(self) -> str: ...
    def get_Size(self) -> int: ...
    def set_Size(self, value: int) -> None: ...
    def get_IsDirectory(self) -> bool: ...
    def GetFileTarHeader(self, header: TarHeader, file: str) -> None: ...
    def GetDirectoryEntries(self) -> list[TarEntry]: ...
    @typing.overload
    def WriteEntryHeader(self, outBuffer: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteEntryHeader(self, outBuffer: list[System.Byte], nameEncoding: System.Text.Encoding) -> None: ...
    @staticmethod
    @typing.overload
    def AdjustEntryName(buffer: list[System.Byte], newName: str) -> None: ...
    @staticmethod
    @typing.overload
    def AdjustEntryName(buffer: list[System.Byte], newName: str, nameEncoding: System.Text.Encoding) -> None: ...
    @staticmethod
    def NameTarHeader(header: TarHeader, name: str) -> None: ...

class TarException(ICSharpCode.SharpZipLib.SharpZipBaseException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...

class TarExtendedHeaderReader:
    def __init__(self, ) -> None: ...
    Headers: dict[str, str]
    def Read(self, buffer: list[System.Byte], length: int) -> None: ...
    def get_Headers(self) -> dict[str, str]: ...

class TarHeader:
    def __init__(self, ) -> None: ...
    NAMELEN: int
    MODELEN: int
    UIDLEN: int
    GIDLEN: int
    CHKSUMLEN: int
    CHKSUMOFS: int
    SIZELEN: int
    MAGICLEN: int
    VERSIONLEN: int
    MODTIMELEN: int
    UNAMELEN: int
    GNAMELEN: int
    DEVLEN: int
    PREFIXLEN: int
    LF_OLDNORM: System.Byte
    LF_NORMAL: System.Byte
    LF_LINK: System.Byte
    LF_SYMLINK: System.Byte
    LF_CHR: System.Byte
    LF_BLK: System.Byte
    LF_DIR: System.Byte
    LF_FIFO: System.Byte
    LF_CONTIG: System.Byte
    LF_GHDR: System.Byte
    LF_XHDR: System.Byte
    LF_ACL: System.Byte
    LF_GNU_DUMPDIR: System.Byte
    LF_EXTATTR: System.Byte
    LF_META: System.Byte
    LF_GNU_LONGLINK: System.Byte
    LF_GNU_LONGNAME: System.Byte
    LF_GNU_MULTIVOL: System.Byte
    LF_GNU_NAMES: System.Byte
    LF_GNU_SPARSE: System.Byte
    LF_GNU_VOLHDR: System.Byte
    TMAGIC: str
    GNU_TMAGIC: str
    Name: str
    Mode: int
    UserId: int
    GroupId: int
    Size: int
    ModTime: System.DateTime
    Checksum: int
    IsChecksumValid: bool
    TypeFlag: System.Byte
    LinkName: str
    Magic: str
    Version: str
    UserName: str
    GroupName: str
    DevMajor: int
    DevMinor: int
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def GetName(self) -> str: ...
    def get_Mode(self) -> int: ...
    def set_Mode(self, value: int) -> None: ...
    def get_UserId(self) -> int: ...
    def set_UserId(self, value: int) -> None: ...
    def get_GroupId(self) -> int: ...
    def set_GroupId(self, value: int) -> None: ...
    def get_Size(self) -> int: ...
    def set_Size(self, value: int) -> None: ...
    def get_ModTime(self) -> System.DateTime: ...
    def set_ModTime(self, value: System.DateTime) -> None: ...
    def get_Checksum(self) -> int: ...
    def get_IsChecksumValid(self) -> bool: ...
    def get_TypeFlag(self) -> System.Byte: ...
    def set_TypeFlag(self, value: System.Byte) -> None: ...
    def get_LinkName(self) -> str: ...
    def set_LinkName(self, value: str) -> None: ...
    def get_Magic(self) -> str: ...
    def set_Magic(self, value: str) -> None: ...
    def get_Version(self) -> str: ...
    def set_Version(self, value: str) -> None: ...
    def get_UserName(self) -> str: ...
    def set_UserName(self, value: str) -> None: ...
    def get_GroupName(self) -> str: ...
    def set_GroupName(self, value: str) -> None: ...
    def get_DevMajor(self) -> int: ...
    def set_DevMajor(self, value: int) -> None: ...
    def get_DevMinor(self) -> int: ...
    def set_DevMinor(self, value: int) -> None: ...
    def Clone(self) -> typing.Any: ...
    @typing.overload
    def ParseBuffer(self, header: list[System.Byte], nameEncoding: System.Text.Encoding) -> None: ...
    @typing.overload
    def ParseBuffer(self, header: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteHeader(self, outBuffer: list[System.Byte]) -> None: ...
    @typing.overload
    def WriteHeader(self, outBuffer: list[System.Byte], nameEncoding: System.Text.Encoding) -> None: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    @staticmethod
    def ParseOctal(header: list[System.Byte], offset: int, length: int) -> int: ...
    @staticmethod
    @typing.overload
    def ParseName(header: list[System.Byte], offset: int, length: int) -> System.Text.StringBuilder: ...
    @staticmethod
    @typing.overload
    def ParseName(header: list[System.Byte], offset: int, length: int, encoding: System.Text.Encoding) -> System.Text.StringBuilder: ...
    @staticmethod
    @typing.overload
    def GetNameBytes(name: System.Text.StringBuilder, nameOffset: int, buffer: list[System.Byte], bufferOffset: int, length: int) -> int: ...
    @staticmethod
    @typing.overload
    def GetNameBytes(name: str, nameOffset: int, buffer: list[System.Byte], bufferOffset: int, length: int) -> int: ...
    @staticmethod
    @typing.overload
    def GetNameBytes(name: str, nameOffset: int, buffer: list[System.Byte], bufferOffset: int, length: int, encoding: System.Text.Encoding) -> int: ...
    @staticmethod
    @typing.overload
    def GetNameBytes(name: System.Text.StringBuilder, buffer: list[System.Byte], offset: int, length: int) -> int: ...
    @staticmethod
    @typing.overload
    def GetNameBytes(name: System.Text.StringBuilder, buffer: list[System.Byte], offset: int, length: int, encoding: System.Text.Encoding) -> int: ...
    @staticmethod
    @typing.overload
    def GetNameBytes(name: str, buffer: list[System.Byte], offset: int, length: int) -> int: ...
    @staticmethod
    @typing.overload
    def GetNameBytes(name: str, buffer: list[System.Byte], offset: int, length: int, encoding: System.Text.Encoding) -> int: ...
    @staticmethod
    @typing.overload
    def GetAsciiBytes(toAdd: str, nameOffset: int, buffer: list[System.Byte], bufferOffset: int, length: int) -> int: ...
    @staticmethod
    @typing.overload
    def GetAsciiBytes(toAdd: str, nameOffset: int, buffer: list[System.Byte], bufferOffset: int, length: int, encoding: System.Text.Encoding) -> int: ...
    @staticmethod
    def GetOctalBytes(value: int, buffer: list[System.Byte], offset: int, length: int) -> int: ...

class TarInputStream(System.IO.Stream):
    @typing.overload
    def __init__(self, inputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, inputStream: System.IO.Stream, nameEncoding: System.Text.Encoding) -> None: ...
    @typing.overload
    def __init__(self, inputStream: System.IO.Stream, blockFactor: int) -> None: ...
    @typing.overload
    def __init__(self, inputStream: System.IO.Stream, blockFactor: int, nameEncoding: System.Text.Encoding) -> None: ...
    IsStreamOwner: bool
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    RecordSize: int
    Available: int
    IsMarkSupported: bool
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Flush(self) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def SetEntryFactory(self, factory: IEntryFactory) -> None: ...
    def get_RecordSize(self) -> int: ...
    def GetRecordSize(self) -> int: ...
    def get_Available(self) -> int: ...
    def Skip(self, skipCount: int) -> None: ...
    def get_IsMarkSupported(self) -> bool: ...
    def Mark(self, markLimit: int) -> None: ...
    def Reset(self) -> None: ...
    def GetNextEntry(self) -> TarEntry: ...
    def CopyEntryContents(self, outputStream: System.IO.Stream) -> None: ...

class TarOutputStream(System.IO.Stream):
    @typing.overload
    def __init__(self, outputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, outputStream: System.IO.Stream, nameEncoding: System.Text.Encoding) -> None: ...
    @typing.overload
    def __init__(self, outputStream: System.IO.Stream, blockFactor: int) -> None: ...
    @typing.overload
    def __init__(self, outputStream: System.IO.Stream, blockFactor: int, nameEncoding: System.Text.Encoding) -> None: ...
    IsStreamOwner: bool
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    RecordSize: int
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Flush(self) -> None: ...
    def Finish(self) -> None: ...
    def get_RecordSize(self) -> int: ...
    def GetRecordSize(self) -> int: ...
    def PutNextEntry(self, entry: TarEntry) -> None: ...
    def CloseEntry(self) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...

class IEntryFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    @typing.overload
    def CreateEntry(self, name: str) -> TarEntry: ...
    @typing.overload
    def CreateEntry(self, headerBuffer: list[System.Byte]) -> TarEntry: ...
    def CreateEntryFromFile(self, fileName: str) -> TarEntry: ...

class EntryFactoryAdapter:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, nameEncoding: System.Text.Encoding) -> None: ...
    @typing.overload
    def CreateEntry(self, name: str) -> TarEntry: ...
    @typing.overload
    def CreateEntry(self, headerBuffer: list[System.Byte]) -> TarEntry: ...
    def CreateEntryFromFile(self, fileName: str) -> TarEntry: ...

