import ICSharpCode.SharpZipLib
import System
import System.IO
import typing

class LzwConstants:
    MAGIC: int
    MAX_BITS: int
    BIT_MASK: int
    EXTENDED_MASK: int
    RESERVED_MASK: int
    BLOCK_MODE_MASK: int
    HDR_SIZE: int
    INIT_BITS: int

class LzwException(ICSharpCode.SharpZipLib.SharpZipBaseException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...

class LzwInputStream(System.IO.Stream):
    def __init__(self, baseInputStream: System.IO.Stream) -> None: ...
    IsStreamOwner: bool
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Flush(self) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...

