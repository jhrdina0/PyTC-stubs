import ICSharpCode.SharpZipLib
import ICSharpCode.SharpZipLib.Zip.Compression.Streams
import System
import System.IO
import System.Text
import typing

class GZip:
    @staticmethod
    def Decompress(inStream: System.IO.Stream, outStream: System.IO.Stream, isStreamOwner: bool) -> None: ...
    @staticmethod
    def Compress(inStream: System.IO.Stream, outStream: System.IO.Stream, isStreamOwner: bool, bufferSize: int = 512, level: int = 6) -> None: ...

class GZipConstants:
    def __init__(self, ) -> None: ...
    ID1: System.Byte
    ID2: System.Byte
    CompressionMethodDeflate: System.Byte
    Encoding: System.Text.Encoding
    @staticmethod
    def get_Encoding() -> System.Text.Encoding: ...

class GZipFlags(System.Enum, int):
    FTEXT: GZipFlags = ...
    FHCRC: GZipFlags = ...
    FEXTRA: GZipFlags = ...
    FNAME: GZipFlags = ...
    FCOMMENT: GZipFlags = ...

class GZipException(ICSharpCode.SharpZipLib.SharpZipBaseException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...

class GZipInputStream(ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream):
    @typing.overload
    def __init__(self, baseInputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, baseInputStream: System.IO.Stream, size: int) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def GetFilename(self) -> str: ...

class GZipOutputStream(ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream):
    @typing.overload
    def __init__(self, baseOutputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, baseOutputStream: System.IO.Stream, size: int) -> None: ...
    FileName: str
    def SetLevel(self, level: int) -> None: ...
    def GetLevel(self) -> int: ...
    def get_FileName(self) -> str: ...
    def set_FileName(self, value: str) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def Flush(self) -> None: ...
    def Finish(self) -> None: ...

class OutputState(System.Enum, int):
    Header: OutputState = ...
    Footer: OutputState = ...
    Finished: OutputState = ...
    Closed: OutputState = ...

