import System
import typing

class Adler32:
    def __init__(self, ) -> None: ...
    Value: int
    def Reset(self) -> None: ...
    def get_Value(self) -> int: ...
    @typing.overload
    def Update(self, bval: int) -> None: ...
    @typing.overload
    def Update(self, buffer: list[System.Byte]) -> None: ...
    @typing.overload
    def Update(self, segment: list[System.Byte]) -> None: ...

class BZip2Crc:
    def __init__(self, ) -> None: ...
    Value: int
    def Reset(self) -> None: ...
    def get_Value(self) -> int: ...
    @typing.overload
    def Update(self, bval: int) -> None: ...
    @typing.overload
    def Update(self, buffer: list[System.Byte]) -> None: ...
    @typing.overload
    def Update(self, segment: list[System.Byte]) -> None: ...

class Crc32:
    def __init__(self, ) -> None: ...
    Value: int
    def Reset(self) -> None: ...
    def get_Value(self) -> int: ...
    @typing.overload
    def Update(self, bval: int) -> None: ...
    @typing.overload
    def Update(self, buffer: list[System.Byte]) -> None: ...
    @typing.overload
    def Update(self, segment: list[System.Byte]) -> None: ...

class CrcUtilities:
    pass

class IChecksum:
    def __init__(self , *args: typing.Any) -> None: ...
    Value: int
    def Reset(self) -> None: ...
    def get_Value(self) -> int: ...
    @typing.overload
    def Update(self, bval: int) -> None: ...
    @typing.overload
    def Update(self, buffer: list[System.Byte]) -> None: ...
    @typing.overload
    def Update(self, segment: list[System.Byte]) -> None: ...

