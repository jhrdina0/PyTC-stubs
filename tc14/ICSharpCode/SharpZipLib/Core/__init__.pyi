import ICSharpCode.SharpZipLib
import ICSharpCode.SharpZipLib.Core
import System
import System.IO
import typing

class Empty:
    @staticmethod
    def Array() -> list[T]: ...

class ScanEventArgs(System.EventArgs):
    def __init__(self, name: str) -> None: ...
    Name: str
    ContinueRunning: bool
    def get_Name(self) -> str: ...
    def get_ContinueRunning(self) -> bool: ...
    def set_ContinueRunning(self, value: bool) -> None: ...

class ProgressEventArgs(System.EventArgs):
    def __init__(self, name: str, processed: int, target: int) -> None: ...
    Name: str
    ContinueRunning: bool
    PercentComplete: float
    Processed: int
    Target: int
    def get_Name(self) -> str: ...
    def get_ContinueRunning(self) -> bool: ...
    def set_ContinueRunning(self, value: bool) -> None: ...
    def get_PercentComplete(self) -> float: ...
    def get_Processed(self) -> int: ...
    def get_Target(self) -> int: ...

class DirectoryEventArgs(ScanEventArgs):
    def __init__(self, name: str, hasMatchingFiles: bool) -> None: ...
    HasMatchingFiles: bool
    def get_HasMatchingFiles(self) -> bool: ...

class ScanFailureEventArgs(System.EventArgs):
    def __init__(self, name: str, e: System.Exception) -> None: ...
    Name: str
    Exception: System.Exception
    ContinueRunning: bool
    def get_Name(self) -> str: ...
    def get_Exception(self) -> System.Exception: ...
    def get_ContinueRunning(self) -> bool: ...
    def set_ContinueRunning(self, value: bool) -> None: ...

class ProcessFileHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: ScanEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: ScanEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ProgressHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: ProgressEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: ProgressEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class CompletedFileHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: ScanEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: ScanEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class DirectoryFailureHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: ScanFailureEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: ScanFailureEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class FileFailureHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: ScanFailureEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: ScanFailureEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class FileSystemScanner:
    @typing.overload
    def __init__(self, filter: str) -> None: ...
    @typing.overload
    def __init__(self, fileFilter: str, directoryFilter: str) -> None: ...
    @typing.overload
    def __init__(self, fileFilter: IScanFilter) -> None: ...
    @typing.overload
    def __init__(self, fileFilter: IScanFilter, directoryFilter: IScanFilter) -> None: ...
    ProcessFile: ProcessFileHandler
    CompletedFile: CompletedFileHandler
    DirectoryFailure: DirectoryFailureHandler
    FileFailure: FileFailureHandler
    def add_ProcessDirectory(self, value: list[DirectoryEventArgs]) -> None: ...
    def remove_ProcessDirectory(self, value: list[DirectoryEventArgs]) -> None: ...
    def Scan(self, directory: str, recurse: bool) -> None: ...

class INameTransform:
    def __init__(self , *args: typing.Any) -> None: ...
    def TransformFile(self, name: str) -> str: ...
    def TransformDirectory(self, name: str) -> str: ...

class InvalidNameException(ICSharpCode.SharpZipLib.SharpZipBaseException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...

class IScanFilter:
    def __init__(self , *args: typing.Any) -> None: ...
    def IsMatch(self, name: str) -> bool: ...

class NameFilter:
    def __init__(self, filter: str) -> None: ...
    @staticmethod
    def IsValidExpression(expression: str) -> bool: ...
    @staticmethod
    def IsValidFilterExpression(toTest: str) -> bool: ...
    @staticmethod
    def SplitQuoted(original: str) -> list[str]: ...
    def ToString(self) -> str: ...
    def IsIncluded(self, name: str) -> bool: ...
    def IsExcluded(self, name: str) -> bool: ...
    def IsMatch(self, name: str) -> bool: ...

class PathFilter:
    def __init__(self, filter: str) -> None: ...
    def IsMatch(self, name: str) -> bool: ...

class ExtendedPathFilter(PathFilter):
    @typing.overload
    def __init__(self, filter: str, minSize: int, maxSize: int) -> None: ...
    @typing.overload
    def __init__(self, filter: str, minDate: System.DateTime, maxDate: System.DateTime) -> None: ...
    @typing.overload
    def __init__(self, filter: str, minSize: int, maxSize: int, minDate: System.DateTime, maxDate: System.DateTime) -> None: ...
    MinSize: int
    MaxSize: int
    MinDate: System.DateTime
    MaxDate: System.DateTime
    def IsMatch(self, name: str) -> bool: ...
    def get_MinSize(self) -> int: ...
    def set_MinSize(self, value: int) -> None: ...
    def get_MaxSize(self) -> int: ...
    def set_MaxSize(self, value: int) -> None: ...
    def get_MinDate(self) -> System.DateTime: ...
    def set_MinDate(self, value: System.DateTime) -> None: ...
    def get_MaxDate(self) -> System.DateTime: ...
    def set_MaxDate(self, value: System.DateTime) -> None: ...

class NameAndSizeFilter(PathFilter):
    def __init__(self, filter: str, minSize: int, maxSize: int) -> None: ...
    MinSize: int
    MaxSize: int
    def IsMatch(self, name: str) -> bool: ...
    def get_MinSize(self) -> int: ...
    def set_MinSize(self, value: int) -> None: ...
    def get_MaxSize(self) -> int: ...
    def set_MaxSize(self, value: int) -> None: ...

class PathUtils:
    @staticmethod
    def DropPathRoot(path: str) -> str: ...
    @staticmethod
    def GetTempFileName(original: str) -> str: ...

class StreamUtils:
    @staticmethod
    @typing.overload
    def ReadFully(stream: System.IO.Stream, buffer: list[System.Byte]) -> None: ...
    @staticmethod
    @typing.overload
    def ReadFully(stream: System.IO.Stream, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    @staticmethod
    def ReadRequestedBytes(stream: System.IO.Stream, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    @staticmethod
    @typing.overload
    def Copy(source: System.IO.Stream, destination: System.IO.Stream, buffer: list[System.Byte]) -> None: ...
    @staticmethod
    @typing.overload
    def Copy(source: System.IO.Stream, destination: System.IO.Stream, buffer: list[System.Byte], progressHandler: ProgressHandler, updateInterval: System.TimeSpan, sender: typing.Any, name: str) -> None: ...
    @staticmethod
    @typing.overload
    def Copy(source: System.IO.Stream, destination: System.IO.Stream, buffer: list[System.Byte], progressHandler: ProgressHandler, updateInterval: System.TimeSpan, sender: typing.Any, name: str, fixedTarget: int) -> None: ...

T = typing.TypeVar('T')

class EmptyArray[T]:
    Value: list[T]

class <>c__DisplayClass0_0:
    def __init__(self, ) -> None: ...
    invalidChars: list[System.Char]
    cleanRootSep: bool

