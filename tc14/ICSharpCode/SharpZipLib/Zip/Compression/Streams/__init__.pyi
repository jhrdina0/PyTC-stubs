import ICSharpCode.SharpZipLib.Zip.Compression
import System
import System.IO
import System.Security.Cryptography
import typing

class DeflaterOutputStream(System.IO.Stream):
    @typing.overload
    def __init__(self, baseOutputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, baseOutputStream: System.IO.Stream, deflater: ICSharpCode.SharpZipLib.Zip.Compression.Deflater) -> None: ...
    @typing.overload
    def __init__(self, baseOutputStream: System.IO.Stream, deflater: ICSharpCode.SharpZipLib.Zip.Compression.Deflater, bufferSize: int) -> None: ...
    IsStreamOwner: bool
    CanPatchEntries: bool
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    def Finish(self) -> None: ...
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def get_CanPatchEntries(self) -> bool: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Flush(self) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...

class InflaterInputBuffer:
    @typing.overload
    def __init__(self, stream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, stream: System.IO.Stream, bufferSize: int) -> None: ...
    RawLength: int
    RawData: list[System.Byte]
    ClearTextLength: int
    ClearText: list[System.Byte]
    Available: int
    CryptoTransform: System.Security.Cryptography.ICryptoTransform
    def get_RawLength(self) -> int: ...
    def get_RawData(self) -> list[System.Byte]: ...
    def get_ClearTextLength(self) -> int: ...
    def get_ClearText(self) -> list[System.Byte]: ...
    def get_Available(self) -> int: ...
    def set_Available(self, value: int) -> None: ...
    def SetInflaterInput(self, inflater: ICSharpCode.SharpZipLib.Zip.Compression.Inflater) -> None: ...
    def Fill(self) -> None: ...
    @typing.overload
    def ReadRawBuffer(self, buffer: list[System.Byte]) -> int: ...
    @typing.overload
    def ReadRawBuffer(self, outBuffer: list[System.Byte], offset: int, length: int) -> int: ...
    def ReadClearTextBuffer(self, outBuffer: list[System.Byte], offset: int, length: int) -> int: ...
    def ReadLeByte(self) -> System.Byte: ...
    def ReadLeShort(self) -> int: ...
    def ReadLeInt(self) -> int: ...
    def ReadLeLong(self) -> int: ...
    def set_CryptoTransform(self, value: System.Security.Cryptography.ICryptoTransform) -> None: ...

class InflaterInputStream(System.IO.Stream):
    @typing.overload
    def __init__(self, baseInputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, baseInputStream: System.IO.Stream, inf: ICSharpCode.SharpZipLib.Zip.Compression.Inflater) -> None: ...
    @typing.overload
    def __init__(self, baseInputStream: System.IO.Stream, inflater: ICSharpCode.SharpZipLib.Zip.Compression.Inflater, bufferSize: int) -> None: ...
    IsStreamOwner: bool
    Available: int
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def Skip(self, count: int) -> int: ...
    def get_Available(self) -> int: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Flush(self) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...

class OutputWindow:
    def __init__(self, ) -> None: ...
    def Write(self, value: int) -> None: ...
    def Repeat(self, length: int, distance: int) -> None: ...
    def CopyStored(self, input: StreamManipulator, length: int) -> int: ...
    def CopyDict(self, dictionary: list[System.Byte], offset: int, length: int) -> None: ...
    def GetFreeSpace(self) -> int: ...
    def GetAvailable(self) -> int: ...
    def CopyOutput(self, output: list[System.Byte], offset: int, len: int) -> int: ...
    def Reset(self) -> None: ...

class StreamManipulator:
    def __init__(self, ) -> None: ...
    AvailableBits: int
    AvailableBytes: int
    IsNeedingInput: bool
    def PeekBits(self, bitCount: int) -> int: ...
    @typing.overload
    def TryGetBits(self, bitCount: int, output: System.Int32&, outputOffset: int = 0) -> bool: ...
    @typing.overload
    def TryGetBits(self, bitCount: int, array: System.Byte[]&, index: int) -> bool: ...
    def DropBits(self, bitCount: int) -> None: ...
    def GetBits(self, bitCount: int) -> int: ...
    def get_AvailableBits(self) -> int: ...
    def get_AvailableBytes(self) -> int: ...
    def SkipToByteBoundary(self) -> None: ...
    def get_IsNeedingInput(self) -> bool: ...
    def CopyBytes(self, output: list[System.Byte], offset: int, length: int) -> int: ...
    def Reset(self) -> None: ...
    def SetInput(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...

