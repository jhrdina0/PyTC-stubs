import ICSharpCode.SharpZipLib
import ICSharpCode.SharpZipLib.Core
import ICSharpCode.SharpZipLib.Zip.Compression
import ICSharpCode.SharpZipLib.Zip.Compression.Streams
import System
import System.Collections
import System.IO
import typing

class FastZipEvents:
    def __init__(self, ) -> None: ...
    ProcessFile: ICSharpCode.SharpZipLib.Core.ProcessFileHandler
    Progress: ICSharpCode.SharpZipLib.Core.ProgressHandler
    CompletedFile: ICSharpCode.SharpZipLib.Core.CompletedFileHandler
    DirectoryFailure: ICSharpCode.SharpZipLib.Core.DirectoryFailureHandler
    FileFailure: ICSharpCode.SharpZipLib.Core.FileFailureHandler
    ProgressInterval: System.TimeSpan
    def add_ProcessDirectory(self, value: list[ICSharpCode.SharpZipLib.Core.DirectoryEventArgs]) -> None: ...
    def remove_ProcessDirectory(self, value: list[ICSharpCode.SharpZipLib.Core.DirectoryEventArgs]) -> None: ...
    def OnDirectoryFailure(self, directory: str, e: System.Exception) -> bool: ...
    def OnFileFailure(self, file: str, e: System.Exception) -> bool: ...
    def OnProcessFile(self, file: str) -> bool: ...
    def OnCompletedFile(self, file: str) -> bool: ...
    def OnProcessDirectory(self, directory: str, hasMatchingFiles: bool) -> bool: ...
    def get_ProgressInterval(self) -> System.TimeSpan: ...
    def set_ProgressInterval(self, value: System.TimeSpan) -> None: ...

class FastZip:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, timeSetting: TimeSetting) -> None: ...
    @typing.overload
    def __init__(self, time: System.DateTime) -> None: ...
    @typing.overload
    def __init__(self, events: FastZipEvents) -> None: ...
    CreateEmptyDirectories: bool
    Password: str
    EntryEncryptionMethod: ZipEncryptionMethod
    NameTransform: ICSharpCode.SharpZipLib.Core.INameTransform
    EntryFactory: IEntryFactory
    UseZip64: UseZip64
    RestoreDateTimeOnExtract: bool
    RestoreAttributesOnExtract: bool
    CompressionLevel: ICSharpCode.SharpZipLib.Zip.Compression.Deflater+CompressionLevel
    def get_CreateEmptyDirectories(self) -> bool: ...
    def set_CreateEmptyDirectories(self, value: bool) -> None: ...
    def get_Password(self) -> str: ...
    def set_Password(self, value: str) -> None: ...
    def get_EntryEncryptionMethod(self) -> ZipEncryptionMethod: ...
    def set_EntryEncryptionMethod(self, value: ZipEncryptionMethod) -> None: ...
    def get_NameTransform(self) -> ICSharpCode.SharpZipLib.Core.INameTransform: ...
    def set_NameTransform(self, value: ICSharpCode.SharpZipLib.Core.INameTransform) -> None: ...
    def get_EntryFactory(self) -> IEntryFactory: ...
    def set_EntryFactory(self, value: IEntryFactory) -> None: ...
    def get_UseZip64(self) -> UseZip64: ...
    def set_UseZip64(self, value: UseZip64) -> None: ...
    def get_RestoreDateTimeOnExtract(self) -> bool: ...
    def set_RestoreDateTimeOnExtract(self, value: bool) -> None: ...
    def get_RestoreAttributesOnExtract(self) -> bool: ...
    def set_RestoreAttributesOnExtract(self, value: bool) -> None: ...
    def get_CompressionLevel(self) -> ICSharpCode.SharpZipLib.Zip.Compression.Deflater+CompressionLevel: ...
    def set_CompressionLevel(self, value: ICSharpCode.SharpZipLib.Zip.Compression.Deflater+CompressionLevel) -> None: ...
    @typing.overload
    def CreateZip(self, zipFileName: str, sourceDirectory: str, recurse: bool, fileFilter: str, directoryFilter: str) -> None: ...
    @typing.overload
    def CreateZip(self, zipFileName: str, sourceDirectory: str, recurse: bool, fileFilter: str) -> None: ...
    @typing.overload
    def CreateZip(self, outputStream: System.IO.Stream, sourceDirectory: str, recurse: bool, fileFilter: str, directoryFilter: str) -> None: ...
    @typing.overload
    def CreateZip(self, outputStream: System.IO.Stream, sourceDirectory: str, recurse: bool, fileFilter: str, directoryFilter: str, leaveOpen: bool) -> None: ...
    @typing.overload
    def CreateZip(self, zipFileName: str, sourceDirectory: str, recurse: bool, fileFilter: ICSharpCode.SharpZipLib.Core.IScanFilter, directoryFilter: ICSharpCode.SharpZipLib.Core.IScanFilter) -> None: ...
    @typing.overload
    def CreateZip(self, outputStream: System.IO.Stream, sourceDirectory: str, recurse: bool, fileFilter: ICSharpCode.SharpZipLib.Core.IScanFilter, directoryFilter: ICSharpCode.SharpZipLib.Core.IScanFilter, leaveOpen: bool = False) -> None: ...
    @typing.overload
    def ExtractZip(self, zipFileName: str, targetDirectory: str, fileFilter: str) -> None: ...
    @typing.overload
    def ExtractZip(self, zipFileName: str, targetDirectory: str, overwrite: Overwrite, confirmDelegate: ConfirmOverwriteDelegate, fileFilter: str, directoryFilter: str, restoreDateTime: bool, allowParentTraversal: bool = False) -> None: ...
    @typing.overload
    def ExtractZip(self, inputStream: System.IO.Stream, targetDirectory: str, overwrite: Overwrite, confirmDelegate: ConfirmOverwriteDelegate, fileFilter: str, directoryFilter: str, restoreDateTime: bool, isStreamOwner: bool, allowParentTraversal: bool = False) -> None: ...

class IEntryFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    NameTransform: ICSharpCode.SharpZipLib.Core.INameTransform
    Setting: TimeSetting
    FixedDateTime: System.DateTime
    @typing.overload
    def MakeFileEntry(self, fileName: str) -> ZipEntry: ...
    @typing.overload
    def MakeFileEntry(self, fileName: str, useFileSystem: bool) -> ZipEntry: ...
    @typing.overload
    def MakeFileEntry(self, fileName: str, entryName: str, useFileSystem: bool) -> ZipEntry: ...
    @typing.overload
    def MakeDirectoryEntry(self, directoryName: str) -> ZipEntry: ...
    @typing.overload
    def MakeDirectoryEntry(self, directoryName: str, useFileSystem: bool) -> ZipEntry: ...
    def get_NameTransform(self) -> ICSharpCode.SharpZipLib.Core.INameTransform: ...
    def set_NameTransform(self, value: ICSharpCode.SharpZipLib.Core.INameTransform) -> None: ...
    def get_Setting(self) -> TimeSetting: ...
    def get_FixedDateTime(self) -> System.DateTime: ...

class WindowsNameTransform:
    @typing.overload
    def __init__(self, baseDirectory: str, allowParentTraversal: bool = False) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...
    BaseDirectory: str
    AllowParentTraversal: bool
    TrimIncomingPaths: bool
    Replacement: System.Char
    def get_BaseDirectory(self) -> str: ...
    def set_BaseDirectory(self, value: str) -> None: ...
    def get_AllowParentTraversal(self) -> bool: ...
    def set_AllowParentTraversal(self, value: bool) -> None: ...
    def get_TrimIncomingPaths(self) -> bool: ...
    def set_TrimIncomingPaths(self, value: bool) -> None: ...
    def TransformDirectory(self, name: str) -> str: ...
    def TransformFile(self, name: str) -> str: ...
    @staticmethod
    def IsValidName(name: str) -> bool: ...
    @staticmethod
    def MakeValidName(name: str, replacement: System.Char) -> str: ...
    def get_Replacement(self) -> System.Char: ...
    def set_Replacement(self, value: System.Char) -> None: ...

class UseZip64(System.Enum, int):
    Off: UseZip64 = ...
    On: UseZip64 = ...
    Dynamic: UseZip64 = ...

class CompressionMethod(System.Enum, int):
    Stored: CompressionMethod = ...
    Deflated: CompressionMethod = ...
    Deflate64: CompressionMethod = ...
    BZip2: CompressionMethod = ...
    LZMA: CompressionMethod = ...
    PPMd: CompressionMethod = ...
    WinZipAES: CompressionMethod = ...

class EncryptionAlgorithm(System.Enum, int):
    None: EncryptionAlgorithm = ...
    PkzipClassic: EncryptionAlgorithm = ...
    Des: EncryptionAlgorithm = ...
    RC2: EncryptionAlgorithm = ...
    TripleDes168: EncryptionAlgorithm = ...
    TripleDes112: EncryptionAlgorithm = ...
    Aes128: EncryptionAlgorithm = ...
    Aes192: EncryptionAlgorithm = ...
    Aes256: EncryptionAlgorithm = ...
    RC2Corrected: EncryptionAlgorithm = ...
    Blowfish: EncryptionAlgorithm = ...
    Twofish: EncryptionAlgorithm = ...
    RC4: EncryptionAlgorithm = ...
    Unknown: EncryptionAlgorithm = ...

class GeneralBitFlags(System.Enum, int):
    Encrypted: GeneralBitFlags = ...
    Method: GeneralBitFlags = ...
    Descriptor: GeneralBitFlags = ...
    ReservedPKware4: GeneralBitFlags = ...
    Patched: GeneralBitFlags = ...
    StrongEncryption: GeneralBitFlags = ...
    Unused7: GeneralBitFlags = ...
    Unused8: GeneralBitFlags = ...
    Unused9: GeneralBitFlags = ...
    Unused10: GeneralBitFlags = ...
    UnicodeText: GeneralBitFlags = ...
    EnhancedCompress: GeneralBitFlags = ...
    HeaderMasked: GeneralBitFlags = ...
    ReservedPkware14: GeneralBitFlags = ...
    ReservedPkware15: GeneralBitFlags = ...

class ZipConstants:
    VersionMadeBy: int
    VERSION_MADE_BY: int
    VersionStrongEncryption: int
    VERSION_STRONG_ENCRYPTION: int
    VERSION_AES: int
    VersionZip64: int
    VersionBZip2: int
    LocalHeaderBaseSize: int
    LOCHDR: int
    Zip64DataDescriptorSize: int
    DataDescriptorSize: int
    EXTHDR: int
    CentralHeaderBaseSize: int
    CENHDR: int
    EndOfCentralRecordBaseSize: int
    ENDHDR: int
    CryptoHeaderSize: int
    CRYPTO_HEADER_SIZE: int
    Zip64EndOfCentralDirectoryLocatorSize: int
    LocalHeaderSignature: int
    LOCSIG: int
    SpanningSignature: int
    SPANNINGSIG: int
    SpanningTempSignature: int
    SPANTEMPSIG: int
    DataDescriptorSignature: int
    EXTSIG: int
    CENSIG: int
    CentralHeaderSignature: int
    Zip64CentralFileHeaderSignature: int
    CENSIG64: int
    Zip64CentralDirLocatorSignature: int
    ArchiveExtraDataSignature: int
    CentralHeaderDigitalSignature: int
    CENDIGITALSIG: int
    EndOfCentralDirectorySignature: int
    ENDSIG: int
    DefaultCodePage: int
    @staticmethod
    def get_DefaultCodePage() -> int: ...
    @staticmethod
    def set_DefaultCodePage(value: int) -> None: ...
    @staticmethod
    @typing.overload
    def ConvertToString(data: list[System.Byte], count: int) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToString(data: list[System.Byte]) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToStringExt(flags: int, data: list[System.Byte], count: int) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToStringExt(flags: int, data: list[System.Byte]) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToArray(str: str) -> list[System.Byte]: ...
    @staticmethod
    @typing.overload
    def ConvertToArray(flags: int, str: str) -> list[System.Byte]: ...

class ZipEncryptionMethod(System.Enum, int):
    None: ZipEncryptionMethod = ...
    ZipCrypto: ZipEncryptionMethod = ...
    AES128: ZipEncryptionMethod = ...
    AES256: ZipEncryptionMethod = ...

class HostSystemID(System.Enum, int):
    Msdos: HostSystemID = ...
    Amiga: HostSystemID = ...
    OpenVms: HostSystemID = ...
    Unix: HostSystemID = ...
    VMCms: HostSystemID = ...
    AtariST: HostSystemID = ...
    OS2: HostSystemID = ...
    Macintosh: HostSystemID = ...
    ZSystem: HostSystemID = ...
    Cpm: HostSystemID = ...
    WindowsNT: HostSystemID = ...
    MVS: HostSystemID = ...
    Vse: HostSystemID = ...
    AcornRisc: HostSystemID = ...
    Vfat: HostSystemID = ...
    AlternateMvs: HostSystemID = ...
    BeOS: HostSystemID = ...
    Tandem: HostSystemID = ...
    OS400: HostSystemID = ...
    OSX: HostSystemID = ...
    WinZipAES: HostSystemID = ...

class ZipEntry:
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, entry: ZipEntry) -> None: ...
    HasCrc: bool
    IsCrypted: bool
    IsUnicodeText: bool
    Flags: int
    ZipFileIndex: int
    Offset: int
    ExternalFileAttributes: int
    VersionMadeBy: int
    IsDOSEntry: bool
    HostSystem: int
    Version: int
    CanDecompress: bool
    LocalHeaderRequiresZip64: bool
    CentralHeaderRequiresZip64: bool
    DosTime: int
    DateTime: System.DateTime
    Name: str
    Size: int
    CompressedSize: int
    Crc: int
    CompressionMethod: CompressionMethod
    ExtraData: list[System.Byte]
    AESKeySize: int
    Comment: str
    IsDirectory: bool
    IsFile: bool
    def get_HasCrc(self) -> bool: ...
    def get_IsCrypted(self) -> bool: ...
    def set_IsCrypted(self, value: bool) -> None: ...
    def get_IsUnicodeText(self) -> bool: ...
    def set_IsUnicodeText(self, value: bool) -> None: ...
    def get_Flags(self) -> int: ...
    def set_Flags(self, value: int) -> None: ...
    def get_ZipFileIndex(self) -> int: ...
    def set_ZipFileIndex(self, value: int) -> None: ...
    def get_Offset(self) -> int: ...
    def set_Offset(self, value: int) -> None: ...
    def get_ExternalFileAttributes(self) -> int: ...
    def set_ExternalFileAttributes(self, value: int) -> None: ...
    def get_VersionMadeBy(self) -> int: ...
    def get_IsDOSEntry(self) -> bool: ...
    def get_HostSystem(self) -> int: ...
    def set_HostSystem(self, value: int) -> None: ...
    def get_Version(self) -> int: ...
    def get_CanDecompress(self) -> bool: ...
    def ForceZip64(self) -> None: ...
    def IsZip64Forced(self) -> bool: ...
    def get_LocalHeaderRequiresZip64(self) -> bool: ...
    def get_CentralHeaderRequiresZip64(self) -> bool: ...
    def get_DosTime(self) -> int: ...
    def set_DosTime(self, value: int) -> None: ...
    def get_DateTime(self) -> System.DateTime: ...
    def set_DateTime(self, value: System.DateTime) -> None: ...
    def get_Name(self) -> str: ...
    def get_Size(self) -> int: ...
    def set_Size(self, value: int) -> None: ...
    def get_CompressedSize(self) -> int: ...
    def set_CompressedSize(self, value: int) -> None: ...
    def get_Crc(self) -> int: ...
    def set_Crc(self, value: int) -> None: ...
    def get_CompressionMethod(self) -> CompressionMethod: ...
    def set_CompressionMethod(self, value: CompressionMethod) -> None: ...
    def get_ExtraData(self) -> list[System.Byte]: ...
    def set_ExtraData(self, value: list[System.Byte]) -> None: ...
    def get_AESKeySize(self) -> int: ...
    def set_AESKeySize(self, value: int) -> None: ...
    def get_Comment(self) -> str: ...
    def set_Comment(self, value: str) -> None: ...
    def get_IsDirectory(self) -> bool: ...
    def get_IsFile(self) -> bool: ...
    @typing.overload
    def IsCompressionMethodSupported(self) -> bool: ...
    @staticmethod
    @typing.overload
    def IsCompressionMethodSupported(method: CompressionMethod) -> bool: ...
    def Clone(self) -> typing.Any: ...
    def ToString(self) -> str: ...
    @staticmethod
    def CleanName(name: str) -> str: ...

class ZipEntryExtensions:
    @staticmethod
    def HasFlag(entry: ZipEntry, flag: GeneralBitFlags) -> bool: ...
    @staticmethod
    def SetFlag(entry: ZipEntry, flag: GeneralBitFlags, enabled: bool = True) -> None: ...

class ZipEntryFactory:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, timeSetting: TimeSetting) -> None: ...
    @typing.overload
    def __init__(self, time: System.DateTime) -> None: ...
    NameTransform: ICSharpCode.SharpZipLib.Core.INameTransform
    Setting: TimeSetting
    FixedDateTime: System.DateTime
    GetAttributes: int
    SetAttributes: int
    IsUnicodeText: bool
    def get_NameTransform(self) -> ICSharpCode.SharpZipLib.Core.INameTransform: ...
    def set_NameTransform(self, value: ICSharpCode.SharpZipLib.Core.INameTransform) -> None: ...
    def get_Setting(self) -> TimeSetting: ...
    def set_Setting(self, value: TimeSetting) -> None: ...
    def get_FixedDateTime(self) -> System.DateTime: ...
    def set_FixedDateTime(self, value: System.DateTime) -> None: ...
    def get_GetAttributes(self) -> int: ...
    def set_GetAttributes(self, value: int) -> None: ...
    def get_SetAttributes(self) -> int: ...
    def set_SetAttributes(self, value: int) -> None: ...
    def get_IsUnicodeText(self) -> bool: ...
    def set_IsUnicodeText(self, value: bool) -> None: ...
    @typing.overload
    def MakeFileEntry(self, fileName: str) -> ZipEntry: ...
    @typing.overload
    def MakeFileEntry(self, fileName: str, useFileSystem: bool) -> ZipEntry: ...
    @typing.overload
    def MakeFileEntry(self, fileName: str, entryName: str, useFileSystem: bool) -> ZipEntry: ...
    @typing.overload
    def MakeDirectoryEntry(self, directoryName: str) -> ZipEntry: ...
    @typing.overload
    def MakeDirectoryEntry(self, directoryName: str, useFileSystem: bool) -> ZipEntry: ...

class ZipException(ICSharpCode.SharpZipLib.SharpZipBaseException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...

class ITaggedData:
    def __init__(self , *args: typing.Any) -> None: ...
    TagID: int
    def get_TagID(self) -> int: ...
    def SetData(self, data: list[System.Byte], offset: int, count: int) -> None: ...
    def GetData(self) -> list[System.Byte]: ...

class RawTaggedData:
    def __init__(self, tag: int) -> None: ...
    TagID: int
    Data: list[System.Byte]
    def get_TagID(self) -> int: ...
    def set_TagID(self, value: int) -> None: ...
    def SetData(self, data: list[System.Byte], offset: int, count: int) -> None: ...
    def GetData(self) -> list[System.Byte]: ...
    def get_Data(self) -> list[System.Byte]: ...
    def set_Data(self, value: list[System.Byte]) -> None: ...

class ExtendedUnixData:
    def __init__(self, ) -> None: ...
    TagID: int
    ModificationTime: System.DateTime
    AccessTime: System.DateTime
    CreateTime: System.DateTime
    Include: Flags
    def get_TagID(self) -> int: ...
    def SetData(self, data: list[System.Byte], index: int, count: int) -> None: ...
    def GetData(self) -> list[System.Byte]: ...
    @staticmethod
    def IsValidValue(value: System.DateTime) -> bool: ...
    def get_ModificationTime(self) -> System.DateTime: ...
    def set_ModificationTime(self, value: System.DateTime) -> None: ...
    def get_AccessTime(self) -> System.DateTime: ...
    def set_AccessTime(self, value: System.DateTime) -> None: ...
    def get_CreateTime(self) -> System.DateTime: ...
    def set_CreateTime(self, value: System.DateTime) -> None: ...
    def get_Include(self) -> Flags: ...
    def set_Include(self, value: Flags) -> None: ...

class NTTaggedData:
    def __init__(self, ) -> None: ...
    TagID: int
    LastModificationTime: System.DateTime
    CreateTime: System.DateTime
    LastAccessTime: System.DateTime
    def get_TagID(self) -> int: ...
    def SetData(self, data: list[System.Byte], index: int, count: int) -> None: ...
    def GetData(self) -> list[System.Byte]: ...
    @staticmethod
    def IsValidValue(value: System.DateTime) -> bool: ...
    def get_LastModificationTime(self) -> System.DateTime: ...
    def set_LastModificationTime(self, value: System.DateTime) -> None: ...
    def get_CreateTime(self) -> System.DateTime: ...
    def set_CreateTime(self, value: System.DateTime) -> None: ...
    def get_LastAccessTime(self) -> System.DateTime: ...
    def set_LastAccessTime(self, value: System.DateTime) -> None: ...

class ITaggedDataFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, tag: int, data: list[System.Byte], offset: int, count: int) -> ITaggedData: ...

class ZipExtraData:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, data: list[System.Byte]) -> None: ...
    Length: int
    ValueLength: int
    CurrentReadIndex: int
    UnreadCount: int
    def GetEntryData(self) -> list[System.Byte]: ...
    def Clear(self) -> None: ...
    def get_Length(self) -> int: ...
    def GetStreamForTag(self, tag: int) -> System.IO.Stream: ...
    def GetData(self) -> T: ...
    def get_ValueLength(self) -> int: ...
    def get_CurrentReadIndex(self) -> int: ...
    def get_UnreadCount(self) -> int: ...
    def Find(self, headerID: int) -> bool: ...
    @typing.overload
    def AddEntry(self, taggedData: ITaggedData) -> None: ...
    @typing.overload
    def AddEntry(self, headerID: int, fieldData: list[System.Byte]) -> None: ...
    def StartNewEntry(self) -> None: ...
    def AddNewEntry(self, headerID: int) -> None: ...
    @typing.overload
    def AddData(self, data: System.Byte) -> None: ...
    @typing.overload
    def AddData(self, data: list[System.Byte]) -> None: ...
    def AddLeShort(self, toAdd: int) -> None: ...
    def AddLeInt(self, toAdd: int) -> None: ...
    def AddLeLong(self, toAdd: int) -> None: ...
    def Delete(self, headerID: int) -> bool: ...
    def ReadLong(self) -> int: ...
    def ReadInt(self) -> int: ...
    def ReadShort(self) -> int: ...
    def ReadByte(self) -> int: ...
    def Skip(self, amount: int) -> None: ...
    def Dispose(self) -> None: ...

class KeysRequiredEventArgs(System.EventArgs):
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, keyValue: list[System.Byte]) -> None: ...
    FileName: str
    Key: list[System.Byte]
    def get_FileName(self) -> str: ...
    def get_Key(self) -> list[System.Byte]: ...
    def set_Key(self, value: list[System.Byte]) -> None: ...

class TestStrategy(System.Enum, int):
    FindFirstError: TestStrategy = ...
    FindAllErrors: TestStrategy = ...

class TestOperation(System.Enum, int):
    Initialising: TestOperation = ...
    EntryHeader: TestOperation = ...
    EntryData: TestOperation = ...
    EntryComplete: TestOperation = ...
    MiscellaneousTests: TestOperation = ...
    Complete: TestOperation = ...

class TestStatus:
    def __init__(self, file: ZipFile) -> None: ...
    Operation: TestOperation
    File: ZipFile
    Entry: ZipEntry
    ErrorCount: int
    BytesTested: int
    EntryValid: bool
    def get_Operation(self) -> TestOperation: ...
    def get_File(self) -> ZipFile: ...
    def get_Entry(self) -> ZipEntry: ...
    def get_ErrorCount(self) -> int: ...
    def get_BytesTested(self) -> int: ...
    def get_EntryValid(self) -> bool: ...

class ZipTestResultHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, status: TestStatus, message: str) -> None: ...
    def BeginInvoke(self, status: TestStatus, message: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class FileUpdateMode(System.Enum, int):
    Safe: FileUpdateMode = ...
    Direct: FileUpdateMode = ...

class ZipFile:
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, file: System.IO.FileStream) -> None: ...
    @typing.overload
    def __init__(self, file: System.IO.FileStream, leaveOpen: bool) -> None: ...
    @typing.overload
    def __init__(self, stream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, stream: System.IO.Stream, leaveOpen: bool) -> None: ...
    KeysRequired: KeysRequiredEventHandler
    Password: str
    IsStreamOwner: bool
    IsEmbeddedArchive: bool
    IsNewArchive: bool
    ZipFileComment: str
    Name: str
    Size: int
    Count: int
    EntryByIndex: ZipEntry
    NameTransform: ICSharpCode.SharpZipLib.Core.INameTransform
    EntryFactory: IEntryFactory
    BufferSize: int
    IsUpdating: bool
    UseZip64: UseZip64
    def set_Password(self, value: str) -> None: ...
    def Close(self) -> None: ...
    @staticmethod
    @typing.overload
    def Create(fileName: str) -> ZipFile: ...
    @staticmethod
    @typing.overload
    def Create(outStream: System.IO.Stream) -> ZipFile: ...
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def get_IsEmbeddedArchive(self) -> bool: ...
    def get_IsNewArchive(self) -> bool: ...
    def get_ZipFileComment(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Size(self) -> int: ...
    def get_Count(self) -> int: ...
    def get_EntryByIndex(self, index: int) -> ZipEntry: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def FindEntry(self, name: str, ignoreCase: bool) -> int: ...
    def GetEntry(self, name: str) -> ZipEntry: ...
    @typing.overload
    def GetInputStream(self, entry: ZipEntry) -> System.IO.Stream: ...
    @typing.overload
    def GetInputStream(self, entryIndex: int) -> System.IO.Stream: ...
    @typing.overload
    def TestArchive(self, testData: bool) -> bool: ...
    @typing.overload
    def TestArchive(self, testData: bool, strategy: TestStrategy, resultHandler: ZipTestResultHandler) -> bool: ...
    def get_NameTransform(self) -> ICSharpCode.SharpZipLib.Core.INameTransform: ...
    def set_NameTransform(self, value: ICSharpCode.SharpZipLib.Core.INameTransform) -> None: ...
    def get_EntryFactory(self) -> IEntryFactory: ...
    def set_EntryFactory(self, value: IEntryFactory) -> None: ...
    def get_BufferSize(self) -> int: ...
    def set_BufferSize(self, value: int) -> None: ...
    def get_IsUpdating(self) -> bool: ...
    def get_UseZip64(self) -> UseZip64: ...
    def set_UseZip64(self, value: UseZip64) -> None: ...
    @typing.overload
    def BeginUpdate(self, archiveStorage: IArchiveStorage, dataSource: IDynamicDataSource) -> None: ...
    @typing.overload
    def BeginUpdate(self, archiveStorage: IArchiveStorage) -> None: ...
    @typing.overload
    def BeginUpdate(self) -> None: ...
    def CommitUpdate(self) -> None: ...
    def AbortUpdate(self) -> None: ...
    def SetComment(self, comment: str) -> None: ...
    @typing.overload
    def Add(self, fileName: str, compressionMethod: CompressionMethod, useUnicodeText: bool) -> None: ...
    @typing.overload
    def Add(self, fileName: str, compressionMethod: CompressionMethod) -> None: ...
    @typing.overload
    def Add(self, fileName: str) -> None: ...
    @typing.overload
    def Add(self, fileName: str, entryName: str) -> None: ...
    @typing.overload
    def Add(self, dataSource: IStaticDataSource, entryName: str) -> None: ...
    @typing.overload
    def Add(self, dataSource: IStaticDataSource, entryName: str, compressionMethod: CompressionMethod) -> None: ...
    @typing.overload
    def Add(self, dataSource: IStaticDataSource, entryName: str, compressionMethod: CompressionMethod, useUnicodeText: bool) -> None: ...
    @typing.overload
    def Add(self, entry: ZipEntry) -> None: ...
    @typing.overload
    def Add(self, dataSource: IStaticDataSource, entry: ZipEntry) -> None: ...
    def AddDirectory(self, directoryName: str) -> None: ...
    @typing.overload
    def Delete(self, fileName: str) -> bool: ...
    @typing.overload
    def Delete(self, entry: ZipEntry) -> None: ...

class IStaticDataSource:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetSource(self) -> System.IO.Stream: ...

class IDynamicDataSource:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetSource(self, entry: ZipEntry, name: str) -> System.IO.Stream: ...

class StaticDiskDataSource:
    def __init__(self, fileName: str) -> None: ...
    def GetSource(self) -> System.IO.Stream: ...

class DynamicDiskDataSource:
    def __init__(self, ) -> None: ...
    def GetSource(self, entry: ZipEntry, name: str) -> System.IO.Stream: ...

class IArchiveStorage:
    def __init__(self , *args: typing.Any) -> None: ...
    UpdateMode: FileUpdateMode
    def get_UpdateMode(self) -> FileUpdateMode: ...
    def GetTemporaryOutput(self) -> System.IO.Stream: ...
    def ConvertTemporaryToFinal(self) -> System.IO.Stream: ...
    def MakeTemporaryCopy(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def OpenForDirectUpdate(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def Dispose(self) -> None: ...

class BaseArchiveStorage:
    UpdateMode: FileUpdateMode
    def GetTemporaryOutput(self) -> System.IO.Stream: ...
    def ConvertTemporaryToFinal(self) -> System.IO.Stream: ...
    def MakeTemporaryCopy(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def OpenForDirectUpdate(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def Dispose(self) -> None: ...
    def get_UpdateMode(self) -> FileUpdateMode: ...

class DiskArchiveStorage(BaseArchiveStorage):
    @typing.overload
    def __init__(self, file: ZipFile, updateMode: FileUpdateMode) -> None: ...
    @typing.overload
    def __init__(self, file: ZipFile) -> None: ...
    def GetTemporaryOutput(self) -> System.IO.Stream: ...
    def ConvertTemporaryToFinal(self) -> System.IO.Stream: ...
    def MakeTemporaryCopy(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def OpenForDirectUpdate(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def Dispose(self) -> None: ...

class MemoryArchiveStorage(BaseArchiveStorage):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, updateMode: FileUpdateMode) -> None: ...
    FinalStream: System.IO.MemoryStream
    def get_FinalStream(self) -> System.IO.MemoryStream: ...
    def GetTemporaryOutput(self) -> System.IO.Stream: ...
    def ConvertTemporaryToFinal(self) -> System.IO.Stream: ...
    def MakeTemporaryCopy(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def OpenForDirectUpdate(self, stream: System.IO.Stream) -> System.IO.Stream: ...
    def Dispose(self) -> None: ...

class DescriptorData:
    def __init__(self, ) -> None: ...
    CompressedSize: int
    Size: int
    Crc: int
    def get_CompressedSize(self) -> int: ...
    def set_CompressedSize(self, value: int) -> None: ...
    def get_Size(self) -> int: ...
    def set_Size(self, value: int) -> None: ...
    def get_Crc(self) -> int: ...
    def set_Crc(self, value: int) -> None: ...

class EntryPatchData:
    def __init__(self, ) -> None: ...
    SizePatchOffset: int
    CrcPatchOffset: int
    def get_SizePatchOffset(self) -> int: ...
    def set_SizePatchOffset(self, value: int) -> None: ...
    def get_CrcPatchOffset(self) -> int: ...
    def set_CrcPatchOffset(self, value: int) -> None: ...

class ZipHelperStream(System.IO.Stream):
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, stream: System.IO.Stream) -> None: ...
    IsStreamOwner: bool
    CanRead: bool
    CanSeek: bool
    CanTimeout: bool
    Length: int
    Position: int
    CanWrite: bool
    def get_IsStreamOwner(self) -> bool: ...
    def set_IsStreamOwner(self, value: bool) -> None: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanTimeout(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def get_CanWrite(self) -> bool: ...
    def Flush(self) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def LocateBlockWithSignature(self, signature: int, endLocation: int, minimumBlockSize: int, maximumVariableData: int) -> int: ...
    def WriteZip64EndOfCentralDirectory(self, noOfEntries: int, sizeEntries: int, centralDirOffset: int) -> None: ...
    def WriteEndOfCentralDirectory(self, noOfEntries: int, sizeEntries: int, startOfCentralDirectory: int, comment: list[System.Byte]) -> None: ...
    def ReadLEShort(self) -> int: ...
    def ReadLEInt(self) -> int: ...
    def ReadLELong(self) -> int: ...
    def WriteLEShort(self, value: int) -> None: ...
    def WriteLEUshort(self, value: System.UInt16) -> None: ...
    def WriteLEInt(self, value: int) -> None: ...
    def WriteLEUint(self, value: System.UInt32) -> None: ...
    def WriteLELong(self, value: int) -> None: ...
    def WriteLEUlong(self, value: System.UInt64) -> None: ...
    def WriteDataDescriptor(self, entry: ZipEntry) -> int: ...
    def ReadDataDescriptor(self, zip64: bool, data: DescriptorData) -> None: ...

class ZipInputStream(ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream):
    @typing.overload
    def __init__(self, baseInputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, baseInputStream: System.IO.Stream, bufferSize: int) -> None: ...
    Password: str
    CanDecompressEntry: bool
    Available: int
    Length: int
    def get_Password(self) -> str: ...
    def set_Password(self, value: str) -> None: ...
    def get_CanDecompressEntry(self) -> bool: ...
    def GetNextEntry(self) -> ZipEntry: ...
    def CloseEntry(self) -> None: ...
    def get_Available(self) -> int: ...
    def get_Length(self) -> int: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...

class ZipNameTransform:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, trimPrefix: str) -> None: ...
    TrimPrefix: str
    def TransformDirectory(self, name: str) -> str: ...
    def TransformFile(self, name: str) -> str: ...
    def get_TrimPrefix(self) -> str: ...
    def set_TrimPrefix(self, value: str) -> None: ...
    @staticmethod
    @typing.overload
    def IsValidName(name: str, relaxed: bool) -> bool: ...
    @staticmethod
    @typing.overload
    def IsValidName(name: str) -> bool: ...

class PathTransformer:
    def __init__(self, ) -> None: ...
    def TransformDirectory(self, name: str) -> str: ...
    def TransformFile(self, name: str) -> str: ...

class ZipOutputStream(ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream):
    @typing.overload
    def __init__(self, baseOutputStream: System.IO.Stream) -> None: ...
    @typing.overload
    def __init__(self, baseOutputStream: System.IO.Stream, bufferSize: int) -> None: ...
    IsFinished: bool
    UseZip64: UseZip64
    NameTransform: ICSharpCode.SharpZipLib.Core.INameTransform
    Password: str
    def get_IsFinished(self) -> bool: ...
    def SetComment(self, comment: str) -> None: ...
    def SetLevel(self, level: int) -> None: ...
    def GetLevel(self) -> int: ...
    def get_UseZip64(self) -> UseZip64: ...
    def set_UseZip64(self, value: UseZip64) -> None: ...
    def get_NameTransform(self) -> ICSharpCode.SharpZipLib.Core.INameTransform: ...
    def set_NameTransform(self, value: ICSharpCode.SharpZipLib.Core.INameTransform) -> None: ...
    def get_Password(self) -> str: ...
    def set_Password(self, value: str) -> None: ...
    def PutNextEntry(self, entry: ZipEntry) -> None: ...
    def CloseEntry(self) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def Finish(self) -> None: ...
    def Flush(self) -> None: ...

class ZipStrings:
    CodePage: int
    SystemDefaultCodePage: int
    UseUnicode: bool
    @staticmethod
    def get_CodePage() -> int: ...
    @staticmethod
    def set_CodePage(value: int) -> None: ...
    @staticmethod
    def get_SystemDefaultCodePage() -> int: ...
    @staticmethod
    def get_UseUnicode() -> bool: ...
    @staticmethod
    def set_UseUnicode(value: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ConvertToString(data: list[System.Byte], count: int) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToString(data: list[System.Byte]) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToStringExt(flags: int, data: list[System.Byte], count: int) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToStringExt(flags: int, data: list[System.Byte]) -> str: ...
    @staticmethod
    @typing.overload
    def ConvertToArray(str: str) -> list[System.Byte]: ...
    @staticmethod
    @typing.overload
    def ConvertToArray(flags: int, str: str) -> list[System.Byte]: ...

class Overwrite(System.Enum, int):
    Prompt: Overwrite = ...
    Never: Overwrite = ...
    Always: Overwrite = ...

class ConfirmOverwriteDelegate(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, fileName: str) -> bool: ...
    def BeginInvoke(self, fileName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> bool: ...

class Known(System.Enum, int):
    None: Known = ...
    Size: Known = ...
    CompressedSize: Known = ...
    Crc: Known = ...
    Time: Known = ...
    ExternalAttributes: Known = ...

class TimeSetting(System.Enum, int):
    LastWriteTime: TimeSetting = ...
    LastWriteTimeUtc: TimeSetting = ...
    CreateTime: TimeSetting = ...
    CreateTimeUtc: TimeSetting = ...
    LastAccessTime: TimeSetting = ...
    LastAccessTimeUtc: TimeSetting = ...
    Fixed: TimeSetting = ...

class Flags(System.Enum, int):
    ModificationTime: Flags = ...
    AccessTime: Flags = ...
    CreateTime: Flags = ...

class KeysRequiredEventHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: KeysRequiredEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: KeysRequiredEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class HeaderTest(System.Enum, int):
    Extract: HeaderTest = ...
    Header: HeaderTest = ...

class UpdateCommand(System.Enum, int):
    Copy: UpdateCommand = ...
    Modify: UpdateCommand = ...
    Add: UpdateCommand = ...

class UpdateComparer:
    def __init__(self, ) -> None: ...
    def Compare(self, x: ZipUpdate, y: ZipUpdate) -> int: ...

class ZipUpdate:
    @typing.overload
    def __init__(self, fileName: str, entry: ZipEntry) -> None: ...
    @typing.overload
    def __init__(self, fileName: str, entryName: str, compressionMethod: CompressionMethod) -> None: ...
    @typing.overload
    def __init__(self, fileName: str, entryName: str) -> None: ...
    @typing.overload
    def __init__(self, dataSource: IStaticDataSource, entryName: str, compressionMethod: CompressionMethod) -> None: ...
    @typing.overload
    def __init__(self, dataSource: IStaticDataSource, entry: ZipEntry) -> None: ...
    @typing.overload
    def __init__(self, original: ZipEntry, updated: ZipEntry) -> None: ...
    @typing.overload
    def __init__(self, command: UpdateCommand, entry: ZipEntry) -> None: ...
    @typing.overload
    def __init__(self, entry: ZipEntry) -> None: ...
    Entry: ZipEntry
    OutEntry: ZipEntry
    Command: UpdateCommand
    Filename: str
    SizePatchOffset: int
    CrcPatchOffset: int
    OffsetBasedSize: int
    def get_Entry(self) -> ZipEntry: ...
    def get_OutEntry(self) -> ZipEntry: ...
    def get_Command(self) -> UpdateCommand: ...
    def get_Filename(self) -> str: ...
    def get_SizePatchOffset(self) -> int: ...
    def set_SizePatchOffset(self, value: int) -> None: ...
    def get_CrcPatchOffset(self) -> int: ...
    def set_CrcPatchOffset(self, value: int) -> None: ...
    def get_OffsetBasedSize(self) -> int: ...
    def set_OffsetBasedSize(self, value: int) -> None: ...
    def GetSource(self) -> System.IO.Stream: ...

class ZipString:
    @typing.overload
    def __init__(self, comment: str) -> None: ...
    @typing.overload
    def __init__(self, rawString: list[System.Byte]) -> None: ...
    IsSourceString: bool
    RawLength: int
    RawComment: list[System.Byte]
    def get_IsSourceString(self) -> bool: ...
    def get_RawLength(self) -> int: ...
    def get_RawComment(self) -> list[System.Byte]: ...
    def Reset(self) -> None: ...
    @staticmethod
    def op_Implicit(zipString: ZipString) -> str: ...

class ZipEntryEnumerator:
    def __init__(self, entries: list[ZipEntry]) -> None: ...
    Current: typing.Any
    def get_Current(self) -> typing.Any: ...
    def Reset(self) -> None: ...
    def MoveNext(self) -> bool: ...

class UncompressedStream(System.IO.Stream):
    def __init__(self, baseStream: System.IO.Stream) -> None: ...
    CanRead: bool
    CanWrite: bool
    CanSeek: bool
    Length: int
    Position: int
    def get_CanRead(self) -> bool: ...
    def Flush(self) -> None: ...
    def get_CanWrite(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...

class PartialInputStream(System.IO.Stream):
    def __init__(self, zipFile: ZipFile, start: int, length: int) -> None: ...
    Position: int
    Length: int
    CanWrite: bool
    CanSeek: bool
    CanRead: bool
    CanTimeout: bool
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def SetLength(self, value: int) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def Flush(self) -> None: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def get_Length(self) -> int: ...
    def get_CanWrite(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanRead(self) -> bool: ...
    def get_CanTimeout(self) -> bool: ...

class ReadDataHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, b: list[System.Byte], offset: int, length: int) -> int: ...
    def BeginInvoke(self, b: list[System.Byte], offset: int, length: int, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> int: ...

