import System
import System.Collections.Generic
import typing

class FMSTicketF100(FMSTicketV1):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, ticketString: str) -> None: ...
    @typing.overload
    def __init__(self, ticket: str, isEncoded: bool) -> None: ...
    VERSION: str
    FileGUID: str
    DeleteFlag: bool
    ExpirationDate: System.DateTime
    Expires: int
    SiteID: str
    UserID: str
    VolumeID: str
    DefaultURI: str
    RelativePath: str
    def get_FileGUID(self) -> str: ...
    def set_FileGUID(self, value: str) -> None: ...
    def get_DeleteFlag(self) -> bool: ...
    def set_DeleteFlag(self, value: bool) -> None: ...
    def get_ExpirationDate(self) -> System.DateTime: ...
    def set_ExpirationDate(self, value: System.DateTime) -> None: ...
    def set_Expires(self, value: int) -> None: ...
    def get_SiteID(self) -> str: ...
    def set_SiteID(self, value: str) -> None: ...
    def get_UserID(self) -> str: ...
    def set_UserID(self, value: str) -> None: ...
    def get_VolumeID(self) -> str: ...
    def set_VolumeID(self, value: str) -> None: ...
    def get_DefaultURI(self) -> str: ...
    def set_DefaultURI(self, value: str) -> None: ...
    def get_RelativePath(self) -> str: ...
    def set_RelativePath(self, value: str) -> None: ...
    @staticmethod
    def GenerateTicket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, uri: str, path: str, deleteflag: bool) -> str: ...

class FMSTicketM050(FMSTicketV1):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, ticketString: str) -> None: ...
    @typing.overload
    def __init__(self, ticket: str, isEncoded: bool) -> None: ...
    VERSION: str
    FileGUID: str
    DoNotCache: bool
    ConsistencyDate: System.DateTime
    ConsistencyExpiresIn: int
    SystemID: str
    UserID: str
    ExpirationDate: System.DateTime
    ExpiresIn: int
    NumFileSystems: int
    FileSystems: list[str]
    RelativePath: str
    IsTextNormalizedForTransport: bool
    def get_FileGUID(self) -> str: ...
    def set_FileGUID(self, value: str) -> None: ...
    def get_DoNotCache(self) -> bool: ...
    def set_DoNotCache(self, value: bool) -> None: ...
    def get_ConsistencyDate(self) -> System.DateTime: ...
    def set_ConsistencyDate(self, value: System.DateTime) -> None: ...
    def set_ConsistencyExpiresIn(self, value: int) -> None: ...
    def get_SystemID(self) -> str: ...
    def set_SystemID(self, value: str) -> None: ...
    def get_UserID(self) -> str: ...
    def set_UserID(self, value: str) -> None: ...
    def get_ExpirationDate(self) -> System.DateTime: ...
    def set_ExpirationDate(self, value: System.DateTime) -> None: ...
    def set_ExpiresIn(self, value: int) -> None: ...
    def get_NumFileSystems(self) -> int: ...
    def get_FileSystems(self) -> list[str]: ...
    def set_FileSystems(self, value: list[str]) -> None: ...
    def get_RelativePath(self) -> str: ...
    def set_RelativePath(self, value: str) -> None: ...
    def get_IsTextNormalizedForTransport(self) -> bool: ...
    @staticmethod
    def GenerateTicket(key: list[System.Byte], mode: str, binary: bool, fileguid: str, donotcache: bool, consistencyminutes: int, systemid: str, userid: str, expiresminutes: int, filesystems: list[str], relpath: str) -> str: ...

class FMSTicketN050(FMSTicketV1):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, ticketString: str) -> None: ...
    @typing.overload
    def __init__(self, ticket: str, isEncoded: bool) -> None: ...
    VERSION: str
    FileGUID: str
    DoNotCache: bool
    ConsistencyDate: System.DateTime
    ConsistencyExpiresIn: int
    SystemID: str
    UserID: str
    ExpirationDate: System.DateTime
    ExpiresIn: int
    NumFileSystems: int
    FileSystems: list[str]
    RelativePath: str
    IsTextNormalizedForTransport: bool
    def get_FileGUID(self) -> str: ...
    def set_FileGUID(self, value: str) -> None: ...
    def get_DoNotCache(self) -> bool: ...
    def set_DoNotCache(self, value: bool) -> None: ...
    def get_ConsistencyDate(self) -> System.DateTime: ...
    def set_ConsistencyDate(self, value: System.DateTime) -> None: ...
    def set_ConsistencyExpiresIn(self, value: int) -> None: ...
    def get_SystemID(self) -> str: ...
    def set_SystemID(self, value: str) -> None: ...
    def get_UserID(self) -> str: ...
    def set_UserID(self, value: str) -> None: ...
    def get_ExpirationDate(self) -> System.DateTime: ...
    def set_ExpirationDate(self, value: System.DateTime) -> None: ...
    def set_ExpiresIn(self, value: int) -> None: ...
    def get_NumFileSystems(self) -> int: ...
    def get_FileSystems(self) -> list[str]: ...
    def set_FileSystems(self, value: list[str]) -> None: ...
    def get_RelativePath(self) -> str: ...
    def set_RelativePath(self, value: str) -> None: ...
    def get_IsTextNormalizedForTransport(self) -> bool: ...
    def supportsOptions(self) -> bool: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldString: str) -> None: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldProperties: dict[str, str]) -> None: ...
    def addTicketOption(self, optionName: str, optionValue: str) -> None: ...
    def getTicketOption(self, optionName: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateTicket(key: list[System.Byte], mode: str, binary: bool, fileguid: str, donotcache: bool, consistencyminutes: int, systemid: str, userid: str, expiresminutes: int, filesystems: list[str], relpath: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateTicket(key: list[System.Byte], mode: str, binary: bool, fileguid: str, donotcache: bool, consistencyminutes: int, systemid: str, userid: str, expiresminutes: int, filesystems: list[str], relpath: str, ticketFieldProperties: dict[str, str]) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateSHA256Ticket(key: list[System.Byte], mode: str, binary: bool, fileguid: str, donotcache: bool, consistencyminutes: int, systemid: str, userid: str, expiresminutes: int, filesystems: list[str], relpath: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateSHA256Ticket(key: list[System.Byte], mode: str, binary: bool, fileguid: str, donotcache: bool, consistencyminutes: int, systemid: str, userid: str, expiresminutes: int, filesystems: list[str], relpath: str, ticketFieldProperties: dict[str, str]) -> str: ...

class FMSTicketT100(FMSTicketV1):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, ticketString: str) -> None: ...
    @typing.overload
    def __init__(self, ticket: str, isEncoded: bool) -> None: ...
    VERSION: str
    FileGUID: str
    DeleteFlag: bool
    ExpirationDate: System.DateTime
    Expires: int
    SiteID: str
    UserID: str
    VolumeID: str
    DefaultURI: str
    RelativePath: str
    def get_FileGUID(self) -> str: ...
    def set_FileGUID(self, value: str) -> None: ...
    def get_DeleteFlag(self) -> bool: ...
    def set_DeleteFlag(self, value: bool) -> None: ...
    def get_ExpirationDate(self) -> System.DateTime: ...
    def set_ExpirationDate(self, value: System.DateTime) -> None: ...
    def set_Expires(self, value: int) -> None: ...
    def get_SiteID(self) -> str: ...
    def set_SiteID(self, value: str) -> None: ...
    def get_UserID(self) -> str: ...
    def set_UserID(self, value: str) -> None: ...
    def get_VolumeID(self) -> str: ...
    def set_VolumeID(self, value: str) -> None: ...
    def get_DefaultURI(self) -> str: ...
    def set_DefaultURI(self, value: str) -> None: ...
    def get_RelativePath(self) -> str: ...
    def set_RelativePath(self, value: str) -> None: ...
    def supportsOptions(self) -> bool: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldString: str) -> None: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldProperties: dict[str, str]) -> None: ...
    def addTicketOption(self, optionName: str, optionValue: str) -> None: ...
    def getTicketOption(self, optionName: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateTicket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, uri: str, path: str, deleteflag: bool) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateTicket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, uri: str, path: str, deleteflag: bool, ticketFieldProperties: dict[str, str]) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateSHA256Ticket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, uri: str, path: str, deleteflag: bool) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateSHA256Ticket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, uri: str, path: str, deleteflag: bool, ticketFieldProperties: dict[str, str]) -> str: ...

class FMSTicketV1:
    def __init__(self, ticketString: str, isEncoded: bool) -> None: ...
    ENCRYPTED_HASH_OFFSET: int
    VER_OFFSET: int
    ACCESS_METHOD_OFFSET: int
    BINARY_FLAG_OFFSET: int
    COMMON_TICKET_LENGTH: int
    TICKET_TYPE_WRITE: str
    TICKET_TYPE_READ: str
    TICKET_TYPE_ADMINWRITE: str
    TICKET_TYPE_ADMINREAD: str
    BINARY_FLAG_TRUE: str
    BINARY_FLAG_FALSE: str
    FMS_SHA256_TICKET_SIGNATURE: str
    IsTextNormalizedForTransport: bool
    HashCode: str
    ApplicationVersion: str
    AccessMethod: str
    BinaryFlag: bool
    NormalizedTextEncoding: str
    NormalizedTextLineTermination: str
    def get_IsTextNormalizedForTransport(self) -> bool: ...
    def get_HashCode(self) -> str: ...
    def set_HashCode(self, value: str) -> None: ...
    def get_ApplicationVersion(self) -> str: ...
    def set_ApplicationVersion(self, value: str) -> None: ...
    def get_AccessMethod(self) -> str: ...
    def set_AccessMethod(self, value: str) -> None: ...
    def get_BinaryFlag(self) -> bool: ...
    def set_BinaryFlag(self, value: bool) -> None: ...
    def supportsOptions(self) -> bool: ...
    @staticmethod
    def LookAtVersion(ticket: str) -> str: ...
    def get_NormalizedTextEncoding(self) -> str: ...
    def get_NormalizedTextLineTermination(self) -> str: ...
    def GenerateTicket(self, encryptionKey: list[System.Byte]) -> str: ...
    def GenerateSHA256Ticket(self, encryptionKey: list[System.Byte]) -> str: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldString: str) -> None: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldProperties: dict[str, str]) -> None: ...
    def addTicketOption(self, optionName: str, optionValue: str) -> None: ...
    def getTicketOption(self, optionName: str) -> str: ...

class FMSTicketV100(FMSTicketV1):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, ticketString: str) -> None: ...
    @typing.overload
    def __init__(self, ticket: str, isEncoded: bool) -> None: ...
    VERSION: str
    FileGUID: str
    SiteID: str
    ExpirationDate: System.DateTime
    ExpiresIn: int
    UserID: str
    VolumeID: str
    RelativePath: str
    def get_FileGUID(self) -> str: ...
    def set_FileGUID(self, value: str) -> None: ...
    def get_SiteID(self) -> str: ...
    def set_SiteID(self, value: str) -> None: ...
    def get_ExpirationDate(self) -> System.DateTime: ...
    def set_ExpirationDate(self, value: System.DateTime) -> None: ...
    def set_ExpiresIn(self, value: int) -> None: ...
    def get_UserID(self) -> str: ...
    def set_UserID(self, value: str) -> None: ...
    def get_VolumeID(self) -> str: ...
    def set_VolumeID(self, value: str) -> None: ...
    def get_RelativePath(self) -> str: ...
    def set_RelativePath(self, value: str) -> None: ...
    @staticmethod
    def GenerateTicket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, relativePath: str) -> str: ...

class FMSTicketZ100(FMSTicketV1):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, ticketString: str) -> None: ...
    @typing.overload
    def __init__(self, ticket: str, isEncoded: bool) -> None: ...
    VERSION: str
    FileGUID: str
    SiteID: str
    ExpirationDate: System.DateTime
    ExpiresIn: int
    UserID: str
    VolumeID: str
    RelativePath: str
    def get_FileGUID(self) -> str: ...
    def set_FileGUID(self, value: str) -> None: ...
    def get_SiteID(self) -> str: ...
    def set_SiteID(self, value: str) -> None: ...
    def get_ExpirationDate(self) -> System.DateTime: ...
    def set_ExpirationDate(self, value: System.DateTime) -> None: ...
    def set_ExpiresIn(self, value: int) -> None: ...
    def get_UserID(self) -> str: ...
    def set_UserID(self, value: str) -> None: ...
    def get_VolumeID(self) -> str: ...
    def set_VolumeID(self, value: str) -> None: ...
    def get_RelativePath(self) -> str: ...
    def set_RelativePath(self, value: str) -> None: ...
    def supportsOptions(self) -> bool: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldString: str) -> None: ...
    @typing.overload
    def setTicketOptions(self, ticketFieldProperties: dict[str, str]) -> None: ...
    def addTicketOption(self, optionName: str, optionValue: str) -> None: ...
    def getTicketOption(self, optionName: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateTicket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, relativePath: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateTicket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, relativePath: str, ticketFieldProperties: dict[str, str]) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateSHA256Ticket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, relativePath: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenerateSHA256Ticket(key: list[System.Byte], fileguid: str, siteid: str, userid: str, expiresminutes: int, mode: str, binary: bool, volid: str, relativePath: str, ticketFieldProperties: dict[str, str]) -> str: ...

class FMSV1TicketFactory:
    def __init__(self, ) -> None: ...
    @staticmethod
    def GetTicket(unknownTicket: str, isEncoded: bool) -> FMSTicketV1: ...

class TicketEncryption:
    def __init__(self , *args: typing.Any) -> None: ...
    def CreateEncryptedHash(self, plainStr: str, encryptionKey: list[System.Byte]) -> str: ...
    def ValidateEncryptedHash(self, encryptedStr: str, encryptionKey: list[System.Byte]) -> bool: ...
    def ValidateEncryptedSignature(self, SHA256Hash: str, encryptedStr: str, encryptionKey: list[System.Byte]) -> bool: ...

class TicketException(System.SystemException):
    @typing.overload
    def __init__(self, ticketField: str, ticketValue: str) -> None: ...
    @typing.overload
    def __init__(self, ticketField: str) -> None: ...
    @typing.overload
    def __init__(self, ticketField: str, vli: int) -> None: ...
    TicketFieldName: str
    TicketFieldValue: str
    LocalizableMsg: str
    LocalizedMessage: str
    def get_TicketFieldName(self) -> str: ...
    def get_TicketFieldValue(self) -> str: ...
    def get_LocalizableMsg(self) -> str: ...
    def set_LocalizableMsg(self, value: str) -> None: ...
    def get_LocalizedMessage(self) -> str: ...

