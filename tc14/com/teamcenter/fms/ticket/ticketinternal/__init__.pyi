import System
import System.Collections.Generic
import System.Globalization
import System.IO
import System.Reflection
import System.Text
import typing

class FMSTicketConstants:
    def __init__(self, ) -> None: ...
    PACKAGE_NAME: str
    TICKET_FIELD_IS_NULL_1: str
    TICKET_FIELD_IS_TOO_LARGE_3: str
    TICKET_FIELD_LENGTH_INDICATOR_TOO_LARGE_2: str
    UTF8_ENCODING: str
    DEFAULT_TEXT_NORMALIZED_TRANSPORT_ENCODING: str
    LF: str
    CR: str
    CRLF: str
    DEFAULT_TEXT_NORMALIZED_TRANSPORT_LINE_TERMINATION: str

class LocaleMessage:
    def __init__(self, locale: System.Globalization.CultureInfo) -> None: ...
    Locale: System.Globalization.CultureInfo
    def get_Locale(self) -> System.Globalization.CultureInfo: ...
    @staticmethod
    def isEmpty(someString: str) -> bool: ...
    @typing.overload
    def GetMessageFromTextId(self, packageName: str, key: str, bundleArguments: list[typing.Any]) -> str: ...
    @typing.overload
    def GetMessageFromTextId(self, asm: System.Reflection.Assembly, packageName: str, key: str, bundleArguments: list[typing.Any]) -> str: ...
    @typing.overload
    def GetMessageFromTextId(self, packageName: str, key: str) -> str: ...
    @typing.overload
    def GetMessageFromTextId(self, asm: System.Reflection.Assembly, packageName: str, key: str) -> str: ...
    @typing.overload
    def GetMessageFromTextId(self, packageName: str, key: str, defaultValue: str) -> str: ...
    @typing.overload
    def GetMessageFromTextId(self, asm: System.Reflection.Assembly, packageName: str, key: str, defaultValue: str) -> str: ...

class LocalizableMessage:
    def __init__(self, ) -> None: ...
    PARAM_START_CHAR: System.Char
    PARAM_STOP_CHAR: System.Char
    @staticmethod
    @typing.overload
    def PlaceMsgParams(textId: str, param1: str) -> str: ...
    @staticmethod
    @typing.overload
    def PlaceMsgParams(textId: str, params_Renamed: list[str]) -> str: ...
    @staticmethod
    @typing.overload
    def PlaceMsgParams(textId: str, param1: str, param2: str) -> str: ...
    @staticmethod
    @typing.overload
    def PlaceMsgParams(textId: str, param1: str, param2: str, param3: str) -> str: ...
    @staticmethod
    @typing.overload
    def PlaceMsgParams(textId: str, param1: str, param2: str, param3: str, param4: str) -> str: ...
    @staticmethod
    def GetParams(unencodedMsg: str) -> list[typing.Any]: ...
    @staticmethod
    def GetTextId(unencodedMsg: str) -> str: ...

class MicrosoftMD5:
    @staticmethod
    @typing.overload
    def GenMD5(inputStream: System.IO.Stream) -> str: ...
    @staticmethod
    @typing.overload
    def GenMD5(utf8String: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenMD5(byteArray: list[System.Byte]) -> str: ...
    @staticmethod
    def ToAsciiHex(stringIn: list[System.Byte]) -> str: ...

class MicrosoftSHA256:
    @staticmethod
    @typing.overload
    def GenSHA256(inputStream: System.IO.Stream) -> str: ...
    @staticmethod
    @typing.overload
    def GenSHA256(utf8String: str) -> str: ...
    @staticmethod
    @typing.overload
    def GenSHA256(byteArray: list[System.Byte]) -> str: ...
    @staticmethod
    def ToAsciiHex(stringIn: list[System.Byte]) -> str: ...

class RijndaelEncryptionImpl:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, key: list[System.Byte]) -> None: ...
    KEYBITS_128: int
    KEYBITS_192: int
    KEYBITS_256: int
    def RijndaelEncrypt(self, s: str) -> str: ...
    def RijndaelDecrypt(self, s: str) -> str: ...
    @staticmethod
    def main(args: list[str]) -> None: ...
    def CreateEncryptedHash(self, plainStr: str, encryptionKey: list[System.Byte]) -> str: ...
    def ValidateEncryptedHash(self, encodedTicketStr: str, encryptionKey: list[System.Byte]) -> bool: ...
    def ValidateEncryptedSignature(self, SHA256Hash: str, ticketSignature: str, encryptionKey: list[System.Byte]) -> bool: ...
    def SetKey(self, newKey: list[System.Byte]) -> None: ...

class TicketUtil:
    simpleDateFormat: str
    @staticmethod
    @typing.overload
    def AddFixedField(sb: System.Text.StringBuilder, fieldname: str, value: str, fieldlen: int) -> None: ...
    @staticmethod
    @typing.overload
    def AddFixedField(sb: System.Text.StringBuilder, fieldname: str, longvalue: int, fieldlen: int) -> None: ...
    @staticmethod
    @typing.overload
    def AddFixedField(sb: System.Text.StringBuilder, fieldname: str, booleanvalue: bool, fieldlen: int) -> None: ...
    @staticmethod
    @typing.overload
    def AddFixedField(sb: System.Text.StringBuilder, fieldname: str, datevalue: System.DateTime, fieldlen: int) -> None: ...
    @staticmethod
    @typing.overload
    def AddFixedField(sb: System.Text.StringBuilder, fieldname: str, listvalue: list[str], fieldlen: int) -> None: ...
    @staticmethod
    def AddVariableField(sb: System.Text.StringBuilder, fieldname: str, value: str) -> None: ...
    @staticmethod
    def GenerateHash(sbTicket: System.Text.StringBuilder) -> str: ...
    @staticmethod
    def GenerateSHA256Hash(sbTicket: System.Text.StringBuilder) -> str: ...
    @staticmethod
    def ComputeExpiresTime(minutesFromNow: int) -> System.DateTime: ...
    @staticmethod
    def FormatExpiresTime(when: System.DateTime) -> str: ...
    @staticmethod
    def ConvertStringToDate(dateAndTime: str) -> System.DateTime: ...
    @staticmethod
    def ParseTicketTime(dateString: str) -> System.DateTime: ...

class URLUTF8Encoder:
    def __init__(self, ) -> None: ...
    @staticmethod
    @typing.overload
    def Encode(s: str) -> str: ...
    @staticmethod
    @typing.overload
    def Encode(s: str, hexEncodeSpaces: bool) -> str: ...
    @staticmethod
    def Decode(s: str) -> str: ...
    @staticmethod
    def main(args: list[str]) -> int: ...

