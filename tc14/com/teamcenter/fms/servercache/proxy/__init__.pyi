import Serilog
import Serilog.Core
import Serilog.Events
import System
import System.Collections.Generic
import System.Globalization
import System.IO
import System.Net
import Teamcenter.Logging
import com.teamcenter.fms.servercache.proxy.HTTPCommonsEmulator
import com.teamcenter.fms.ticket.ticketinternal
import typing

class CommonsFSCWholeFileIOImpl:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, enableLogging: bool) -> None: ...
    DEFAULT_TIMEOUT_MS: int
    DEFAULT_READ_WRITE_TIMEOUT_MS: int
    TimeoutMS: int
    ReadWriteTimeoutMS: int
    def get_TimeoutMS(self) -> int: ...
    def set_TimeoutMS(self, value: int) -> None: ...
    def get_ReadWriteTimeoutMS(self) -> int: ...
    def set_ReadWriteTimeoutMS(self, value: int) -> None: ...
    def Init(self, clientIPAddress: str, assignedFSCURIs: list[str], bootstrapFSCURIs: list[str]) -> list[str]: ...
    def SetLocale(self, newLocale: System.Globalization.CultureInfo) -> None: ...
    @typing.overload
    def Upload(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTickets: list[str], fullPathToFiles: list[str], textEncoding: str) -> list[str]: ...
    @typing.overload
    def Upload(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTicket: str, fullPathToFile: str, textEncoding: str) -> str: ...
    @typing.overload
    def Upload(self, policy: str, fscServerURIs: list[str], urlEncodedTicket: str, uploadStream: System.IO.Stream, streamLength: int) -> str: ...
    @typing.overload
    def Rollback(self, fscServerURIs: list[str], urlEncodedTicket: str, volumeUID: str) -> None: ...
    @typing.overload
    def Rollback(self, fscServerURIs: list[str], urlEncodedTickets: list[str], volumeUIDs: list[str]) -> None: ...
    @typing.overload
    def Download(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTickets: list[str], fullPathToFiles: list[str], textEncoding: str) -> None: ...
    @typing.overload
    def Download(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTicket: str, fullPathToFile: str, textEncoding: str) -> None: ...
    @typing.overload
    def Download(self, policy: str, fscServerURIs: list[str], urlEncodedTicket: str, downloadStream: System.IO.Stream) -> None: ...
    def Transfer(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, continueOnFail: bool, fscServerURIs: list[str], urlEncodedReadTickets: list[str], urlEncodedWriteTickets: list[str]) -> list[str]: ...
    def GetLocalizer(self) -> com.teamcenter.fms.ticket.ticketinternal.LocaleMessage: ...
    def getFSCIterator(self, overrideFSCs: list[str]) -> FSCIterator: ...

class ConfigValueParser:
    def __init__(self, ) -> None: ...
    @staticmethod
    def ParseLong(strValue: str) -> int: ...
    @staticmethod
    def ParseInt(strValue: str) -> int: ...

class DefaultHttpClientFactory:
    @staticmethod
    def GetHttpClient(logger: Serilog.ILogger) -> com.teamcenter.fms.servercache.proxy.HTTPCommonsEmulator.HttpClient: ...

class FileUtil:
    def __init__(self, ) -> None: ...
    @staticmethod
    def isEncryptedFileSize(fileSize: int) -> bool: ...
    @staticmethod
    def getEncryptedFileCheckBufferSize() -> int: ...
    @staticmethod
    def getEncryptedFileCheckKeyBytes() -> list[System.Byte]: ...
    @staticmethod
    def isEncryptedFileFromBytes(inputBytes: list[System.Byte]) -> bool: ...
    @staticmethod
    def isEncryptedFile(inputFile: System.IO.FileInfo) -> bool: ...

class FMSEncodingStream(System.IO.Stream):
    def __init__(self, sout: System.IO.Stream, asrcEncoding: str, adestEncoding: str, adestLineTerm: str) -> None: ...
    LF: System.Byte
    LF_STR: str
    CR: System.Byte
    CR_STR: str
    CRLF_STR: str
    DEFAULT_BUFFER_SIZE: int
    DestBytes: int
    SrcBytes: int
    NumLFs: int
    NumCRLFs: int
    NumCharBytes: int
    CanRead: bool
    CanSeek: bool
    CanTimeout: bool
    CanWrite: bool
    Length: int
    Position: int
    ReadTimeout: int
    WriteTimeout: int
    def get_DestBytes(self) -> int: ...
    def get_SrcBytes(self) -> int: ...
    def get_NumLFs(self) -> int: ...
    def set_NumLFs(self, value: int) -> None: ...
    def get_NumCRLFs(self) -> int: ...
    def set_NumCRLFs(self, value: int) -> None: ...
    def get_NumCharBytes(self) -> int: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanTimeout(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def get_ReadTimeout(self) -> int: ...
    def set_ReadTimeout(self, value: int) -> None: ...
    def get_WriteTimeout(self) -> int: ...
    def set_WriteTimeout(self, value: int) -> None: ...
    def BeginRead(self, buffer: list[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: typing.Any) -> System.IAsyncResult: ...
    def BeginWrite(self, buffer: list[System.Byte], offset: int, count: int, callback: System.AsyncCallback, state: typing.Any) -> System.IAsyncResult: ...
    def EndRead(self, asyncResult: System.IAsyncResult) -> int: ...
    def EndWrite(self, asyncResult: System.IAsyncResult) -> None: ...
    def ReadByte(self) -> int: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def WriteByte(self, value: System.Byte) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    @typing.overload
    def Write(self, ba: list[System.Byte], off: int, len: int) -> None: ...
    @typing.overload
    def Write(self, s: str) -> None: ...
    def Flush(self) -> None: ...
    def Close(self) -> None: ...
    def RresetStats(self) -> None: ...

class FSCConstants:
    def __init__(self, ) -> None: ...
    PACKAGE_NAME: str
    BOOTSTRAP_URL_REQUEST: str
    BOOTSTRAP_URL_PARAMETER_CLIENT: str
    SERVER_HEADER_NAME: str
    FSC_SERVER_HEADER_PATTERN: str
    HTTP_REQ_USER_AGENT: str
    HTTP_REQ_TIMEOUT: str
    HTTP_REQ_METHOD: str
    HTTP_RESP_ERROR_CODE_PARAMETER: str
    HTTP_RESP_ERROR_INDEX_PARAMETER: str
    HTTP_RESP_ERROR_MSG_PARAMETER: str
    CLIENT_GENERATED_LOCALIZABLE_ERROR_CODE: int
    HTTP_SUCCESS_CODE_200: int
    HTTP_SUCCESS_CODE_204: int
    HTTP_SUCCESS_CODE_206: int
    HTTP_ERROR_CODE_400: int
    HTTP_ERROR_CODE_401: int
    HTTP_ERROR_CODE_404: int
    HTTP_ERROR_CODE_405: int
    HTTP_ERROR_CODE_416: int
    HTTP_ERROR_CODE_500: int
    HTTP_ERROR_CODE_503: int
    HTTP_REQ_TICKET_PARAMETER: str
    HTTP_REQ_POLICY: str
    HTTP_REQ_CORRELATIONID: str
    HTTP_REQ_USER_ACTION: str
    HTTP_REQ_SESSION_ID: str
    HTTP_REQ_ATTEMPT_NUM: str
    HTTP_REQ_FILE_DIGEST: str
    HTTP_RESP_METADATA: str
    HTTP_REQ_ENCRYPTED_PARAMETER: str
    HTTP_RESP_SSO_APP_ID_KEY: str
    HTTP_RESP_SSO_LOGIN_SERVICE_KEY: str
    HTTP_REQ_SSO_TOKEN_USER_NAME: str
    HTTP_REQ_SSO_TOKEN_SESSION_KEY: str
    HTTP_REQ_SSO_COOKIE_KEY: str
    HTTP_REQ_COOKIE_KEY: str
    HTTP_RESP_SET_COOKIE_KEY: str
    HTTP_GET_METHOD: str
    HTTP_POST_METHOD: str
    FSC_PREFERRED_DIGEST_ALGORITHM: str
    DEFAULT_BUFF_SIZE: int
    MINIMUM_BUFF_SIZE: int
    BUFF_SIZE_PROPERTY: str
    FMS_FORMPART_FILEDATA: str
    FMS_FORMPART_UPLOAD_TICKET: str
    FMS_FORMPART_ROLLBACK_FILESTOREID: str
    FMS_FORMPART_ROLLBACK_TICKET: str
    FMS_FORMPART_TRANSFER_WRITE_TICKET: str
    FMS_FORMPART_TRANSFER_READ_TICKET: str
    FMS_FORMPART_RESULT_UPLOAD_SUCCESS_DEST: str
    FMS_FORMPART_RESULT_ROLLBACK_SUCCESS: str
    FMS_FORMPART_RESULT_ERROR: str
    FMS_FORMPART_CONTINUE_ON_ERROR: str
    TEXTID_ERROR_NO_STATUS: str
    STATUS_LINE_ENCODING: str
    ERROR_CLIENT_UNMAPPABLE_0: FSCErrorInfo0
    ERROR_NO_BOOTSTRAP_SERVERS: FSCErrorInfo0
    ERROR_USER_CANCEL_0: FSCErrorInfo0
    ERROR_ALL_SERVERS_FAILED_1: FSCErrorInfo1
    ERROR_ONLY_TCENG_TICKETS_ALLOWED_0: FSCErrorInfo0
    ERROR_VOLUME_FILE_NOT_FOUND_4: FSCErrorInfo4
    ERROR_UNKNOWN_TICKET_TYPE: FSCErrorInfo1
    ERROR_GENERAL_EXCEPTION_1: FSCErrorInfo1
    ERROR_NO_ROUTE_3: FSCErrorInfo3
    ERROR_METHOD_NOT_ALLOWED: FSCErrorInfo0
    ERROR_SIZE_VERIFICATION_FAILURE: FSCErrorInfo2
    ERROR_DIGEST_VERIFICATION_FAILURE: FSCErrorInfo2
    ERROR_HOOK_FAILURE: FSCErrorInfo1
    ERROR_AUTHENTICATION_REQUIRED: FSCErrorInfo1
    DEFAULT_TRANSFER_ENCODING: str
    CONTENT_DISPOSITION: str
    BOUNDARY: str
    CONTENT_TYPE: str
    CHARSET: str
    CONTENT_TRANSFER_ENCODING: str
    FORM_PART_HEADER_DEFAULT_CONTENT_TYPE: str
    FORM_PART_HEADER_DEFAULT_CHARSET: str
    FORM_PART_HEADER_DEFAULT_TRANSFER_ENCODING: str
    DEFAULT_CONTENT_TYPE: str
    DEFAULT_CHARSET: str
    LoggingIsEnabled: bool
    Logger: Serilog.ILogger
    BuffSize: int
    @staticmethod
    def get_LoggingIsEnabled() -> bool: ...
    @staticmethod
    def set_LoggingIsEnabled(value: bool) -> None: ...
    @staticmethod
    def get_Logger() -> Serilog.ILogger: ...
    @staticmethod
    def get_BuffSize() -> int: ...
    @staticmethod
    def formatStringArray(sa: list[str], showNulls: bool) -> str: ...
    @staticmethod
    def fscHttpErrorTypes(httpcode: int) -> bool: ...
    @staticmethod
    def fscLocalizableHttpErrorTypes(httpcode: int) -> bool: ...
    @staticmethod
    def MapNetHttpStatus(netHttpStatusCode: System.Net.HttpStatusCode) -> int: ...
    @staticmethod
    def FSCHttpErrorTypes(httpcode: int) -> bool: ...
    @staticmethod
    def isVerificationError(fscErrorCode: int) -> bool: ...

class FSCErrorInfo:
    def __init__(self, hc: int, ec: int, tid: str) -> None: ...
    httpCode: int
    errorCode: int
    textid: str

class FSCErrorInfo0(FSCErrorInfo):
    def __init__(self, hc: int, ec: int, tid: str) -> None: ...
    LocalizableMsg: str
    def get_LocalizableMsg(self) -> str: ...
    def GetLocalizableMsg(self) -> str: ...

class FSCErrorInfo1(FSCErrorInfo):
    def __init__(self, hc: int, ec: int, tid: str) -> None: ...
    def GetLocalizableMsg(self, param1: str) -> str: ...

class FSCErrorInfo2(FSCErrorInfo):
    def __init__(self, hc: int, ec: int, tid: str) -> None: ...
    def GetLocalizableMsg(self, param1: str, param2: str) -> str: ...

class FSCErrorInfo3(FSCErrorInfo):
    def __init__(self, hc: int, ec: int, tid: str) -> None: ...
    def GetLocalizableMsg(self, param1: str, param2: str, param3: str) -> str: ...

class FSCErrorInfo4(FSCErrorInfo):
    def __init__(self, hc: int, ec: int, tid: str) -> None: ...
    def GetLocalizableMsg(self, param1: str, param2: str, param3: str, param4: str) -> str: ...

class FSCErrorInfoN(FSCErrorInfo):
    def __init__(self, hc: int, ec: int, tid: str) -> None: ...
    def GetLocalizableMsg(self, params_Renamed: list[str]) -> str: ...

class FSCExceptionBase(System.Exception):
    pass

class FSCException(FSCExceptionBase):
    @typing.overload
    def __init__(self, lm: com.teamcenter.fms.ticket.ticketinternal.LocaleMessage, cause: System.Exception, aServerURI: str, httpStatus: int, rawText: str) -> None: ...
    @typing.overload
    def __init__(self, lm: com.teamcenter.fms.ticket.ticketinternal.LocaleMessage, aServerURI: str, httpStatus: int, rawText: str) -> None: ...
    GENERIC_ERROR_CODE: int
    ErrorCode: int
    HttpCode: int
    ErrorIndex: int
    def get_ErrorCode(self) -> int: ...
    def set_ErrorCode(self, value: int) -> None: ...
    def get_HttpCode(self) -> int: ...
    def set_HttpCode(self, value: int) -> None: ...
    def get_ErrorIndex(self) -> int: ...
    def set_ErrorIndex(self, value: int) -> None: ...
    def getMessage(self) -> str: ...

class FSCFailoverException(System.Exception):
    def __init__(self, cause: System.Exception) -> None: ...

class FSCNetClientProxyInfo:
    @staticmethod
    def GetVersion() -> str: ...
    @staticmethod
    def GetBuildDate() -> str: ...
    @staticmethod
    def GetUserAgent() -> str: ...
    @staticmethod
    def main(ignoredArgs: list[str]) -> None: ...

class FSCParallelException(FSCExceptionBase):
    def __init__(self, lm: com.teamcenter.fms.ticket.ticketinternal.LocaleMessage, detailMessage: str, aServerURI: str, results: list[str], errors: list[int], messages: list[str]) -> None: ...
    def GetMessage(self, index: int) -> str: ...
    def getErrorcodes(self) -> list[int]: ...
    def GetLocalizedMessages(self) -> list[str]: ...
    def GetRawMessages(self) -> list[str]: ...
    def GetResultvalues(self) -> list[str]: ...
    def GetServerURI(self) -> str: ...

class InterfaceFSCStreamIO:
    def __init__(self , *args: typing.Any) -> None: ...
    def SetLocale(self, locale: System.Globalization.CultureInfo) -> None: ...
    def Init(self, clientIPAddress: str, assignedFSCURIs: list[str], bootstrapFSCURIs: list[str]) -> list[str]: ...
    def Upload(self, policy: str, fscServerURIs: list[str], urlEncodedTicket: str, uploadStream: System.IO.Stream, streamLength: int) -> str: ...
    def Rollback(self, fscServerURIs: list[str], urlEncodedTicket: str, volumeUID: str) -> None: ...
    def Download(self, policy: str, fscServerURIs: list[str], urlEncodedTicket: str, downloadStream: System.IO.Stream) -> None: ...

class InterfaceFSCWholeFileIO:
    def __init__(self , *args: typing.Any) -> None: ...
    def SetLocale(self, locale: System.Globalization.CultureInfo) -> None: ...
    def Init(self, clientIPAddress: str, assignedFSCURIs: list[str], bootstrapFSCURIs: list[str]) -> list[str]: ...
    @typing.overload
    def Upload(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTicket: str, fullPathToFile: str, textEncoding: str) -> str: ...
    @typing.overload
    def Upload(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTickets: list[str], fullPathToFiles: list[str], textEncoding: str) -> list[str]: ...
    @typing.overload
    def Rollback(self, fscServerURIs: list[str], urlEncodedTicket: str, volumeUID: str) -> None: ...
    @typing.overload
    def Rollback(self, fscServerURIs: list[str], urlEncodedTickets: list[str], volumeUIDs: list[str]) -> None: ...
    @typing.overload
    def Download(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTicket: str, fullPathToFile: str, textEncoding: str) -> None: ...
    @typing.overload
    def Download(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, fscServerURIs: list[str], urlEncodedTickets: list[str], fullPathToFiles: list[str], textEncoding: str) -> None: ...
    def Transfer(self, policy: str, progressIndicator: InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, continueOnFail: bool, fscServerURIs: list[str], urlEncodedReadTickets: list[str], urlEncodedWriteTickets: list[str]) -> list[str]: ...

class InterfaceFSCWholeFileIOProgress:
    def __init__(self , *args: typing.Any) -> None: ...
    def ReportProgress(self, clientObject: typing.Any, fileName: str, bytesDownloaded: int, totalBytes: int, currentFile: int, totalFiles: int) -> bool: ...

class LogCorrelation:
    def __init__(self, ) -> None: ...
    @staticmethod
    def setRequestId() -> None: ...
    @staticmethod
    def getRequestId() -> str: ...
    @staticmethod
    def setUserAction(urlEncodedTicket: str) -> None: ...
    @staticmethod
    def getUserAction() -> str: ...
    @staticmethod
    def getSessionID() -> str: ...
    @staticmethod
    def setCorrelation(urlEncodedTicket: str) -> None: ...
    @staticmethod
    def getLoggingContext() -> Teamcenter.Logging.LogCorrelation: ...
    @staticmethod
    def clearRequestID() -> None: ...
    @staticmethod
    def clearUserAction() -> None: ...
    @staticmethod
    def isValid(value: str) -> bool: ...

class NoOpLog:
    def __init__(self, ) -> None: ...
    Logger: Serilog.ILogger
    def get_Logger(self) -> Serilog.ILogger: ...
    def BindMessageTemplate(self, messageTemplate: str, propertyValues: list[typing.Any], parsedTemplate: Serilog.Events.MessageTemplate&, boundProperties: System.Collections.Generic.IEnumerable`1[[Serilog.Events.LogEventProperty, Serilog, Version=2.0.0.0, Culture=neutral, PublicKeyToken=24c2f752a8e58a10]]&) -> bool: ...
    def BindProperty(self, propertyName: str, value: typing.Any, destructureObjects: bool, property: Serilog.Events.LogEventProperty&) -> bool: ...
    @typing.overload
    def Debug(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Debug(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Debug(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Error(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Error(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Fatal(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Fatal(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def ForContext(self, enricher: Serilog.Core.ILogEventEnricher) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self, enrichers: list[Serilog.Core.ILogEventEnricher]) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self, propertyName: str, value: typing.Any, destructureObjects: bool = False) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self) -> Serilog.ILogger: ...
    @typing.overload
    def ForContext(self, source: System.Type) -> Serilog.ILogger: ...
    @typing.overload
    def Information(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Information(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Information(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    def IsEnabled(self, level: Serilog.Events.LogEventLevel) -> bool: ...
    @typing.overload
    def Verbose(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Verbose(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Verbose(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Warning(self, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Warning(self, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Write(self, logEvent: Serilog.Events.LogEvent) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue: T) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValue0: T0, propertyValue1: T1, propertyValue2: T2) -> None: ...
    @typing.overload
    def Write(self, level: Serilog.Events.LogEventLevel, exception: System.Exception, messageTemplate: str, propertyValues: list[typing.Any]) -> None: ...

class PushbackInputStream(System.IO.Stream):
    def __init__(self, inStream: System.IO.Stream, size: int) -> None: ...
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def Flush(self) -> None: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Close(self) -> None: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Unread(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...

class StringTokenizer:
    def __init__(self, str: str, delim: str) -> None: ...
    HasMoreTokens: bool
    def get_HasMoreTokens(self) -> bool: ...
    def nextToken(self) -> str: ...
    def HasMoreElements(self) -> bool: ...
    def NextElement(self) -> typing.Any: ...
    def CountTokens(self) -> int: ...

class FSCIterator:
    Current: str
    def get_Current(self) -> str: ...
    def Dispose(self) -> None: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...
    def currentFSCIsActive(self) -> None: ...

