import System
import System.Collections
import System.Collections.Generic
import System.IO
import System.Net
import System.Security.Cryptography
import System.Text
import com.teamcenter.fms.servercache.proxy
import com.teamcenter.fms.ticket.ticketinternal
import typing

class AsciiHexUtil:
    def __init__(self, ) -> None: ...
    @staticmethod
    def ToAsciiHex(inBytes: list[System.Byte]) -> list[System.Char]: ...
    @staticmethod
    def AsciiHexToByteArray(asciihexStr: str) -> list[System.Byte]: ...
    @staticmethod
    def BytesEqual(seq1: list[System.Byte], seq2: list[System.Byte]) -> bool: ...

class DigestFormat:
    Version: str
    Certainty: CERTAINTY
    Algorithm: str
    DigestData: list[System.Byte]
    def get_Version(self) -> str: ...
    def get_Certainty(self) -> CERTAINTY: ...
    def get_Algorithm(self) -> str: ...
    def get_DigestData(self) -> list[System.Byte]: ...
    @staticmethod
    def getV1FormattedDigest(auth: CERTAINTY, alg: str, data: list[System.Byte]) -> str: ...
    def getHexFormattedDigest(self) -> str: ...
    @staticmethod
    def parseOne(digeststr: str) -> DigestFormat: ...
    @staticmethod
    def parseMany(multdigeststr: str) -> list[DigestFormat]: ...
    def ToString(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: typing.Any) -> bool: ...

class FilePart(FilePartBase):
    def __init__(self, name: str, fps: FilePartSource, contentType: str, charset: str) -> None: ...
    Fps: FilePartSource
    def get_Fps(self) -> FilePartSource: ...
    def GetSource(self) -> FilePartSource: ...

class FilePartBase(Part):
    def __init__(self, name: str, filename: str, contentType: str, charset: str) -> None: ...
    Filename: str
    def get_Filename(self) -> str: ...

class FilePartSource:
    @typing.overload
    def __init__(self, file: System.IO.FileInfo) -> None: ...
    @typing.overload
    def __init__(self, fileName: str, file: System.IO.FileInfo) -> None: ...
    Length: int
    Filename: str
    def get_Length(self) -> int: ...
    def get_Filename(self) -> str: ...
    def CreateInputStream(self) -> System.IO.Stream: ...

class FMSFilePart(FilePart):
    def __init__(self, name: str, file: System.IO.FileInfo) -> None: ...
    DISPOSITION_SIZE_PARAM_BYTES: list[System.Byte]
    OutputStreamDigest: Holder
    MetadataPart: MetadataPart
    def set_OutputStreamDigest(self, value: Holder) -> None: ...
    def set_MetadataPart(self, value: MetadataPart) -> None: ...
    def SetProgressIndicator(self, progressIndicator: com.teamcenter.fms.servercache.proxy.InterfaceFSCWholeFileIOProgress, clientObject: typing.Any, progressMessage: str, statusMs: int, currentFile: int, totalFiles: int, cancelException: com.teamcenter.fms.servercache.proxy.FSCException) -> None: ...

class FMSStreamPart(FilePartBase):
    @typing.overload
    def __init__(self, name: str, filename: str, stream: System.IO.Stream, contentType: str, charset: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, filename: str, stream: System.IO.Stream, contentType: str, charset: str, streamfilelength: int) -> None: ...
    OutputStreamDigest: Holder
    MetadataPart: MetadataPart
    def set_OutputStreamDigest(self, value: Holder) -> None: ...
    def set_MetadataPart(self, value: MetadataPart) -> None: ...

class FMSTextFilePart(FMSFilePart):
    def __init__(self, name: str, file: System.IO.FileInfo) -> None: ...
    def SetEncodingInfo(self, sourceEncoding: str, destinationEncoding: str, destinationLineTerm: str) -> None: ...

class FormDataInputStream:
    def __init__(self, stream: System.IO.Stream, contentType: str) -> None: ...
    def GetNextFormData(self) -> bool: ...
    def GetContentName(self) -> str: ...
    def ReadLine(self) -> str: ...
    @staticmethod
    def GetContentValue(valueName: str, targetStr: str) -> str: ...

class GetMethod(HttpMethodBase):
    def __init__(self, url: str) -> None: ...
    def ExecuteMethod(self, client: HttpClient) -> int: ...

class Header:
    def __init__(self, name: str, val: str) -> None: ...
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...
    def getValue(self) -> str: ...

class HttpClient:
    def __init__(self, ) -> None: ...
    DEFAULT_HTTP_TIMEOUT_MS: int
    DEFAULT_HTTP_READ_WRITE_TIMEOUT_MS: int
    TimeoutMS: int
    ReadWriteTimeoutMS: int
    Proxy: System.Net.IWebProxy
    Localizer: com.teamcenter.fms.ticket.ticketinternal.LocaleMessage
    def get_TimeoutMS(self) -> int: ...
    def set_TimeoutMS(self, value: int) -> None: ...
    def get_ReadWriteTimeoutMS(self) -> int: ...
    def set_ReadWriteTimeoutMS(self, value: int) -> None: ...
    def get_Proxy(self) -> System.Net.IWebProxy: ...
    def set_Proxy(self, value: System.Net.IWebProxy) -> None: ...
    @staticmethod
    def get_Localizer() -> com.teamcenter.fms.ticket.ticketinternal.LocaleMessage: ...
    def ExecuteMethod(self, method: HttpMethodBase) -> int: ...

class HttpConstants:
    def __init__(self, ) -> None: ...
    DEFAULT_CONTENT_CHARSET: str
    utf8encoding: System.Text.UTF8Encoding
    BOUNDARY: str
    CRLF: str
    QUOTE: str
    EXTRA: str
    Localizer: com.teamcenter.fms.ticket.ticketinternal.LocaleMessage
    @staticmethod
    def get_Localizer() -> com.teamcenter.fms.ticket.ticketinternal.LocaleMessage: ...
    @staticmethod
    def set_Localizer(value: com.teamcenter.fms.ticket.ticketinternal.LocaleMessage) -> None: ...
    @staticmethod
    def GetAsciiBytes(data: str) -> list[System.Byte]: ...

class HttpMethodBase:
    def __init__(self, url: str) -> None: ...
    cookieStore: System.Net.CookieContainer
    Localizer: com.teamcenter.fms.ticket.ticketinternal.LocaleMessage
    Method: str
    Headers: System.Collections.Hashtable
    Url: str
    Request: System.Net.HttpWebRequest
    Response: System.Net.HttpWebResponse
    @staticmethod
    def get_Localizer() -> com.teamcenter.fms.ticket.ticketinternal.LocaleMessage: ...
    def get_Method(self) -> str: ...
    def set_Method(self, value: str) -> None: ...
    def get_Headers(self) -> System.Collections.Hashtable: ...
    def set_Headers(self, value: System.Collections.Hashtable) -> None: ...
    def get_Url(self) -> str: ...
    def set_Url(self, value: str) -> None: ...
    def get_Request(self) -> System.Net.HttpWebRequest: ...
    def set_Request(self, value: System.Net.HttpWebRequest) -> None: ...
    def get_Response(self) -> System.Net.HttpWebResponse: ...
    def set_Response(self, value: System.Net.HttpWebResponse) -> None: ...
    def GetStatusCode(self) -> int: ...
    def GetStatusText(self) -> str: ...
    def GetResponseHeader(self, headerName: str) -> Header: ...
    def GetResponseCharSet(self) -> str: ...
    def initCookieStore(self) -> None: ...
    def dumpCookieStore(self) -> None: ...
    def addCookie(self) -> None: ...
    def GetResponseBody(self) -> list[System.Byte]: ...
    def GetResponseBodyAsString(self) -> str: ...
    def GetResponseBodyAsStream(self) -> System.IO.Stream: ...
    def ReleaseConnection(self) -> None: ...
    @typing.overload
    def AddRequestHeader(self, h: Header) -> None: ...
    @typing.overload
    def AddRequestHeader(self, param: str, val: str) -> None: ...
    def BuildRequest(self, client: HttpClient) -> int: ...
    def ExecuteMethod(self, client: HttpClient) -> int: ...

class HttpStatus:
    def __init__(self, ) -> None: ...
    SC_OK: int
    SC_NO_CONTENT: int

class Long:
    def __init__(self, value: int) -> None: ...
    value: int

class MessageDigest:
    Algorithm: str
    AlgorithmProvider: System.Security.Cryptography.HashAlgorithm
    def get_Algorithm(self) -> str: ...
    def get_AlgorithmProvider(self) -> System.Security.Cryptography.HashAlgorithm: ...
    @staticmethod
    def GetInstance(algorithm: str) -> MessageDigest: ...
    def Digest(self) -> list[System.Byte]: ...
    def Reset(self) -> None: ...

class Metadata:
    Length: int
    Map: dict[str, str]
    def get_Length(self) -> int: ...
    def get_Map(self) -> dict[str, str]: ...
    @staticmethod
    def GetInstance(dfh: Holder, metadata: dict[str, str]) -> Metadata: ...
    def SendData(self, outs: System.IO.Stream) -> None: ...
    @staticmethod
    def ParseMap(dataStr: str) -> dict[str, str]: ...

class MetadataPart(Part):
    DISPOSITION_DIGEST_ALGORITH_PARAM_BYTES: list[System.Byte]
    DISPOSITION_DIGEST_METADATA_KEY_PARAM_BYTES: list[System.Byte]
    DISPOSITION_METADATA_SIZE_PARAM_BYTES: list[System.Byte]
    NAME: str
    CONTENT_DISPOSITION_DIGEST_ALGORITHM_PARAM: str
    CONTENT_DISPOSITION_DIGEST_METADATA_KEY_PARAM: str
    CONTENT_DISPOSITION_METADATA_SIZE_PARAM: str
    @staticmethod
    def GetInstance(md: Metadata) -> MetadataPart: ...
    def ContributeDispositionHeader(self, outs: System.IO.Stream, digestholder: Holder) -> None: ...

class MetadataUtil:
    def __init__(self, ) -> None: ...
    CHARSET: str
    FILEGUID_KEY: str
    TRANSPORT_SIZE_KEY: str
    TRANSPORT_DIGEST_KEY: str
    @staticmethod
    def CompareExpectedSize(expected: int, actual: int) -> None: ...
    @staticmethod
    def CompareDigest(digest: MessageDigest, df: DigestFormat) -> None: ...
    @staticmethod
    def ParseHeader(metadataHeader: str) -> dict[str, str]: ...

class MultipartPostMethod(HttpMethodBase):
    def __init__(self, url: str) -> None: ...
    endBoundary: str
    endBoundaryBytes: list[System.Byte]
    endBoundaryLength: int
    Parameters: System.Collections.Hashtable
    def get_Parameters(self) -> System.Collections.Hashtable: ...
    def set_Parameters(self, value: System.Collections.Hashtable) -> None: ...
    def AddPart(self, part: Part) -> None: ...
    def AddParameter(self, param: str, val: str) -> None: ...
    def ExecuteMethod(self, client: HttpClient) -> int: ...

class Part:
    def __init__(self, name: str, contentType: str, charset: str, transferEncoding: str) -> None: ...
    Name: str
    ContentType: str
    CharSet: str
    TransferEncoding: str
    def get_Name(self) -> str: ...
    def get_ContentType(self) -> str: ...
    def get_CharSet(self) -> str: ...
    def get_TransferEncoding(self) -> str: ...
    def Send(self, outs: System.IO.Stream) -> None: ...
    def TotalLength(self) -> int: ...

class StringPart(Part):
    def __init__(self, name: str, value: str) -> None: ...
    Value: str
    def get_Value(self) -> str: ...

class CERTAINTY(System.Enum, int):
    unknown: CERTAINTY = ...
    level1: CERTAINTY = ...
    level2: CERTAINTY = ...
    level3: CERTAINTY = ...

class Holder:
    def __init__(self, key: str, cert: CERTAINTY, md: MessageDigest) -> None: ...
    MessageDigest: MessageDigest
    Key: str
    def get_MessageDigest(self) -> MessageDigest: ...
    def get_Key(self) -> str: ...
    def getV1FormattedDigest(self) -> str: ...

