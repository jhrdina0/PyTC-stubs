import System
import System.Collections.Specialized
import System.Globalization
import System.IO
import com.teamcenter.ss
import com.teamcenter.ss.client
import typing

class AbstractSessionInitializer:
    pass

class ClientSession:
    def __init__(self, sessionInfo: SessionData) -> None: ...
    def isValid(self) -> bool: ...
    def getLocale(self) -> System.Globalization.CultureInfo: ...
    def setDebugMode(self, debugMode: bool) -> None: ...
    @typing.overload
    def generateSSOTokens(self, appID: str) -> list[com.teamcenter.ss.SSOToken]: ...
    @typing.overload
    def generateSSOTokens(self, AppID: str, pseudoAppID: str) -> list[com.teamcenter.ss.SSOToken]: ...
    @typing.overload
    def generateSSOAppToken(self, appID: str) -> com.teamcenter.ss.SSOAppToken: ...
    @typing.overload
    def generateSSOAppToken(self, AppID: str, pseudoAppID: str) -> com.teamcenter.ss.SSOAppToken: ...
    def getProxyAuthorizationCookie(self, appID: str) -> list[com.teamcenter.ss.HttpCookieToken]: ...

class SessionAgentClientSession:
    def __init__(self, sessionInfo: SessionInfo) -> None: ...
    KEY_STATUS: str
    KEY_MESSAGE: str
    SUCCESS_STATUS: str
    FAILED_STATUS: str
    def isValid(self) -> bool: ...
    def getSession(self) -> bool: ...
    def getLocale(self) -> System.Globalization.CultureInfo: ...
    @typing.overload
    def generateSSOTokens(self, appID: str) -> list[com.teamcenter.ss.SSOToken]: ...
    @typing.overload
    def generateSSOTokens(self, AppID: str, pseudoAppID: str) -> list[com.teamcenter.ss.SSOToken]: ...
    @typing.overload
    def generateSSOAppToken(self, appID: str) -> com.teamcenter.ss.SSOAppToken: ...
    @typing.overload
    def generateSSOAppToken(self, AppID: str, pseudoAppID: str) -> com.teamcenter.ss.SSOAppToken: ...
    def getProxyAuthorizationCookie(self, appID: str) -> list[com.teamcenter.ss.HttpCookieToken]: ...

class SessionAgentSessionInitializer(AbstractSessionInitializer):
    def __init__(self, ) -> None: ...
    def setConfig(self, config: System.Collections.Specialized.NameValueCollection) -> None: ...
    def setLoginURL(self, ssoLoginURL: str) -> None: ...
    def getExistingSession(self) -> com.teamcenter.ss.client.SSOSession: ...
    def startNewSession(self) -> com.teamcenter.ss.client.SSOSession: ...

class SessionData:
    def __init__(self, loginURL: str, portNo: int, sessionKey: str) -> None: ...
    def getLoginURL(self) -> str: ...
    def getPortNo(self) -> int: ...
    def getSessionKey(self) -> str: ...
    @staticmethod
    def detectSession(loginURL: str) -> SessionData: ...
    @staticmethod
    def establishSession(loginURL: str, portNo: int, sessionKey: str, supportLegacy: bool) -> SessionData: ...
    def destroy(self) -> None: ...
    def writeSessionObject(self, sw: System.IO.StreamWriter) -> None: ...

class SessionInfo:
    def __init__(self, loginURL: str) -> None: ...
    def detectSessionAgent(self) -> bool: ...
    def setSessionKey(self, sessionKey: str) -> None: ...
    def getLoginURL(self) -> str: ...
    def getPortNo(self) -> int: ...
    def getServerKey(self) -> str: ...
    def getSessionKey(self) -> str: ...

class SessionStore:
    def __init__(self, legacyClient: bool, isAgent: bool) -> None: ...
    def readAllSessions(self) -> list[SessionData]: ...
    def readSession(self, loginURL: str) -> SessionData: ...
    def writeSession(self, ses: SessionData) -> None: ...
    def deleteSession(self, ses: SessionData) -> None: ...
    def delete(self) -> None: ...

class SessionSynchronizer:
    def __init__(self, ) -> None: ...
    def requestControl(self, timeout: int) -> None: ...
    def releaseControl(self) -> None: ...
    def delete(self) -> None: ...
    @staticmethod
    def Main(args: list[str]) -> None: ...

class SimpleSesInitializer(AbstractSessionInitializer):
    def __init__(self, ) -> None: ...
    def setLoginURL(self, ssoLoginURL: str) -> None: ...
    def setConfig(self, config: System.Collections.Specialized.NameValueCollection) -> None: ...
    def getExistingSession(self) -> com.teamcenter.ss.client.SSOSession: ...
    def startNewSession(self) -> com.teamcenter.ss.client.SSOSession: ...

class TccsClientSession:
    def __init__(self, tccsLoginURL: str) -> None: ...
    def isValid(self) -> bool: ...
    def getLocale(self) -> System.Globalization.CultureInfo: ...
    @typing.overload
    def generateSSOAppToken(self, appID: str) -> com.teamcenter.ss.SSOAppToken: ...
    @typing.overload
    def generateSSOAppToken(self, AppID: str, pseudoAppID: str) -> com.teamcenter.ss.SSOAppToken: ...
    @typing.overload
    def generateSSOTokens(self, appID: str) -> list[com.teamcenter.ss.SSOToken]: ...
    @typing.overload
    def generateSSOTokens(self, AppID: str, pseudoAppID: str) -> list[com.teamcenter.ss.SSOToken]: ...
    def getProxyAuthorizationCookie(self, appID: str) -> list[com.teamcenter.ss.HttpCookieToken]: ...

class TccsSessionInitializer(AbstractSessionInitializer):
    def __init__(self, ) -> None: ...
    def getExistingSession(self) -> com.teamcenter.ss.client.SSOSession: ...
    def setConfig(self, config: System.Collections.Specialized.NameValueCollection) -> None: ...
    def setLoginURL(self, ssoLoginURL: str) -> None: ...
    def startNewSession(self) -> com.teamcenter.ss.client.SSOSession: ...

class SessionSyncData:
    @typing.overload
    def __init__(self, portNum: str, timeStamp: str) -> None: ...
    @typing.overload
    def __init__(self, portNum: int, timeStamp: int) -> None: ...
    def getPortNumber(self) -> int: ...
    def getTimeStamp(self) -> int: ...
    def writeSessionObject(self, sw: System.IO.StreamWriter) -> None: ...

