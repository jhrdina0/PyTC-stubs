import System
import System.Collections
import System.Globalization
import System.IO
import com.teamcenter.ss.util
import typing

class AbstractXMLDecoder:
    def __init__(self, ) -> None: ...
    def getDecodedObject(self) -> typing.Any: ...
    def startElement(self, tag: str, attrs: System.Collections.Hashtable) -> None: ...
    def endElement(self, tag: str) -> None: ...
    def text(self, value_Renamed: str) -> None: ...
    @staticmethod
    def getTagDecoder(tag: str) -> AbstractXMLDecoder: ...

class BasicXMLDecoder(AbstractXMLDecoder):
    def __init__(self, ) -> None: ...
    STRING_TAG: str
    BOOLEAN_TAG: str
    INT_TAG: str
    NULL_TAG: str
    def getDecodedObject(self) -> typing.Any: ...

class BasicXMLEncoder:
    def __init__(self, ) -> None: ...
    def objectToXML(self, obj: typing.Any) -> str: ...
    @staticmethod
    @typing.overload
    def encodeNullObject() -> str: ...
    @staticmethod
    @typing.overload
    def encodeNullObject(className: System.Type) -> str: ...
    @staticmethod
    def encodeString(s: str) -> str: ...
    @staticmethod
    def encodeInt(i: int) -> str: ...
    @staticmethod
    def encodeBoolean(b: bool) -> str: ...
    @staticmethod
    def encodeArray(arrayObj: typing.Any) -> str: ...
    @staticmethod
    def encodeMap(mapObj: System.Collections.Hashtable) -> str: ...
    @staticmethod
    def encodeLocale(loc: System.Globalization.CultureInfo) -> str: ...
    @staticmethod
    def encodeXMLSerializable(obj: com.teamcenter.ss.util.ConstructorReflectional) -> str: ...

class ProtocolConverter:
    def __init__(self, targetProtocol: str) -> None: ...
    def setProtocol(self, targetProtocol: str) -> None: ...
    def getProtocol(self) -> str: ...
    @staticmethod
    def getConverter() -> ProtocolConverter: ...
    def conversionNeeded(self) -> bool: ...
    def convertForEncode(self, currentClass: System.Type) -> str: ...
    def convertForDecode(self, currentClassName: str) -> str: ...

class RpcRequestDecoder(AbstractXMLDecoder):
    def __init__(self, ) -> None: ...
    METHOD_CALL_TAG: str
    def getDecodedObject(self) -> typing.Any: ...

class RpcRequestEncoder:
    def __init__(self, ) -> None: ...
    def objectToXML(self, obj: typing.Any) -> str: ...

class RpcResponseDecoder(AbstractXMLDecoder):
    def __init__(self, ) -> None: ...
    METHOD_RESPONSE_TAG: str
    FAULT_TAG: str
    PARAMS_TAG: str
    PROTOCOL_VERSION_ATTR: str
    PROTOCOL_VERSION: str
    def getDecodedObject(self) -> typing.Any: ...

class RpcResponseEncoder:
    def __init__(self, ) -> None: ...
    def objectToXML(self, obj: typing.Any) -> str: ...

class SimpleXMLReader:
    def __init__(self, ) -> None: ...
    @staticmethod
    def parse(r: System.IO.TextReader, contentHandler: XMLDecoder) -> None: ...

class ThrowableEncoder:
    def __init__(self, ) -> None: ...
    def objectToXML(self, obj: typing.Any) -> str: ...

class XMLArrayDecoder(AbstractXMLDecoder):
    def __init__(self, ) -> None: ...
    ARRAY_TAG: str
    def getDecodedObject(self) -> typing.Any: ...

class XMLDecodeException(XMLParseException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, cause: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, cause: System.Exception) -> None: ...

class XMLDecoder:
    def __init__(self , *args: typing.Any) -> None: ...
    def startElement(self, tag: str, attrs: System.Collections.Hashtable) -> None: ...
    def endElement(self, tag: str) -> None: ...
    def text(self, str: str) -> None: ...

class XMLDecoderFactory:
    @staticmethod
    def registerTagDecoder(tagName: str, decoderClass: System.Type) -> None: ...
    @staticmethod
    def getTagDecoder(tag: str) -> AbstractXMLDecoder: ...

class XMLEncoder:
    def __init__(self , *args: typing.Any) -> None: ...
    def objectToXML(self, obj: typing.Any) -> str: ...

class XMLEncoderFactory:
    def __init__(self, ) -> None: ...
    @staticmethod
    def getObjectSerializer(obj: typing.Any) -> XMLEncoder: ...
    @staticmethod
    def registerXMLEncoder(objectClass: System.Type, objectEncoder: XMLEncoder) -> None: ...

class XMLEncoderUtil:
    XMLRPC_CONTENT_TYPE: str
    XMLRPC_HEADER: str
    XMLRPC_REQUEST: str
    XMLRPC_RESPONSE: str
    UTF8_CHAR_ENCODING: str
    @staticmethod
    def objectToXML(obj: typing.Any) -> str: ...

class XMLLocaleDecoder(AbstractXMLDecoder):
    def __init__(self, ) -> None: ...
    LOCALE_TAG: str
    def getDecodedObject(self) -> typing.Any: ...

class XMLMapDecoder(AbstractXMLDecoder):
    def __init__(self, ) -> None: ...
    MAP_TAG: str
    def getDecodedObject(self) -> typing.Any: ...

class XMLParseException(com.teamcenter.ss.util.CompatibleCausallyException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, cause: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, cause: System.Exception) -> None: ...

class XmlRpcRequest:
    def __init__(self, methodName: str, args: System.Collections.ArrayList) -> None: ...
    def getMethodName(self) -> str: ...
    def getParameters(self) -> System.Collections.ArrayList: ...

class XmlRpcResponse:
    @typing.overload
    def __init__(self, returnParams: System.Collections.ArrayList) -> None: ...
    @typing.overload
    def __init__(self, returnParams: System.Collections.ArrayList, protocolMismatch: bool) -> None: ...
    @typing.overload
    def __init__(self, fault: System.Exception) -> None: ...
    def getReturnParameters(self) -> System.Collections.ArrayList: ...
    def getFault(self) -> System.Exception: ...
    def getProtocolMismatch(self) -> bool: ...

class XMLStructDecoder(AbstractXMLDecoder):
    def __init__(self, ) -> None: ...
    STRUCT_TAG: str
    def getDecodedObject(self) -> typing.Any: ...

