import System
import System.Collections
import System.Collections.Specialized
import System.Diagnostics
import System.Globalization
import System.IO
import com.teamcenter.ss
import com.teamcenter.ss.util
import typing

class CharacterConverter:
    def __init__(self, map: System.Collections.Hashtable) -> None: ...
    DOUBLE_QUOTE: str
    AMPERSAND: str
    LESS_THAN: str
    GREATER_THAN: str
    SINGLE_QUOTE: str
    LEFT_PAREN: str
    RIGHT_PAREN: str
    PIPE_CHAR: str
    SEMICOLON: str
    DOLLAR_SIGN: str
    PERCENT_SIGN: str
    AT_SIGN: str
    PLUS_SIGN: str
    COMMA: str
    BACKSLASH: str
    CARRIAGE_RETURN: str
    LINE_FEED: str
    AMPERSAND_HTML_NAME: str
    LESS_THAN_HTML_NAME: str
    GREATER_THAN_HTML_NAME: str
    APOSTROPHE_HTML_NAME: str
    DOUBLE_QUOTE_HTML_NAME: str
    LEFT_PAREN_HTML_NAME: str
    RIGHT_PAREN_HTML_NAME: str
    PIPE_CHAR_HTML_NAME: str
    SEMICOLON_HTML_NAME: str
    DOLLAR_SIGN_HTML_NAME: str
    PERCENT_SIGN_HTML_NAME: str
    AT_SIGN_HTML_NAME: str
    PLUS_SIGN_HTML_NAME: str
    COMMA_HTML_NAME: str
    BACKSLASH_HTML_NAME: str
    CARRIAGE_RETURN_HTML_NAME: str
    LINE_FEED_HTML_NAME: str
    def convert(self, input: str) -> str: ...
    @staticmethod
    def convertHTML(input: str) -> str: ...

class DomainUtil:
    def __init__(self, ) -> None: ...
    @staticmethod
    def extractUserID(userID: str) -> str: ...
    @staticmethod
    def extractDomain(userID: str) -> str: ...
    @staticmethod
    def dumpStringMap(ssoMap: System.Collections.IDictionary) -> None: ...
    @staticmethod
    def getStringMap(props: System.Collections.Specialized.NameValueCollection, tableName: str, KeyColumn: str, targetColumn: str) -> System.Collections.IDictionary: ...

class OsUtil:
    NO_ERRORCODE: int
    @staticmethod
    def setDebug(debugInput: str) -> None: ...
    @staticmethod
    def isWindows2000() -> bool: ...
    @staticmethod
    def getUserName() -> str: ...
    @staticmethod
    def getHardTimeout() -> int: ...
    @staticmethod
    def getBrowserLaunchCmd() -> str: ...
    @staticmethod
    def isDebugEnabled() -> bool: ...
    @staticmethod
    def isInfoEnabled() -> bool: ...
    @staticmethod
    def isWarnEnabled() -> bool: ...
    @staticmethod
    def isErrorEnabled() -> bool: ...
    @staticmethod
    def isFatalEnabled() -> bool: ...
    @staticmethod
    @typing.overload
    def getAppDataDir() -> str: ...
    @staticmethod
    @typing.overload
    def getAppDataDir(legacyClient: bool, isAgent: bool) -> str: ...
    @staticmethod
    def getSessionAgentPath() -> str: ...
    @staticmethod
    def getIndependentSessionAgentWorkDirPath() -> str: ...
    @staticmethod
    def launchURL(url: str) -> bool: ...
    @staticmethod
    @typing.overload
    def launchURLEx(url: str) -> System.Diagnostics.Process: ...
    @staticmethod
    @typing.overload
    def launchURLEx(url: str, browserPref: str) -> System.Diagnostics.Process: ...
    @staticmethod
    def getEnv(var: str) -> str: ...
    @staticmethod
    def debug(msg: str) -> None: ...
    @staticmethod
    def info(msg: str) -> None: ...
    @staticmethod
    def warn(msg: str) -> None: ...
    @staticmethod
    @typing.overload
    def error(msg: str) -> None: ...
    @staticmethod
    @typing.overload
    def error(msg: str, cause: System.Exception, errorCode: int) -> None: ...
    @staticmethod
    def fatal(msg: str) -> None: ...
    @staticmethod
    def WriteStackTrace(exception: System.Exception, stream: System.IO.TextWriter) -> None: ...
    @staticmethod
    def NextRandomLong(random: System.Random) -> int: ...

class SSOAdminInfo(com.teamcenter.ss.SSOStringHashtable):
    def __init__(self, ) -> None: ...
    PROXY_TIME_LIMIT: str
    USE_PROXY: str
    DEBUG: str
    PRIMARY_HTTP_STRING: str
    SECONDARY_HTTP_STRING: str
    PRIMARY_HTTPS_STRING: str
    SECONDARY_HTTPS_STRING: str
    NON_PROXY_STRING: str

class SSOAuthInfo(com.teamcenter.ss.SSOStringHashtable):
    def __init__(self, ) -> None: ...
    URL_STRING: str
    REALM: str
    USER_ID: str
    PASSWORD: str
    TIME_STAMP: str
    USER_PROXY: str

class SSOAuthorizationStatus:
    def __init__(self, status: com.teamcenter.ss.SSOLoginStatus, info: SSOSessionInfo) -> None: ...
    def getLoginStatus(self) -> com.teamcenter.ss.SSOLoginStatus: ...
    def getSessionInfo(self) -> SSOSessionInfo: ...

class SSOLoginInfo(com.teamcenter.ss.SSOStringHashtable):
    def __init__(self, ) -> None: ...
    AuthenticationType: str
    PasswordTime: str
    AUTO_LOGIN: str
    COMMERCIAL_SSO: str

class SSOSessionInfo:
    @typing.overload
    def __init__(self, handle: str, locale: System.Globalization.CultureInfo, creds: com.teamcenter.ss.SSOLoginInput, appUserId: str) -> None: ...
    @typing.overload
    def __init__(self, handle: str, locale: com.teamcenter.ss.util.ObjectWrapper, creds: com.teamcenter.ss.SSOLoginInput, appUserId: com.teamcenter.ss.util.ObjectWrapper) -> None: ...
    def getHandle(self) -> str: ...
    def getLocale(self) -> System.Globalization.CultureInfo: ...
    def getAppUserId(self) -> str: ...
    def getCredentials(self) -> com.teamcenter.ss.SSOLoginInput: ...
    def getConstructionalProperties(self) -> System.Collections.ArrayList: ...

class SSOVersionUtil:
    def __init__(self, ) -> None: ...
    @staticmethod
    def compareVersions(v1: str, v2: str) -> int: ...

class SupportClass:
    def __init__(self, ) -> None: ...
    @staticmethod
    def InvokeMethodAsVirtual(tempObject: typing.Any, method: str, parameters: list[typing.Any]) -> typing.Any: ...
    @staticmethod
    @typing.overload
    def CollectionToString(c: System.Collections.ICollection) -> str: ...
    @staticmethod
    @typing.overload
    def CollectionToString(obj: typing.Any) -> str: ...

class TableConfigurationVariable:
    def __init__(self, tableName: str, initialPropertiesValues: System.Collections.Specialized.NameValueCollection) -> None: ...
    def getInitialRowNumber(self) -> int: ...
    def getConfigValue(self, columnName: str, row: int) -> str: ...
    def getConfigValueByKey(self, keyColumnName: str, keyColumnValue: str, valueColumnName: str) -> str: ...
    def getConfigValueColumn(self, keyColumnName: str, columnName: str) -> System.Collections.ArrayList: ...

class Tokenizer:
    @typing.overload
    def __init__(self, source: str) -> None: ...
    @typing.overload
    def __init__(self, source: str, delimiters: str) -> None: ...
    @typing.overload
    def __init__(self, source: str, delimiters: str, includeDelims: bool) -> None: ...
    Count: int
    Current: typing.Any
    @typing.overload
    def NextToken(self) -> str: ...
    @typing.overload
    def NextToken(self, delimiters: str) -> str: ...
    def HasMoreTokens(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_Current(self) -> typing.Any: ...
    def MoveNext(self) -> bool: ...
    def Reset(self) -> None: ...

class SetSupport:
    def __init__(self , *args: typing.Any) -> None: ...
    def Add(self, obj: typing.Any) -> bool: ...
    def AddAll(self, c: System.Collections.ICollection) -> bool: ...

class HashSetSupport(System.Collections.ArrayList):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, c: System.Collections.ICollection) -> None: ...
    @typing.overload
    def __init__(self, capacity: int) -> None: ...
    def Add(self, obj: typing.Any) -> bool: ...
    def AddAll(self, c: System.Collections.ICollection) -> bool: ...
    def Clone(self) -> typing.Any: ...

