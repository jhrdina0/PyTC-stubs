import System
import System.Collections
import System.Globalization
import typing

class CompatibleCausallyException(System.Exception):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, cause: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, cause: System.Exception) -> None: ...
    def getCauseEx(self) -> System.Exception: ...
    def getConstructionalProperties(self) -> System.Collections.ArrayList: ...

class ConstructorReflectional:
    def __init__(self , *args: typing.Any) -> None: ...
    def getConstructionalProperties(self) -> System.Collections.ArrayList: ...

class ObjectWrapper:
    @typing.overload
    def __init__(self, valueClass: System.Type, value_Renamed: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, valueClass: str, value_Renamed: str, key: int) -> None: ...
    HAS_VALUE: int
    IS_NULL: int
    IS_EMPTY: int
    def getString(self) -> str: ...
    def getLocale(self) -> System.Globalization.CultureInfo: ...
    def getConstructionalProperties(self) -> System.Collections.ArrayList: ...

