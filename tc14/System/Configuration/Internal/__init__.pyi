import System
import System.Configuration
import System.IO
import typing

import System
import System.Configuration
import System.IO
import typing

import System
import System.Configuration
import System.IO
import typing

import System
import System.Configuration
import System.IO
import typing

import System
import System.Configuration
import System.IO
import typing

import System
import System.Configuration
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO
import typing

import System
import System.Configuration
import System.Configuration.Internal
import System.IO

import System
import System.Configuration
import System.Configuration.Internal
import System.IO

import System
import System.Configuration
import System.Configuration.Internal
import System.IO

import System
import System.Configuration
import System.Configuration.Internal
import System.IO

import System
import System.Configuration
import System.Configuration.Internal
import System.IO

import System
import System.Configuration
import System.Configuration.Internal
import System.IO

from System import Array, AsyncCallback, Boolean, EventArgs, IAsyncResult, IDisposable, Int32, MulticastDelegate, Object, Object&, String, String&, Type, Void
from System.Configuration import BaseConfigurationRecord, Configuration, ConfigurationAllowDefinition, ConfigurationAllowExeDefinition, ProtectedConfigurationProvider, ProtectedConfigurationSection
from System.Configuration.Internal import IConfigErrorInfo, IInternalConfigHost, IInternalConfigRecord, IInternalConfigRoot, IInternalConfigSystem, InternalConfigEventArgs, InternalConfigEventHandler, StreamChangeCallback
from System.IO import Stream

from System import Array, AsyncCallback, Boolean, EventArgs, IAsyncResult, IDisposable, Int32, MulticastDelegate, Object, Object&, String, String&, Type, Void
from System.Configuration import BaseConfigurationRecord, Configuration, ConfigurationAllowDefinition, ConfigurationAllowExeDefinition, ProtectedConfigurationProvider, ProtectedConfigurationSection
from System.Configuration.Internal import IConfigErrorInfo, IInternalConfigHost, IInternalConfigRecord, IInternalConfigRoot, IInternalConfigSystem, InternalConfigEventArgs, InternalConfigEventHandler, StreamChangeCallback
from System.IO import Stream

from __future__ import annotations

from System import Object
from System import Type

class ConfigurationManagerHelper(Object, IConfigurationManagerHelper):
    """"""

    def EnsureNetConfigLoaded(self) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def Dispose(self) -> None: ...

    pass

    pass

    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Object[]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Object[]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&, assertPermissions: bool) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(configPath: str) -> bool: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(configPath: str) -> bool: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(encryptedXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def EncryptSection(clearTextXml: str, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> str: ...
    def GetConfigType(typeName: str, throwOnError: bool) -> Type: ...
    def GetConfigTypeName(t: Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Object]) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForRead(streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(configPath: String) -> Boolean: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForRead(streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(configPath: String) -> Boolean: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForRead(streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(configPath: String) -> Boolean: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForRead(streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(configPath: String) -> Boolean: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...
class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...

class IConfigSystem:
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: Type, hostInitParams: Array[Object]) -> Void: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> Void: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: Boolean
    SetConfigurationSystemInProgress: Boolean
    MachineConfigPath: String
    ApplicationConfigUri: String
    ExeProductName: String
    ExeProductVersion: String
    ExeRoamingConfigDirectory: String
    ExeRoamingConfigPath: String
    ExeLocalConfigDirectory: String
    ExeLocalConfigPath: String
    UserConfigFilename: String
    def get_SupportsUserConfig(self) -> Boolean: ...
    def get_SetConfigurationSystemInProgress(self) -> Boolean: ...
    def get_MachineConfigPath(self) -> String: ...
    def get_ApplicationConfigUri(self) -> String: ...
    def get_ExeProductName(self) -> String: ...
    def get_ExeProductVersion(self) -> String: ...
    def get_ExeRoamingConfigDirectory(self) -> String: ...
    def get_ExeRoamingConfigPath(self) -> String: ...
    def get_ExeLocalConfigDirectory(self) -> String: ...
    def get_ExeLocalConfigPath(self) -> String: ...
    def get_UserConfigFilename(self) -> String: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: String) -> Boolean: ...
    def IsRoamingUserConfig(self, configPath: String) -> Boolean: ...
    def IsLocalUserConfig(self, configPath: String) -> Boolean: ...
    def GetExeConfigPath(self) -> String: ...
    def GetRoamingUserConfigPath(self) -> String: ...
    def GetLocalUserConfigPath(self) -> String: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: Type, hostInitConfigurationParams: Array[Object]) -> Configuration: ...
    def NormalizeLocationSubPath(self, subPath: String, errorInfo: IConfigErrorInfo) -> String: ...

class IInternalConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def get_IsRemote(self) -> Boolean: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...

class IInternalConfigRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class IInternalConfigRoot:
    IsDesignTime: Boolean
    def get_IsDesignTime(self) -> Boolean: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: Boolean) -> Void: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def GetSection(self, section: String, configPath: String) -> Object: ...
    def GetUniqueConfigPath(self, configPath: String) -> String: ...
    def GetUniqueConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: String) -> Void: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: Boolean) -> Void: ...
    def CompleteInit(self) -> Void: ...

class IInternalConfigSystem:
    SupportsUserConfig: Boolean
    def get_SupportsUserConfig(self) -> Boolean: ...
    def GetSection(self, configKey: String) -> Object: ...
    def RefreshConfig(self, sectionName: String) -> Void: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(EventArgs):
    ConfigPath: String
    def get_ConfigPath(self) -> String: ...
    def set_ConfigPath(self, value: String) -> Void: ...

class InternalConfigEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: InternalConfigEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: InternalConfigEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def GetSection(self, section: String, configPath: String) -> Object: ...
    def GetUniqueConfigPath(self, configPath: String) -> String: ...
    def GetUniqueConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: String) -> Void: ...
    def RemoveConfigRecord(self, configRecord: BaseConfigurationRecord) -> Void: ...
    def ClearResult(self, configRecord: BaseConfigurationRecord, configKey: String, forceEvaluation: Boolean) -> Void: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(MulticastDelegate):
    def Invoke(self, streamName: String) -> Void: ...
    def BeginInvoke(self, streamName: String, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def get_IsRemote(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...

class IConfigSystem:
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: Type, hostInitParams: Array[Object]) -> Void: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> Void: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: Boolean
    SetConfigurationSystemInProgress: Boolean
    MachineConfigPath: String
    ApplicationConfigUri: String
    ExeProductName: String
    ExeProductVersion: String
    ExeRoamingConfigDirectory: String
    ExeRoamingConfigPath: String
    ExeLocalConfigDirectory: String
    ExeLocalConfigPath: String
    UserConfigFilename: String
    def get_SupportsUserConfig(self) -> Boolean: ...
    def get_SetConfigurationSystemInProgress(self) -> Boolean: ...
    def get_MachineConfigPath(self) -> String: ...
    def get_ApplicationConfigUri(self) -> String: ...
    def get_ExeProductName(self) -> String: ...
    def get_ExeProductVersion(self) -> String: ...
    def get_ExeRoamingConfigDirectory(self) -> String: ...
    def get_ExeRoamingConfigPath(self) -> String: ...
    def get_ExeLocalConfigDirectory(self) -> String: ...
    def get_ExeLocalConfigPath(self) -> String: ...
    def get_UserConfigFilename(self) -> String: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: String) -> Boolean: ...
    def IsRoamingUserConfig(self, configPath: String) -> Boolean: ...
    def IsLocalUserConfig(self, configPath: String) -> Boolean: ...
    def GetExeConfigPath(self) -> String: ...
    def GetRoamingUserConfigPath(self) -> String: ...
    def GetLocalUserConfigPath(self) -> String: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: Type, hostInitConfigurationParams: Array[Object]) -> Configuration: ...
    def NormalizeLocationSubPath(self, subPath: String, errorInfo: IConfigErrorInfo) -> String: ...

class IInternalConfigHost:
    SupportsChangeNotifications: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    IsRemote: Boolean
    def get_SupportsChangeNotifications(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def get_IsRemote(self) -> Boolean: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> Void: ...
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForRead(self, streamName: String, assertPermissions: Boolean) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object, assertPermissions: Boolean) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object, assertPermissions: Boolean) -> Void: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Object: ...
    def StopMonitoringStreamForChanges(self, streamName: String, callback: StreamChangeCallback) -> Void: ...
    def IsAboveApplication(self, configPath: String) -> Boolean: ...
    def GetConfigPathFromLocationSubPath(self, configPath: String, locationSubPath: String) -> String: ...
    def IsLocationApplicable(self, configPath: String) -> Boolean: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...
    def DecryptSection(self, encryptedXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def EncryptSection(self, clearTextXml: String, protectionProvider: ProtectedConfigurationProvider, protectedConfigSection: ProtectedConfigurationSection) -> String: ...
    def GetConfigType(self, typeName: String, throwOnError: Boolean) -> Type: ...
    def GetConfigTypeName(self, t: Type) -> String: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: Boolean
    HasRoamingConfig: Boolean
    IsAppConfigHttp: Boolean
    def RefreshConfigPaths(self) -> Void: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...

class IInternalConfigRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class IInternalConfigRoot:
    IsDesignTime: Boolean
    def get_IsDesignTime(self) -> Boolean: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: Boolean) -> Void: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def GetSection(self, section: String, configPath: String) -> Object: ...
    def GetUniqueConfigPath(self, configPath: String) -> String: ...
    def GetUniqueConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: String) -> Void: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: Boolean) -> Void: ...
    def CompleteInit(self) -> Void: ...

class IInternalConfigSystem:
    SupportsUserConfig: Boolean
    def get_SupportsUserConfig(self) -> Boolean: ...
    def GetSection(self, configKey: String) -> Object: ...
    def RefreshConfig(self, sectionName: String) -> Void: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(EventArgs):
    ConfigPath: String
    def get_ConfigPath(self) -> String: ...
    def set_ConfigPath(self, value: String) -> Void: ...

class InternalConfigEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: InternalConfigEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: InternalConfigEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: String) -> Boolean: ...
    def IsTrustedConfigPath(self, configPath: String) -> Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def Impersonate(self) -> IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> Void: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> Void: ...
    def GetSection(self, section: String, configPath: String) -> Object: ...
    def GetUniqueConfigPath(self, configPath: String) -> String: ...
    def GetUniqueConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: String) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: String) -> Void: ...
    def RemoveConfigRecord(self, configRecord: BaseConfigurationRecord) -> Void: ...
    def ClearResult(self, configRecord: BaseConfigurationRecord, configKey: String, forceEvaluation: Boolean) -> Void: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(MulticastDelegate):
    def Invoke(self, streamName: String) -> Void: ...
    def BeginInvoke(self, streamName: String, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> System.Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    IsRemote: System.Boolean
    HasLocalConfig: System.Boolean
    HasRoamingConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String, configPath: System.String, locationConfigPath: System.String, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: System.String, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object, assertPermissions: System.Boolean) -> System.Void: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...
    def get_SupportsChangeNotifications(self) -> System.Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Object: ...
    def StopMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Void: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def IsAboveApplication(self, configPath: System.String) -> System.Boolean: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: System.String, locationSubPath: System.String) -> System.String: ...
    def IsLocationApplicable(self, configPath: System.String) -> System.Boolean: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...
    def DecryptSection(self, encryptedXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def EncryptSection(self, clearTextXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def GetConfigType(self, typeName: System.String, throwOnError: System.Boolean) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> System.String: ...
    def get_IsRemote(self) -> System.Boolean: ...
    def RefreshConfigPaths(self) -> System.Void: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: System.Array[System.Object]) -> System.Void: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> System.Void: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: System.Boolean
    SetConfigurationSystemInProgress: System.Boolean
    MachineConfigPath: System.String
    ApplicationConfigUri: System.String
    ExeProductName: System.String
    ExeProductVersion: System.String
    ExeRoamingConfigDirectory: System.String
    ExeRoamingConfigPath: System.String
    ExeLocalConfigDirectory: System.String
    ExeLocalConfigPath: System.String
    UserConfigFilename: System.String
    def get_SupportsUserConfig(self) -> System.Boolean: ...
    def get_SetConfigurationSystemInProgress(self) -> System.Boolean: ...
    def get_MachineConfigPath(self) -> System.String: ...
    def get_ApplicationConfigUri(self) -> System.String: ...
    def get_ExeProductName(self) -> System.String: ...
    def get_ExeProductVersion(self) -> System.String: ...
    def get_ExeRoamingConfigDirectory(self) -> System.String: ...
    def get_ExeRoamingConfigPath(self) -> System.String: ...
    def get_ExeLocalConfigDirectory(self) -> System.String: ...
    def get_ExeLocalConfigPath(self) -> System.String: ...
    def get_UserConfigFilename(self) -> System.String: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: System.String) -> System.Boolean: ...
    def IsRoamingUserConfig(self, configPath: System.String) -> System.Boolean: ...
    def IsLocalUserConfig(self, configPath: System.String) -> System.Boolean: ...
    def GetExeConfigPath(self) -> System.String: ...
    def GetRoamingUserConfigPath(self) -> System.String: ...
    def GetLocalUserConfigPath(self) -> System.String: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: System.Array[System.Object]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: System.String, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.String: ...

class IInternalConfigHost:
    SupportsChangeNotifications: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    IsRemote: System.Boolean
    def get_SupportsChangeNotifications(self) -> System.Boolean: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def get_IsRemote(self) -> System.Boolean: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String, configPath: System.String, locationConfigPath: System.String, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: System.String, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object, assertPermissions: System.Boolean) -> System.Void: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Object: ...
    def StopMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Void: ...
    def IsAboveApplication(self, configPath: System.String) -> System.Boolean: ...
    def GetConfigPathFromLocationSubPath(self, configPath: System.String, locationSubPath: System.String) -> System.String: ...
    def IsLocationApplicable(self, configPath: System.String) -> System.Boolean: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...
    def DecryptSection(self, encryptedXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def EncryptSection(self, clearTextXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def GetConfigType(self, typeName: System.String, throwOnError: System.Boolean) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> System.String: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: System.Boolean
    HasRoamingConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    def RefreshConfigPaths(self) -> System.Void: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...

class IInternalConfigRecord:
    ConfigPath: System.String
    StreamName: System.String
    HasInitErrors: System.Boolean
    def get_ConfigPath(self) -> System.String: ...
    def get_StreamName(self) -> System.String: ...
    def get_HasInitErrors(self) -> System.Boolean: ...
    def ThrowIfInitErrors(self) -> System.Void: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def GetLkgSection(self, configKey: System.String) -> System.Object: ...
    def RefreshSection(self, configKey: System.String) -> System.Void: ...
    def Remove(self) -> System.Void: ...

class IInternalConfigRoot:
    IsDesignTime: System.Boolean
    def get_IsDesignTime(self) -> System.Boolean: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: System.Boolean) -> System.Void: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def GetSection(self, section: System.String, configPath: System.String) -> System.Object: ...
    def GetUniqueConfigPath(self, configPath: System.String) -> System.String: ...
    def GetUniqueConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: System.String) -> System.Void: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: System.Boolean) -> System.Void: ...
    def CompleteInit(self) -> System.Void: ...

class IInternalConfigSystem:
    SupportsUserConfig: System.Boolean
    def get_SupportsUserConfig(self) -> System.Boolean: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def RefreshConfig(self, sectionName: System.String) -> System.Void: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: System.String
    def get_ConfigPath(self) -> System.String: ...
    def set_ConfigPath(self, value: System.String) -> System.Void: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.Internal.InternalConfigEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def GetSection(self, section: System.String, configPath: System.String) -> System.Object: ...
    def GetUniqueConfigPath(self, configPath: System.String) -> System.String: ...
    def GetUniqueConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: System.String) -> System.Void: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> System.Void: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: System.String, forceEvaluation: System.Boolean) -> System.Void: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: System.String) -> System.Void: ...
    def BeginInvoke(self, streamName: System.String, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> System.Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    IsRemote: System.Boolean
    HasLocalConfig: System.Boolean
    HasRoamingConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: System.String, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object, assertPermissions: System.Boolean) -> System.Void: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...
    def get_SupportsChangeNotifications(self) -> System.Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Object: ...
    def StopMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Void: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def IsAboveApplication(self, configPath: System.String) -> System.Boolean: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: System.String, locationSubPath: System.String) -> System.String: ...
    def IsLocationApplicable(self, configPath: System.String) -> System.Boolean: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...
    def DecryptSection(self, encryptedXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def EncryptSection(self, clearTextXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def GetConfigType(self, typeName: System.String, throwOnError: System.Boolean) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> System.String: ...
    def get_IsRemote(self) -> System.Boolean: ...
    def RefreshConfigPaths(self) -> System.Void: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: System.Array[System.Object]) -> System.Void: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> System.Void: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: System.Boolean
    SetConfigurationSystemInProgress: System.Boolean
    MachineConfigPath: System.String
    ApplicationConfigUri: System.String
    ExeProductName: System.String
    ExeProductVersion: System.String
    ExeRoamingConfigDirectory: System.String
    ExeRoamingConfigPath: System.String
    ExeLocalConfigDirectory: System.String
    ExeLocalConfigPath: System.String
    UserConfigFilename: System.String
    def get_SupportsUserConfig(self) -> System.Boolean: ...
    def get_SetConfigurationSystemInProgress(self) -> System.Boolean: ...
    def get_MachineConfigPath(self) -> System.String: ...
    def get_ApplicationConfigUri(self) -> System.String: ...
    def get_ExeProductName(self) -> System.String: ...
    def get_ExeProductVersion(self) -> System.String: ...
    def get_ExeRoamingConfigDirectory(self) -> System.String: ...
    def get_ExeRoamingConfigPath(self) -> System.String: ...
    def get_ExeLocalConfigDirectory(self) -> System.String: ...
    def get_ExeLocalConfigPath(self) -> System.String: ...
    def get_UserConfigFilename(self) -> System.String: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: System.String) -> System.Boolean: ...
    def IsRoamingUserConfig(self, configPath: System.String) -> System.Boolean: ...
    def IsLocalUserConfig(self, configPath: System.String) -> System.Boolean: ...
    def GetExeConfigPath(self) -> System.String: ...
    def GetRoamingUserConfigPath(self) -> System.String: ...
    def GetLocalUserConfigPath(self) -> System.String: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: System.Array[System.Object]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: System.String, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.String: ...

class IInternalConfigHost:
    SupportsChangeNotifications: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    IsRemote: System.Boolean
    def get_SupportsChangeNotifications(self) -> System.Boolean: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def get_IsRemote(self) -> System.Boolean: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: System.String, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object, assertPermissions: System.Boolean) -> System.Void: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Object: ...
    def StopMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Void: ...
    def IsAboveApplication(self, configPath: System.String) -> System.Boolean: ...
    def GetConfigPathFromLocationSubPath(self, configPath: System.String, locationSubPath: System.String) -> System.String: ...
    def IsLocationApplicable(self, configPath: System.String) -> System.Boolean: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...
    def DecryptSection(self, encryptedXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def EncryptSection(self, clearTextXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def GetConfigType(self, typeName: System.String, throwOnError: System.Boolean) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> System.String: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: System.Boolean
    HasRoamingConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    def RefreshConfigPaths(self) -> System.Void: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...

class IInternalConfigRecord:
    ConfigPath: System.String
    StreamName: System.String
    HasInitErrors: System.Boolean
    def get_ConfigPath(self) -> System.String: ...
    def get_StreamName(self) -> System.String: ...
    def get_HasInitErrors(self) -> System.Boolean: ...
    def ThrowIfInitErrors(self) -> System.Void: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def GetLkgSection(self, configKey: System.String) -> System.Object: ...
    def RefreshSection(self, configKey: System.String) -> System.Void: ...
    def Remove(self) -> System.Void: ...

class IInternalConfigRoot:
    IsDesignTime: System.Boolean
    def get_IsDesignTime(self) -> System.Boolean: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: System.Boolean) -> System.Void: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def GetSection(self, section: System.String, configPath: System.String) -> System.Object: ...
    def GetUniqueConfigPath(self, configPath: System.String) -> System.String: ...
    def GetUniqueConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: System.String) -> System.Void: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: System.Boolean) -> System.Void: ...
    def CompleteInit(self) -> System.Void: ...

class IInternalConfigSystem:
    SupportsUserConfig: System.Boolean
    def get_SupportsUserConfig(self) -> System.Boolean: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def RefreshConfig(self, sectionName: System.String) -> System.Void: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: System.String
    def get_ConfigPath(self) -> System.String: ...
    def set_ConfigPath(self, value: System.String) -> System.Void: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.Internal.InternalConfigEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def GetSection(self, section: System.String, configPath: System.String) -> System.Object: ...
    def GetUniqueConfigPath(self, configPath: System.String) -> System.String: ...
    def GetUniqueConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: System.String) -> System.Void: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> System.Void: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: System.String, forceEvaluation: System.Boolean) -> System.Void: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: System.String) -> System.Void: ...
    def BeginInvoke(self, streamName: System.String, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> System.Void: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    IsRemote: System.Boolean
    HasLocalConfig: System.Boolean
    HasRoamingConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[System.Object]) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: System.String, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object, assertPermissions: System.Boolean) -> System.Void: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...
    def get_SupportsChangeNotifications(self) -> System.Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Object: ...
    def StopMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Void: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def IsAboveApplication(self, configPath: System.String) -> System.Boolean: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def GetConfigPathFromLocationSubPath(self, configPath: System.String, locationSubPath: System.String) -> System.String: ...
    def IsLocationApplicable(self, configPath: System.String) -> System.Boolean: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...
    def DecryptSection(self, encryptedXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def EncryptSection(self, clearTextXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def GetConfigType(self, typeName: System.String, throwOnError: System.Boolean) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> System.String: ...
    def get_IsRemote(self) -> System.Boolean: ...
    def RefreshConfigPaths(self) -> System.Void: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[System.Object]) -> System.Void: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> System.Void: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: System.Boolean
    SetConfigurationSystemInProgress: System.Boolean
    MachineConfigPath: System.String
    ApplicationConfigUri: System.String
    ExeProductName: System.String
    ExeProductVersion: System.String
    ExeRoamingConfigDirectory: System.String
    ExeRoamingConfigPath: System.String
    ExeLocalConfigDirectory: System.String
    ExeLocalConfigPath: System.String
    UserConfigFilename: System.String
    def get_SupportsUserConfig(self) -> System.Boolean: ...
    def get_SetConfigurationSystemInProgress(self) -> System.Boolean: ...
    def get_MachineConfigPath(self) -> System.String: ...
    def get_ApplicationConfigUri(self) -> System.String: ...
    def get_ExeProductName(self) -> System.String: ...
    def get_ExeProductVersion(self) -> System.String: ...
    def get_ExeRoamingConfigDirectory(self) -> System.String: ...
    def get_ExeRoamingConfigPath(self) -> System.String: ...
    def get_ExeLocalConfigDirectory(self) -> System.String: ...
    def get_ExeLocalConfigPath(self) -> System.String: ...
    def get_UserConfigFilename(self) -> System.String: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: System.String) -> System.Boolean: ...
    def IsRoamingUserConfig(self, configPath: System.String) -> System.Boolean: ...
    def IsLocalUserConfig(self, configPath: System.String) -> System.Boolean: ...
    def GetExeConfigPath(self) -> System.String: ...
    def GetRoamingUserConfigPath(self) -> System.String: ...
    def GetLocalUserConfigPath(self) -> System.String: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[System.Object]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: System.String, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.String: ...

class IInternalConfigHost:
    SupportsChangeNotifications: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    IsRemote: System.Boolean
    def get_SupportsChangeNotifications(self) -> System.Boolean: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def get_IsRemote(self) -> System.Boolean: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[System.Object]) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: System.String, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&, assertPermissions: System.Boolean) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object, assertPermissions: System.Boolean) -> System.Void: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...
    def StartMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Object: ...
    def StopMonitoringStreamForChanges(self, streamName: System.String, callback: System.Configuration.Internal.StreamChangeCallback) -> System.Void: ...
    def IsAboveApplication(self, configPath: System.String) -> System.Boolean: ...
    def GetConfigPathFromLocationSubPath(self, configPath: System.String, locationSubPath: System.String) -> System.String: ...
    def IsLocationApplicable(self, configPath: System.String) -> System.Boolean: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...
    def DecryptSection(self, encryptedXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def EncryptSection(self, clearTextXml: System.String, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> System.String: ...
    def GetConfigType(self, typeName: System.String, throwOnError: System.Boolean) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> System.String: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: System.Boolean
    HasRoamingConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    def RefreshConfigPaths(self) -> System.Void: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...

class IInternalConfigRecord:
    ConfigPath: System.String
    StreamName: System.String
    HasInitErrors: System.Boolean
    def get_ConfigPath(self) -> System.String: ...
    def get_StreamName(self) -> System.String: ...
    def get_HasInitErrors(self) -> System.Boolean: ...
    def ThrowIfInitErrors(self) -> System.Void: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def GetLkgSection(self, configKey: System.String) -> System.Object: ...
    def RefreshSection(self, configKey: System.String) -> System.Void: ...
    def Remove(self) -> System.Void: ...

class IInternalConfigRoot:
    IsDesignTime: System.Boolean
    def get_IsDesignTime(self) -> System.Boolean: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: System.Boolean) -> System.Void: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def GetSection(self, section: System.String, configPath: System.String) -> System.Object: ...
    def GetUniqueConfigPath(self, configPath: System.String) -> System.String: ...
    def GetUniqueConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: System.String) -> System.Void: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: System.Boolean) -> System.Void: ...
    def CompleteInit(self) -> System.Void: ...

class IInternalConfigSystem:
    SupportsUserConfig: System.Boolean
    def get_SupportsUserConfig(self) -> System.Boolean: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def RefreshConfig(self, sectionName: System.String) -> System.Void: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: System.String
    def get_ConfigPath(self) -> System.String: ...
    def set_ConfigPath(self, value: System.String) -> System.Void: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.Internal.InternalConfigEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: System.String) -> System.Boolean: ...
    def IsTrustedConfigPath(self, configPath: System.String) -> System.Boolean: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> System.Void: ...
    def GetSection(self, section: System.String, configPath: System.String) -> System.Object: ...
    def GetUniqueConfigPath(self, configPath: System.String) -> System.String: ...
    def GetUniqueConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: System.String) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: System.String) -> System.Void: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> System.Void: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: System.String, forceEvaluation: System.Boolean) -> System.Void: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: System.String) -> System.Void: ...
    def BeginInvoke(self, streamName: System.String, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    @staticmethod
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    @staticmethod
    def Init(configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    @staticmethod
    def InitForConfiguration(locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    @staticmethod
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    @staticmethod
    def IsInitDelayed(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    @staticmethod
    def RequireCompleteInit(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    @staticmethod
    def IsSecondaryRoot(configPath: str) -> bool: ...
    @staticmethod
    def GetStreamName(configPath: str) -> str: ...
    @staticmethod
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    @staticmethod
    def GetStreamVersion(streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    @staticmethod
    def DeleteStream(streamName: str) -> None: ...
    @staticmethod
    def IsFile(streamName: str) -> bool: ...
    @staticmethod
    def get_SupportsChangeNotifications(self) -> bool: ...
    @staticmethod
    def StartMonitoringStreamForChanges(streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    @staticmethod
    def StopMonitoringStreamForChanges(streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    @staticmethod
    def get_SupportsRefresh(self) -> bool: ...
    @staticmethod
    def get_SupportsPath(self) -> bool: ...
    @staticmethod
    def get_SupportsLocation(self) -> bool: ...
    @staticmethod
    def IsAboveApplication(configPath: str) -> bool: ...
    @staticmethod
    def IsDefinitionAllowed(configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    @staticmethod
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    @staticmethod
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    @staticmethod
    def IsLocationApplicable(configPath: str) -> bool: ...
    @staticmethod
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    @staticmethod
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    @staticmethod
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    @staticmethod
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    @staticmethod
    def DecryptSection(encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    @staticmethod
    def EncryptSection(clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    @staticmethod
    def GetConfigType(typeName: str, throwOnError: bool) -> System.Type: ...
    @staticmethod
    def GetConfigTypeName(t: System.Type) -> str: ...
    @staticmethod
    def get_IsRemote(self) -> bool: ...
    @staticmethod
    def RefreshConfigPaths(self) -> None: ...
    @staticmethod
    def get_HasLocalConfig(self) -> bool: ...
    @staticmethod
    def get_HasRoamingConfig(self) -> bool: ...
    @staticmethod
    def get_IsAppConfigHttp(self) -> bool: ...
    @staticmethod
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    @staticmethod
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    @staticmethod
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    @staticmethod
    def get_Filename(self) -> str: ...
    @staticmethod
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    @staticmethod
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    @staticmethod
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    @staticmethod
    def Init(typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    @staticmethod
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    @staticmethod
    def get_SupportsUserConfig(self) -> bool: ...
    @staticmethod
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    @staticmethod
    def get_MachineConfigPath(self) -> str: ...
    @staticmethod
    def get_ApplicationConfigUri(self) -> str: ...
    @staticmethod
    def get_ExeProductName(self) -> str: ...
    @staticmethod
    def get_ExeProductVersion(self) -> str: ...
    @staticmethod
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    @staticmethod
    def get_ExeRoamingConfigPath(self) -> str: ...
    @staticmethod
    def get_ExeLocalConfigDirectory(self) -> str: ...
    @staticmethod
    def get_ExeLocalConfigPath(self) -> str: ...
    @staticmethod
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    @staticmethod
    def IsExeConfig(configPath: str) -> bool: ...
    @staticmethod
    def IsRoamingUserConfig(configPath: str) -> bool: ...
    @staticmethod
    def IsLocalUserConfig(configPath: str) -> bool: ...
    @staticmethod
    def GetExeConfigPath(self) -> str: ...
    @staticmethod
    def GetRoamingUserConfigPath(self) -> str: ...
    @staticmethod
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    @staticmethod
    def Create(typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    @staticmethod
    def NormalizeLocationSubPath(subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    @staticmethod
    def get_SupportsChangeNotifications(self) -> bool: ...
    @staticmethod
    def get_SupportsRefresh(self) -> bool: ...
    @staticmethod
    def get_SupportsPath(self) -> bool: ...
    @staticmethod
    def get_SupportsLocation(self) -> bool: ...
    @staticmethod
    def get_IsRemote(self) -> bool: ...
    @staticmethod
    def Init(configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    @staticmethod
    def InitForConfiguration(locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    @staticmethod
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    @staticmethod
    def IsInitDelayed(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    @staticmethod
    def RequireCompleteInit(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    @staticmethod
    def IsSecondaryRoot(configPath: str) -> bool: ...
    @staticmethod
    def GetStreamName(configPath: str) -> str: ...
    @staticmethod
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    @staticmethod
    def GetStreamVersion(streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    @staticmethod
    def DeleteStream(streamName: str) -> None: ...
    @staticmethod
    def IsFile(streamName: str) -> bool: ...
    @staticmethod
    def StartMonitoringStreamForChanges(streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    @staticmethod
    def StopMonitoringStreamForChanges(streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    @staticmethod
    def IsAboveApplication(configPath: str) -> bool: ...
    @staticmethod
    def GetConfigPathFromLocationSubPath(configPath: str, locationSubPath: str) -> str: ...
    @staticmethod
    def IsLocationApplicable(configPath: str) -> bool: ...
    @staticmethod
    def IsDefinitionAllowed(configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    @staticmethod
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    @staticmethod
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    @staticmethod
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    @staticmethod
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    @staticmethod
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...
    @staticmethod
    def DecryptSection(encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    @staticmethod
    def EncryptSection(clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    @staticmethod
    def GetConfigType(typeName: str, throwOnError: bool) -> System.Type: ...
    @staticmethod
    def GetConfigTypeName(t: System.Type) -> str: ...
    @staticmethod
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    @staticmethod
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    @staticmethod
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    @staticmethod
    def RefreshConfigPaths(self) -> None: ...
    @staticmethod
    def get_HasLocalConfig(self) -> bool: ...
    @staticmethod
    def get_HasRoamingConfig(self) -> bool: ...
    @staticmethod
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    @staticmethod
    def get_ConfigPath(self) -> str: ...
    @staticmethod
    def get_StreamName(self) -> str: ...
    @staticmethod
    def get_HasInitErrors(self) -> bool: ...
    @staticmethod
    def ThrowIfInitErrors(self) -> None: ...
    @staticmethod
    def GetSection(configKey: str) -> Any: ...
    @staticmethod
    def GetLkgSection(configKey: str) -> Any: ...
    @staticmethod
    def RefreshSection(configKey: str) -> None: ...
    @staticmethod
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    @staticmethod
    def get_IsDesignTime(self) -> bool: ...
    @staticmethod
    def Init(host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    @staticmethod
    def add_ConfigChanged(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def remove_ConfigChanged(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def add_ConfigRemoved(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def remove_ConfigRemoved(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def GetSection(section: str, configPath: str) -> Any: ...
    @staticmethod
    def GetUniqueConfigPath(configPath: str) -> str: ...
    @staticmethod
    def GetUniqueConfigRecord(configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    @staticmethod
    def GetConfigRecord(configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    @staticmethod
    def RemoveConfig(configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    @staticmethod
    def SetConfigurationSystem(internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    @staticmethod
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    @staticmethod
    def get_SupportsUserConfig(self) -> bool: ...
    @staticmethod
    def GetSection(configKey: str) -> Any: ...
    @staticmethod
    def RefreshConfig(sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    @staticmethod
    def get_ConfigPath(self) -> str: ...
    @staticmethod
    def set_ConfigPath(value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    @staticmethod
    def Invoke(sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    @staticmethod
    def BeginInvoke(sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    @staticmethod
    def EndInvoke(result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    @staticmethod
    def IsSecondaryRoot(configPath: str) -> bool: ...
    @staticmethod
    def IsTrustedConfigPath(configPath: str) -> bool: ...
    @staticmethod
    def IsFullTrustSectionWithoutAptcaAllowed(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    @staticmethod
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    @staticmethod
    def add_ConfigChanged(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def remove_ConfigChanged(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def add_ConfigRemoved(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def remove_ConfigRemoved(value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    @staticmethod
    def GetSection(section: str, configPath: str) -> Any: ...
    @staticmethod
    def GetUniqueConfigPath(configPath: str) -> str: ...
    @staticmethod
    def GetUniqueConfigRecord(configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    @staticmethod
    def GetConfigRecord(configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    @staticmethod
    def RemoveConfig(configPath: str) -> None: ...
    @staticmethod
    def RemoveConfigRecord(configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    @staticmethod
    def ClearResult(configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    @staticmethod
    def Invoke(streamName: str) -> None: ...
    @staticmethod
    def BeginInvoke(streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    @staticmethod
    def EndInvoke(result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: System.Configuration.Internal.IInternalConfigHost
    Root: System.Configuration.Internal.IInternalConfigRoot
    def get_Host(self) -> System.Configuration.Internal.IInternalConfigHost: ...
    def get_Root(self) -> System.Configuration.Internal.IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: System.Configuration.Internal.StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: System.Configuration.Internal.IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: System.Configuration.Internal.IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.Internal.InternalConfigEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: System.Configuration.Internal.InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> System.Configuration.Internal.IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[typing.Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[typing.Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: InternalConfigEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    pass

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[typing.Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[typing.Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: InternalConfigEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class IConfigErrorInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[typing.Any]) -> None: ...

class IConfigurationManagerHelper:
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[typing.Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: InternalConfigEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class IConfigErrorInfo:
    def __init__(self , *args: typing.Any) -> None: ...
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[typing.Any]) -> None: ...

class IConfigurationManagerHelper:
    def __init__(self , *args: typing.Any) -> None: ...
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def __init__(self , *args: typing.Any) -> None: ...
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[typing.Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    def __init__(self , *args: typing.Any) -> None: ...
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    def __init__(self , *args: typing.Any) -> None: ...
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    def __init__(self , *args: typing.Any) -> None: ...
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: InternalConfigEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...

class ConfigSystem:
    pass

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class IConfigErrorInfo:
    def __init__(self , *args: typing.Any) -> None: ...
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[typing.Any]) -> None: ...

class IConfigurationManagerHelper:
    def __init__(self , *args: typing.Any) -> None: ...
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def __init__(self , *args: typing.Any) -> None: ...
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[typing.Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    def __init__(self , *args: typing.Any) -> None: ...
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    def __init__(self , *args: typing.Any) -> None: ...
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    def __init__(self , *args: typing.Any) -> None: ...
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: InternalConfigEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def Dispose(self) -> None: ...
    def __init__(self, ) -> DummyDisposable: ...

class ConfigSystem:
    def __init__(self, ) -> ConfigSystem: ...

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class IConfigErrorInfo:
    def __init__(self , *args: typing.Any) -> None: ...
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[typing.Any]) -> None: ...

class IConfigurationManagerHelper:
    def __init__(self , *args: typing.Any) -> None: ...
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def __init__(self , *args: typing.Any) -> None: ...
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[typing.Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    def __init__(self , *args: typing.Any) -> None: ...
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    def __init__(self , *args: typing.Any) -> None: ...
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    def __init__(self , *args: typing.Any) -> None: ...
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...
    def __init__(self, configPath: str) -> InternalConfigEventArgs: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: InternalConfigEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def __init__(self, object: typing.Any, method: System.IntPtr) -> InternalConfigEventHandler: ...

class InternalConfigHost:
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...
    def __init__(self, ) -> InternalConfigHost: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def __init__(self, object: typing.Any, method: System.IntPtr) -> StreamChangeCallback: ...

class WriteFileContext:
    pass

class DummyDisposable:
    def __init__(self, ) -> None: ...
    def Dispose(self) -> None: ...

class ConfigSystem:
    def __init__(self, ) -> None: ...

class ConfigurationManagerInternal:
    pass

class DelegatingConfigHost:
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def get_SupportsChangeNotifications(self) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def get_IsRemote(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class FileVersion:
    def Equals(self, obj: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class IConfigErrorInfo:
    def __init__(self , *args: typing.Any) -> None: ...
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...

class IConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    Host: IInternalConfigHost
    Root: IInternalConfigRoot
    def get_Host(self) -> IInternalConfigHost: ...
    def get_Root(self) -> IInternalConfigRoot: ...
    def Init(self, typeConfigHost: System.Type, hostInitParams: list[typing.Any]) -> None: ...

class IConfigurationManagerHelper:
    def __init__(self , *args: typing.Any) -> None: ...
    def EnsureNetConfigLoaded(self) -> None: ...

class IConfigurationManagerInternal:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    SetConfigurationSystemInProgress: bool
    MachineConfigPath: str
    ApplicationConfigUri: str
    ExeProductName: str
    ExeProductVersion: str
    ExeRoamingConfigDirectory: str
    ExeRoamingConfigPath: str
    ExeLocalConfigDirectory: str
    ExeLocalConfigPath: str
    UserConfigFilename: str
    def get_SupportsUserConfig(self) -> bool: ...
    def get_SetConfigurationSystemInProgress(self) -> bool: ...
    def get_MachineConfigPath(self) -> str: ...
    def get_ApplicationConfigUri(self) -> str: ...
    def get_ExeProductName(self) -> str: ...
    def get_ExeProductVersion(self) -> str: ...
    def get_ExeRoamingConfigDirectory(self) -> str: ...
    def get_ExeRoamingConfigPath(self) -> str: ...
    def get_ExeLocalConfigDirectory(self) -> str: ...
    def get_ExeLocalConfigPath(self) -> str: ...
    def get_UserConfigFilename(self) -> str: ...

class IInternalConfigClientHost:
    def __init__(self , *args: typing.Any) -> None: ...
    def IsExeConfig(self, configPath: str) -> bool: ...
    def IsRoamingUserConfig(self, configPath: str) -> bool: ...
    def IsLocalUserConfig(self, configPath: str) -> bool: ...
    def GetExeConfigPath(self) -> str: ...
    def GetRoamingUserConfigPath(self) -> str: ...
    def GetLocalUserConfigPath(self) -> str: ...

class IInternalConfigConfigurationFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, typeConfigHost: System.Type, hostInitConfigurationParams: list[typing.Any]) -> System.Configuration.Configuration: ...
    def NormalizeLocationSubPath(self, subPath: str, errorInfo: IConfigErrorInfo) -> str: ...

class IInternalConfigHost:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsChangeNotifications: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    IsRemote: bool
    def get_SupportsChangeNotifications(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def get_IsRemote(self) -> bool: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, configRecord: IInternalConfigRecord) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForRead(self, streamName: str, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @typing.overload
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&, assertPermissions: bool) -> System.IO.Stream: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    @typing.overload
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any, assertPermissions: bool) -> None: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...
    def StartMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> typing.Any: ...
    def StopMonitoringStreamForChanges(self, streamName: str, callback: StreamChangeCallback) -> None: ...
    def IsAboveApplication(self, configPath: str) -> bool: ...
    def GetConfigPathFromLocationSubPath(self, configPath: str, locationSubPath: str) -> str: ...
    def IsLocationApplicable(self, configPath: str) -> bool: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...
    def DecryptSection(self, encryptedXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def EncryptSection(self, clearTextXml: str, protectionProvider: System.Configuration.ProtectedConfigurationProvider, protectedConfigSection: System.Configuration.ProtectedConfigurationSection) -> str: ...
    def GetConfigType(self, typeName: str, throwOnError: bool) -> System.Type: ...
    def GetConfigTypeName(self, t: System.Type) -> str: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class IInternalConfigHostPaths:
    def __init__(self , *args: typing.Any) -> None: ...
    HasLocalConfig: bool
    HasRoamingConfig: bool
    IsAppConfigHttp: bool
    def RefreshConfigPaths(self) -> None: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_HasRoamingConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...

class IInternalConfigRecord:
    def __init__(self , *args: typing.Any) -> None: ...
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class IInternalConfigRoot:
    def __init__(self , *args: typing.Any) -> None: ...
    IsDesignTime: bool
    def get_IsDesignTime(self) -> bool: ...
    def Init(self, host: IInternalConfigHost, isDesignTime: bool) -> None: ...
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...

class IInternalConfigSettingsFactory:
    def __init__(self , *args: typing.Any) -> None: ...
    def SetConfigurationSystem(self, internalConfigSystem: IInternalConfigSystem, initComplete: bool) -> None: ...
    def CompleteInit(self) -> None: ...

class IInternalConfigSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    SupportsUserConfig: bool
    def get_SupportsUserConfig(self) -> bool: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def RefreshConfig(self, sectionName: str) -> None: ...

class InternalConfigConfigurationFactory:
    pass

class InternalConfigEventArgs(System.EventArgs):
    def __init__(self, configPath: str) -> None: ...
    ConfigPath: str
    def get_ConfigPath(self) -> str: ...
    def set_ConfigPath(self, value: str) -> None: ...

class InternalConfigEventHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: InternalConfigEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: InternalConfigEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class InternalConfigHost:
    def __init__(self, ) -> None: ...
    def IsSecondaryRoot(self, configPath: str) -> bool: ...
    def IsTrustedConfigPath(self, configPath: str) -> bool: ...
    def IsFullTrustSectionWithoutAptcaAllowed(self, configRecord: IInternalConfigRecord) -> bool: ...
    def Impersonate(self) -> System.IDisposable: ...

class InternalConfigRoot:
    def add_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigChanged(self, value: InternalConfigEventHandler) -> None: ...
    def add_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def remove_ConfigRemoved(self, value: InternalConfigEventHandler) -> None: ...
    def GetSection(self, section: str, configPath: str) -> typing.Any: ...
    def GetUniqueConfigPath(self, configPath: str) -> str: ...
    def GetUniqueConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def GetConfigRecord(self, configPath: str) -> IInternalConfigRecord: ...
    def RemoveConfig(self, configPath: str) -> None: ...
    def RemoveConfigRecord(self, configRecord: System.Configuration.BaseConfigurationRecord) -> None: ...
    def ClearResult(self, configRecord: System.Configuration.BaseConfigurationRecord, configKey: str, forceEvaluation: bool) -> None: ...

class InternalConfigSettingsFactory:
    pass

class StreamChangeCallback(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, streamName: str) -> None: ...
    def BeginInvoke(self, streamName: str, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class WriteFileContext:
    pass

