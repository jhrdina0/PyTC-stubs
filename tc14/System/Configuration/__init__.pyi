import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml
import typing

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml

import System
import System.Collections
import System.Collections.Specialized
import System.ComponentModel
import System.Configuration
import System.Configuration.Internal
import System.Configuration.Provider
import System.Globalization
import System.IO
import System.Runtime.Serialization
import System.Runtime.Versioning
import System.Security.Cryptography
import System.Xml

from System import Array, AsyncCallback, Attribute, Boolean, DateTime, EventArgs, Exception, Func, GenericUriParserOptions, IAsyncResult, Int32, Int64, MulticastDelegate, Object, Object&, String, String&, SystemException, TimeSpan, Type, UriIdnScope, Void
from System.Collections import Hashtable, ICollection, IEnumerator, ReadOnlyCollectionBase
from System.Collections.Specialized import NameObjectCollectionBase, NameValueCollection, StringCollection
from System.ComponentModel import CancelEventArgs, ITypeDescriptorContext, PropertyChangedEventHandler, TypeConverter
from System.Configuration import *
from System.Configuration.Internal import DelegatingConfigHost, IConfigErrorInfo, IInternalConfigRecord, IInternalConfigRoot
from System.Configuration.Provider import ProviderBase, ProviderCollection
from System.Globalization import CultureInfo
from System.IO import Stream
from System.Runtime.Serialization import SerializationInfo, StreamingContext
from System.Runtime.Versioning import FrameworkName
from System.Security.Cryptography import RSAParameters
from System.Xml import XmlAttribute, XmlCDataSection, XmlComment, XmlDocument, XmlElement, XmlNode, XmlReader, XmlSignificantWhitespace, XmlText, XmlTextReader, XmlWhitespace

from System import Array, AsyncCallback, Attribute, Boolean, DateTime, EventArgs, Exception, Func, GenericUriParserOptions, IAsyncResult, Int32, Int64, MulticastDelegate, Object, Object&, String, String&, SystemException, TimeSpan, Type, UriIdnScope, Void
from System.Collections import Hashtable, ICollection, IEnumerator, ReadOnlyCollectionBase
from System.Collections.Specialized import NameObjectCollectionBase, NameValueCollection, StringCollection
from System.ComponentModel import CancelEventArgs, ITypeDescriptorContext, PropertyChangedEventHandler, TypeConverter
from System.Configuration import *
from System.Configuration.Internal import DelegatingConfigHost, IConfigErrorInfo, IInternalConfigRecord, IInternalConfigRoot
from System.Configuration.Provider import ProviderBase, ProviderCollection
from System.Globalization import CultureInfo
from System.IO import Stream
from System.Runtime.Serialization import SerializationInfo, StreamingContext
from System.Runtime.Versioning import FrameworkName
from System.Security.Cryptography import RSAParameters
from System.Xml import XmlAttribute, XmlCDataSection, XmlComment, XmlDocument, XmlElement, XmlNode, XmlReader, XmlSignificantWhitespace, XmlText, XmlTextReader, XmlWhitespace

from __future__ import annotations

from abc import ABC
from typing import Callable
from typing import Generic
from typing import Iterator
from typing import Optional
from typing import Tuple
from typing import TypeVar
from typing import overload

from System import Array
from System import Attribute
from System import Enum
from System import EventArgs
from System import Exception
from System import GenericUriParserOptions
from System import Guid
from System import ICloneable
from System import IntPtr
from System import Object
from System import SystemException
from System import Type
from System import UriIdnScope
from System import ValueType
from System.Collections import Hashtable
from System.Collections import ICollection
from System.Collections import IDictionary
from System.Collections import IEnumerable
from System.Collections import IEnumerator
from System.Collections.Generic import Dictionary
from System.Collections.Specialized import NameValueCollection
from System.Collections.Specialized.NameObjectCollectionBase import KeysCollection
from System.ComponentModel import CancelEventArgs
from System.ComponentModel import INotifyPropertyChanged
from System.ComponentModel import PropertyChangedEventHandler
from System.Configuration.Internal import IConfigErrorInfo
from System.Configuration.Provider import ProviderBase
from System.Configuration.Provider import ProviderCollection
from System.IO import Stream
from System.IO import TextReader
from System.IO import TextWriter
from System.Reflection import MethodBase
from System.Runtime.InteropServices import _Attribute
from System.Runtime.InteropServices import _Exception
from System.Runtime.Serialization import IDeserializationCallback
from System.Runtime.Serialization import ISerializable
from System.Runtime.Serialization import SerializationInfo
from System.Runtime.Serialization import StreamingContext
from System.Xml import XmlAttribute
from System.Xml import XmlAttributeCollection
from System.Xml import XmlCDataSection
from System.Xml import XmlComment
from System.Xml import XmlDeclaration
from System.Xml import XmlDocument
from System.Xml import XmlDocumentFragment
from System.Xml import XmlDocumentType
from System.Xml import XmlElement
from System.Xml import XmlEntityReference
from System.Xml import XmlImplementation
from System.Xml import XmlNamespaceManager
from System.Xml import XmlNameTable
from System.Xml import XmlNode
from System.Xml import XmlNodeChangedEventHandler
from System.Xml import XmlNodeList
from System.Xml import XmlNodeType
from System.Xml import XmlProcessingInstruction
from System.Xml import XmlReader
from System.Xml import XmlResolver
from System.Xml import XmlSignificantWhitespace
from System.Xml import XmlText
from System.Xml import XmlTextReader
from System.Xml import XmlWhitespace
from System.Xml import XmlWriter
from System.Xml.Schema import IXmlSchemaInfo
from System.Xml.Schema import ValidationEventHandler
from System.Xml.Schema import XmlSchemaSet
from System.Xml.XPath import IXPathNavigable
from System.Xml.XPath import XPathNavigator

T = TypeVar("T")

class EventType(Generic[T]):
    def __iadd__(self, other: T): ...
    def __isub__(self, other: T): ...

class AppSettingsReader(Object):
    """"""

    def __init__(self):
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetValue(self, key: str, type: Type) -> object:
        """

        :param key:
        :param type:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class ApplicationScopedSettingAttribute(SettingAttribute, _Attribute):
    """"""

    def __init__(self):
        """"""
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class ApplicationSettingsBase(ABC, SettingsBase, INotifyPropertyChanged):
    """"""

    @property
    def Context(self) -> SettingsContext:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> object:
        """

        :return:
        """
    @Item.setter
    def Item(self, value: object) -> None: ...
    @property
    def Properties(self) -> SettingsPropertyCollection:
        """

        :return:
        """
    @property
    def PropertyValues(self) -> SettingsPropertyValueCollection:
        """

        :return:
        """
    @property
    def Providers(self) -> SettingsProviderCollection:
        """

        :return:
        """
    @property
    def SettingsKey(self) -> str:
        """

        :return:
        """
    @SettingsKey.setter
    def SettingsKey(self, value: str) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetPreviousVersion(self, propertyName: str) -> object:
        """

        :param propertyName:
        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def Initialize(
        self,
        context: SettingsContext,
        properties: SettingsPropertyCollection,
        providers: SettingsProviderCollection,
    ) -> None:
        """

        :param context:
        :param properties:
        :param providers:
        """
    def Reload(self) -> None:
        """"""
    def Reset(self) -> None:
        """"""
    def Save(self) -> None:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def Upgrade(self) -> None:
        """"""
    def __getitem__(self, propertyName: str) -> object:
        """

        :param propertyName:
        :return:
        """
    def __setitem__(self, propertyName: str, value: object) -> None:
        """

        :param propertyName:
        :param value:
        """
    PropertyChanged: EventType[PropertyChangedEventHandler] = ...
    """"""
    SettingChanging: EventType[SettingChangingEventHandler] = ...
    """"""
    SettingsLoaded: EventType[SettingsLoadedEventHandler] = ...
    """"""
    SettingsSaving: EventType[SettingsSavingEventHandler] = ...
    """"""

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    """"""

    def __init__(self):
        """"""
    @property
    def IsDeclarationRequired(self) -> bool:
        """"""
    @property
    def IsDeclared(self) -> bool:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def SectionGroupName(self) -> str:
        """"""
    @property
    def SectionGroups(self) -> ConfigurationSectionGroupCollection:
        """"""
    @property
    def Sections(self) -> ConfigurationSectionCollection:
        """"""
    @property
    def Type(self) -> str:
        """"""
    @Type.setter
    def Type(self, value: str) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def ForceDeclaration(self) -> None:
        """"""
    @overload
    def ForceDeclaration(self, force: bool) -> None:
        """"""
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class ClientSettingsSection(ConfigurationSection):
    """"""

    def __init__(self):
        """"""
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    @property
    def SectionInformation(self) -> SectionInformation:
        """"""
    @property
    def Settings(self) -> SettingElementCollection:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """

class ClientSettingsStore(Object):
    """"""

    def __init__(self):
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class CommonConfigurationStrings(ABC, Object):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class ConfigXmlAttribute(XmlAttribute, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable):
    """"""

    def __init__(
        self,
        filename: str,
        line: int,
        prefix: str,
        localName: str,
        namespaceUri: str,
        doc: XmlDocument,
    ):
        """

        :param filename:
        :param line:
        :param prefix:
        :param localName:
        :param namespaceUri:
        :param doc:
        """
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def OwnerElement(self) -> XmlElement:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Specified(self) -> bool:
        """"""
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """

class ConfigXmlCDataSection(
    XmlCDataSection, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable
):
    """"""

    def __init__(self, filename: str, line: int, data: str, doc: XmlDocument):
        """

        :param filename:
        :param line:
        :param data:
        :param doc:
        """
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def Data(self) -> str:
        """"""
    @Data.setter
    def Data(self, value: str) -> None: ...
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def Length(self) -> int:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def AppendData(self, strData: str) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    def DeleteData(self, offset: int, count: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertData(self, offset: int, strData: str) -> None:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceData(self, offset: int, count: int, strData: str) -> None:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    def Substring(self, offset: int, count: int) -> str:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """

class ConfigXmlComment(XmlComment, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable):
    """"""

    def __init__(self, filename: str, line: int, comment: str, doc: XmlDocument):
        """

        :param filename:
        :param line:
        :param comment:
        :param doc:
        """
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def Data(self) -> str:
        """"""
    @Data.setter
    def Data(self, value: str) -> None: ...
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def Length(self) -> int:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def AppendData(self, strData: str) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    def DeleteData(self, offset: int, count: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertData(self, offset: int, strData: str) -> None:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceData(self, offset: int, count: int, strData: str) -> None:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    def Substring(self, offset: int, count: int) -> str:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """

class ConfigXmlDocument(XmlDocument, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable):
    """"""

    def __init__(self):
        """"""
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def DocumentElement(self) -> XmlElement:
        """"""
    @property
    def DocumentType(self) -> XmlDocumentType:
        """"""
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def Implementation(self) -> XmlImplementation:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NameTable(self) -> XmlNameTable:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreserveWhitespace(self) -> bool:
        """"""
    @PreserveWhitespace.setter
    def PreserveWhitespace(self, value: bool) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Schemas(self) -> XmlSchemaSet:
        """"""
    @Schemas.setter
    def Schemas(self, value: XmlSchemaSet) -> None: ...
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    @property
    def XmlResolver(self) -> XmlResolver:
        """"""
    @XmlResolver.setter
    def XmlResolver(self, value: XmlResolver) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    @overload
    def CreateAttribute(self, name: str) -> XmlAttribute:
        """"""
    @overload
    def CreateAttribute(self, qualifiedName: str, namespaceURI: str) -> XmlAttribute:
        """"""
    @overload
    def CreateAttribute(self, prefix: str, localName: str, namespaceURI: str) -> XmlAttribute:
        """"""
    def CreateCDataSection(self, data: str) -> XmlCDataSection:
        """"""
    def CreateComment(self, data: str) -> XmlComment:
        """"""
    def CreateDocumentFragment(self) -> XmlDocumentFragment:
        """"""
    def CreateDocumentType(
        self, name: str, publicId: str, systemId: str, internalSubset: str
    ) -> XmlDocumentType:
        """"""
    @overload
    def CreateElement(self, name: str) -> XmlElement:
        """"""
    @overload
    def CreateElement(self, qualifiedName: str, namespaceURI: str) -> XmlElement:
        """"""
    @overload
    def CreateElement(self, prefix: str, localName: str, namespaceURI: str) -> XmlElement:
        """"""
    def CreateEntityReference(self, name: str) -> XmlEntityReference:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    @overload
    def CreateNode(self, type: XmlNodeType, name: str, namespaceURI: str) -> XmlNode:
        """"""
    @overload
    def CreateNode(self, nodeTypeString: str, name: str, namespaceURI: str) -> XmlNode:
        """"""
    @overload
    def CreateNode(self, type: XmlNodeType, prefix: str, name: str, namespaceURI: str) -> XmlNode:
        """"""
    def CreateProcessingInstruction(self, target: str, data: str) -> XmlProcessingInstruction:
        """"""
    def CreateSignificantWhitespace(self, text: str) -> XmlSignificantWhitespace:
        """"""
    def CreateTextNode(self, text: str) -> XmlText:
        """"""
    def CreateWhitespace(self, text: str) -> XmlWhitespace:
        """"""
    def CreateXmlDeclaration(self, version: str, encoding: str, standalone: str) -> XmlDeclaration:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetElementById(self, elementId: str) -> XmlElement:
        """"""
    @overload
    def GetElementsByTagName(self, name: str) -> XmlNodeList:
        """"""
    @overload
    def GetElementsByTagName(self, localName: str, namespaceURI: str) -> XmlNodeList:
        """"""
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    def ImportNode(self, node: XmlNode, deep: bool) -> XmlNode:
        """"""
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    @overload
    def Load(self, inStream: Stream) -> None:
        """"""
    @overload
    def Load(self, txtReader: TextReader) -> None:
        """"""
    @overload
    def Load(self, reader: XmlReader) -> None:
        """"""
    @overload
    def Load(self, filename: str) -> None:
        """"""
    def LoadSingleElement(self, filename: str, sourceReader: XmlTextReader) -> None:
        """

        :param filename:
        :param sourceReader:
        """
    def LoadXml(self, xml: str) -> None:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def ReadNode(self, reader: XmlReader) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    @overload
    def Save(self, outStream: Stream) -> None:
        """"""
    @overload
    def Save(self, writer: TextWriter) -> None:
        """"""
    @overload
    def Save(self, w: XmlWriter) -> None:
        """"""
    @overload
    def Save(self, filename: str) -> None:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    @overload
    def Validate(self, validationEventHandler: ValidationEventHandler) -> None:
        """"""
    @overload
    def Validate(
        self, validationEventHandler: ValidationEventHandler, nodeToValidate: XmlNode
    ) -> None:
        """"""
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    NodeChanged: EventType[XmlNodeChangedEventHandler] = ...
    """"""
    NodeChanging: EventType[XmlNodeChangedEventHandler] = ...
    """"""
    NodeInserted: EventType[XmlNodeChangedEventHandler] = ...
    """"""
    NodeInserting: EventType[XmlNodeChangedEventHandler] = ...
    """"""
    NodeRemoved: EventType[XmlNodeChangedEventHandler] = ...
    """"""
    NodeRemoving: EventType[XmlNodeChangedEventHandler] = ...
    """"""

class ConfigXmlElement(XmlElement, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable):
    """"""

    def __init__(
        self,
        filename: str,
        line: int,
        prefix: str,
        localName: str,
        namespaceUri: str,
        doc: XmlDocument,
    ):
        """

        :param filename:
        :param line:
        :param prefix:
        :param localName:
        :param namespaceUri:
        :param doc:
        """
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasAttributes(self) -> bool:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsEmpty(self) -> bool:
        """"""
    @IsEmpty.setter
    def IsEmpty(self, value: bool) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def GetAttribute(self, name: str) -> str:
        """"""
    @overload
    def GetAttribute(self, localName: str, namespaceURI: str) -> str:
        """"""
    @overload
    def GetAttributeNode(self, name: str) -> XmlAttribute:
        """"""
    @overload
    def GetAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute:
        """"""
    @overload
    def GetElementsByTagName(self, name: str) -> XmlNodeList:
        """"""
    @overload
    def GetElementsByTagName(self, localName: str, namespaceURI: str) -> XmlNodeList:
        """"""
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def HasAttribute(self, name: str) -> bool:
        """"""
    @overload
    def HasAttribute(self, localName: str, namespaceURI: str) -> bool:
        """"""
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveAllAttributes(self) -> None:
        """"""
    @overload
    def RemoveAttribute(self, name: str) -> None:
        """"""
    @overload
    def RemoveAttribute(self, localName: str, namespaceURI: str) -> None:
        """"""
    def RemoveAttributeAt(self, i: int) -> XmlNode:
        """"""
    @overload
    def RemoveAttributeNode(self, oldAttr: XmlAttribute) -> XmlAttribute:
        """"""
    @overload
    def RemoveAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    @overload
    def SetAttribute(self, name: str, value: str) -> None:
        """"""
    @overload
    def SetAttribute(self, localName: str, namespaceURI: str, value: str) -> str:
        """"""
    @overload
    def SetAttributeNode(self, newAttr: XmlAttribute) -> XmlAttribute:
        """"""
    @overload
    def SetAttributeNode(self, localName: str, namespaceURI: str) -> XmlAttribute:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """

class ConfigXmlSignificantWhitespace(
    XmlSignificantWhitespace, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable
):
    """"""

    def __init__(self, filename: str, line: int, strData: str, doc: XmlDocument):
        """

        :param filename:
        :param line:
        :param strData:
        :param doc:
        """
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def Data(self) -> str:
        """"""
    @Data.setter
    def Data(self, value: str) -> None: ...
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def Length(self) -> int:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def AppendData(self, strData: str) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    def DeleteData(self, offset: int, count: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertData(self, offset: int, strData: str) -> None:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceData(self, offset: int, count: int, strData: str) -> None:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    def Substring(self, offset: int, count: int) -> str:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """

class ConfigXmlText(XmlText, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable):
    """"""

    def __init__(self, filename: str, line: int, strData: str, doc: XmlDocument):
        """

        :param filename:
        :param line:
        :param strData:
        :param doc:
        """
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def Data(self) -> str:
        """"""
    @Data.setter
    def Data(self, value: str) -> None: ...
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def Length(self) -> int:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def AppendData(self, strData: str) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    def DeleteData(self, offset: int, count: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertData(self, offset: int, strData: str) -> None:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceData(self, offset: int, count: int, strData: str) -> None:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    def SplitText(self, offset: int) -> XmlText:
        """"""
    def Substring(self, offset: int, count: int) -> str:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """

class ConfigXmlWhitespace(
    XmlWhitespace, IEnumerable, IConfigErrorInfo, IXPathNavigable, ICloneable
):
    """"""

    def __init__(self, filename: str, line: int, comment: str, doc: XmlDocument):
        """

        :param filename:
        :param line:
        :param comment:
        :param doc:
        """
    @property
    def Attributes(self) -> XmlAttributeCollection:
        """"""
    @property
    def BaseURI(self) -> str:
        """"""
    @property
    def ChildNodes(self) -> XmlNodeList:
        """"""
    @property
    def Data(self) -> str:
        """"""
    @Data.setter
    def Data(self, value: str) -> None: ...
    @property
    def Filename(self) -> str:
        """"""
    @property
    def FirstChild(self) -> XmlNode:
        """"""
    @property
    def HasChildNodes(self) -> bool:
        """"""
    @property
    def InnerText(self) -> str:
        """"""
    @InnerText.setter
    def InnerText(self, value: str) -> None: ...
    @property
    def InnerXml(self) -> str:
        """"""
    @InnerXml.setter
    def InnerXml(self, value: str) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """"""
    @property
    def Item(self) -> XmlElement:
        """"""
    @property
    def LastChild(self) -> XmlNode:
        """"""
    @property
    def Length(self) -> int:
        """"""
    @property
    def LineNumber(self) -> int:
        """"""
    @property
    def LocalName(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def NamespaceURI(self) -> str:
        """"""
    @property
    def NextSibling(self) -> XmlNode:
        """"""
    @property
    def NodeType(self) -> XmlNodeType:
        """"""
    @property
    def OuterXml(self) -> str:
        """"""
    @property
    def OwnerDocument(self) -> XmlDocument:
        """"""
    @property
    def ParentNode(self) -> XmlNode:
        """"""
    @property
    def Prefix(self) -> str:
        """"""
    @Prefix.setter
    def Prefix(self, value: str) -> None: ...
    @property
    def PreviousSibling(self) -> XmlNode:
        """"""
    @property
    def PreviousText(self) -> XmlNode:
        """"""
    @property
    def SchemaInfo(self) -> IXmlSchemaInfo:
        """"""
    @property
    def Value(self) -> str:
        """"""
    @Value.setter
    def Value(self, value: str) -> None: ...
    def AppendChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def AppendData(self, strData: str) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CloneNode(self, deep: bool) -> XmlNode:
        """"""
    def CreateNavigator(self) -> XPathNavigator:
        """"""
    def DeleteData(self, offset: int, count: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetNamespaceOfPrefix(self, prefix: str) -> str:
        """"""
    def GetPrefixOfNamespace(self, namespaceURI: str) -> str:
        """"""
    def GetType(self) -> Type:
        """

        :return:
        """
    def InsertAfter(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertBefore(self, newChild: XmlNode, refChild: XmlNode) -> XmlNode:
        """"""
    def InsertData(self, offset: int, strData: str) -> None:
        """"""
    def Normalize(self) -> None:
        """"""
    def PrependChild(self, newChild: XmlNode) -> XmlNode:
        """"""
    def RemoveAll(self) -> None:
        """"""
    def RemoveChild(self, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceChild(self, newChild: XmlNode, oldChild: XmlNode) -> XmlNode:
        """"""
    def ReplaceData(self, offset: int, count: int, strData: str) -> None:
        """"""
    @overload
    def SelectNodes(self, xpath: str) -> XmlNodeList:
        """"""
    @overload
    def SelectNodes(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNodeList:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str) -> XmlNode:
        """"""
    @overload
    def SelectSingleNode(self, xpath: str, nsmgr: XmlNamespaceManager) -> XmlNode:
        """"""
    def Substring(self, offset: int, count: int) -> str:
        """"""
    def Supports(self, feature: str, version: str) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def WriteContentTo(self, w: XmlWriter) -> None:
        """"""
    def WriteTo(self, w: XmlWriter) -> None:
        """"""
    @overload
    def __getitem__(self, name: str) -> XmlElement:
        """"""
    @overload
    def __getitem__(self, localname: str, ns: str) -> XmlElement:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """

class ConfigurationException(SystemException, _Exception, ISerializable):
    """"""

    @overload
    def __init__(self):
        """"""
    @overload
    def __init__(self, message: str):
        """

        :param message:
        """
    @overload
    def __init__(self, message: str, node: XmlNode):
        """

        :param message:
        :param node:
        """
    @overload
    def __init__(self, message: str, inner: Exception):
        """

        :param message:
        :param inner:
        """
    @overload
    def __init__(self, message: str, inner: Exception, node: XmlNode):
        """

        :param message:
        :param inner:
        :param node:
        """
    @overload
    def __init__(self, message: str, filename: str, line: int):
        """

        :param message:
        :param filename:
        :param line:
        """
    @overload
    def __init__(self, message: str, inner: Exception, filename: str, line: int):
        """

        :param message:
        :param inner:
        :param filename:
        :param line:
        """
    @property
    def BareMessage(self) -> str:
        """

        :return:
        """
    @property
    def Data(self) -> IDictionary:
        """

        :return:
        """
    @property
    def Filename(self) -> str:
        """

        :return:
        """
    @property
    def HResult(self) -> int:
        """

        :return:
        """
    @property
    def HelpLink(self) -> str:
        """

        :return:
        """
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @property
    def InnerException(self) -> Exception:
        """

        :return:
        """
    @property
    def Line(self) -> int:
        """

        :return:
        """
    @property
    def Message(self) -> str:
        """

        :return:
        """
    @property
    def Source(self) -> str:
        """

        :return:
        """
    @Source.setter
    def Source(self, value: str) -> None: ...
    @property
    def StackTrace(self) -> str:
        """

        :return:
        """
    @property
    def TargetSite(self) -> MethodBase:
        """

        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetBaseException(self) -> Exception:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @classmethod
    def GetXmlNodeFilename(cls, node: XmlNode) -> str:
        """

        :param node:
        :return:
        """
    @classmethod
    def GetXmlNodeLineNumber(cls, node: XmlNode) -> int:
        """

        :param node:
        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """

class ConfigurationManagerInternalFactory(ABC, Object):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class ConfigurationSettings(Object):
    """"""

    @classmethod
    @property
    def AppSettings(cls) -> NameValueCollection:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @classmethod
    def GetConfig(cls, sectionName: str) -> object:
        """

        :param sectionName:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class DefaultSettingValueAttribute(Attribute, _Attribute):
    """"""

    def __init__(self, value: str):
        """

        :param value:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    @property
    def Value(self) -> str:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class DictionarySectionHandler(Object, IConfigurationSectionHandler):
    """"""

    def __init__(self):
        """"""
    def Create(self, parent: object, configContext: object, section: XmlNode) -> object:
        """

        :param parent:
        :param configContext:
        :param section:
        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class HandlerBase(Object):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class IApplicationSettingsProvider:
    """"""

    def GetPreviousVersion(
        self, context: SettingsContext, property: SettingsProperty
    ) -> SettingsPropertyValue:
        """

        :param context:
        :param property:
        :return:
        """
    def Reset(self, context: SettingsContext) -> None:
        """

        :param context:
        """
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None:
        """

        :param context:
        :param properties:
        """

class IConfigurationSectionHandler:
    """"""

    def Create(self, parent: object, configContext: object, section: XmlNode) -> object:
        """

        :param parent:
        :param configContext:
        :param section:
        :return:
        """

class IConfigurationSystem:
    """"""

    def GetConfig(self, configKey: str) -> object:
        """

        :param configKey:
        :return:
        """
    def Init(self) -> None:
        """"""

class IPersistComponentSettings:
    """"""

    @property
    def SaveSettings(self) -> bool:
        """

        :return:
        """
    @SaveSettings.setter
    def SaveSettings(self, value: bool) -> None: ...
    @property
    def SettingsKey(self) -> str:
        """

        :return:
        """
    @SettingsKey.setter
    def SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None:
        """"""
    def ResetComponentSettings(self) -> None:
        """"""
    def SaveComponentSettings(self) -> None:
        """"""

class ISettingsProviderService:
    """"""

    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider:
        """

        :param property:
        :return:
        """

class IdnElement(ConfigurationElement):
    """"""

    def __init__(self):
        """"""
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def Enabled(self) -> UriIdnScope:
        """

        :return:
        """
    @Enabled.setter
    def Enabled(self, value: UriIdnScope) -> None: ...
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """

class IgnoreSectionHandler(Object, IConfigurationSectionHandler):
    """"""

    def __init__(self):
        """"""
    def Create(self, parent: object, configContext: object, section: XmlNode) -> object:
        """

        :param parent:
        :param configContext:
        :param section:
        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class IriParsingElement(ConfigurationElement):
    """"""

    def __init__(self):
        """"""
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def Enabled(self) -> bool:
        """

        :return:
        """
    @Enabled.setter
    def Enabled(self, value: bool) -> None: ...
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """

class LocalFileSettingsProvider(SettingsProvider, IApplicationSettingsProvider):
    """"""

    def __init__(self):
        """"""
    @property
    def ApplicationName(self) -> str:
        """

        :return:
        """
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    @property
    def Description(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetPreviousVersion(
        self, context: SettingsContext, property: SettingsProperty
    ) -> SettingsPropertyValue:
        """

        :param context:
        :param property:
        :return:
        """
    def GetPropertyValues(
        self, context: SettingsContext, collection: SettingsPropertyCollection
    ) -> SettingsPropertyValueCollection:
        """

        :param context:
        :param collection:
        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def Initialize(self, name: str, config: NameValueCollection) -> None:
        """"""
    def Reset(self, context: SettingsContext) -> None:
        """

        :param context:
        """
    def SetPropertyValues(
        self, context: SettingsContext, collection: SettingsPropertyValueCollection
    ) -> None:
        """

        :param context:
        :param collection:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None:
        """

        :param context:
        :param properties:
        """

class NameValueFileSectionHandler(Object, IConfigurationSectionHandler):
    """"""

    def __init__(self):
        """"""
    def Create(self, parent: object, configContext: object, section: XmlNode) -> object:
        """

        :param parent:
        :param configContext:
        :param section:
        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class NameValueSectionHandler(Object, IConfigurationSectionHandler):
    """"""

    def __init__(self):
        """"""
    def Create(self, parent: object, configContext: object, section: XmlNode) -> object:
        """

        :param parent:
        :param configContext:
        :param section:
        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class NoSettingsVersionUpgradeAttribute(Attribute, _Attribute):
    """"""

    def __init__(self):
        """"""
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class PrivilegedConfigurationManager(ABC, Object):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class ReadOnlyNameValueCollection(
    NameValueCollection, ICollection, IEnumerable, IDeserializationCallback, ISerializable
):
    """"""

    @property
    def AllKeys(self) -> Array[str]:
        """

        :return:
        """
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> str:
        """

        :return:
        """
    @property
    def Keys(self) -> NameObjectCollectionBase.KeysCollection:
        """

        :return:
        """
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    @overload
    def Add(self, c: NameValueCollection) -> None:
        """

        :param c:
        """
    @overload
    def Add(self, name: str, value: str) -> None:
        """

        :param name:
        :param value:
        """
    def Clear(self) -> None:
        """"""
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def Get(self, index: int) -> str:
        """

        :param index:
        :return:
        """
    @overload
    def Get(self, name: str) -> str:
        """

        :param name:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetKey(self, index: int) -> str:
        """

        :param index:
        :return:
        """
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def GetValues(self, index: int) -> Array[str]:
        """

        :param index:
        :return:
        """
    @overload
    def GetValues(self, name: str) -> Array[str]:
        """

        :param name:
        :return:
        """
    def HasKeys(self) -> bool:
        """

        :return:
        """
    def OnDeserialization(self, sender: object) -> None:
        """

        :param sender:
        """
    def Remove(self, name: str) -> None:
        """

        :param name:
        """
    def Set(self, name: str, value: str) -> None:
        """

        :param name:
        :param value:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    @overload
    def __getitem__(self, index: int) -> str:
        """

        :param index:
        :return:
        """
    @overload
    def __getitem__(self, name: str) -> str:
        """

        :param name:
        :return:
        """
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """
    def __setitem__(self, name: str, value: str) -> None:
        """

        :param name:
        :param value:
        """

class SchemeSettingElement(ConfigurationElement):
    """"""

    def __init__(self):
        """"""
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def GenericUriParserOptions(self) -> GenericUriParserOptions:
        """

        :return:
        """
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    @property
    def Name(self) -> str:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """

class SchemeSettingElementCollection(ConfigurationElementCollection, ICollection, IEnumerable):
    """"""

    def __init__(self):
        """"""
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType:
        """"""
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def EmitClear(self) -> bool:
        """"""
    @EmitClear.setter
    def EmitClear(self, value: bool) -> None: ...
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> SchemeSettingElement:
        """

        :return:
        """
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    @overload
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    @overload
    def CopyTo(self, array: Array[ConfigurationElement], index: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IndexOf(self, element: SchemeSettingElement) -> int:
        """

        :param element:
        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    @overload
    def __getitem__(self, index: int) -> SchemeSettingElement:
        """

        :param index:
        :return:
        """
    @overload
    def __getitem__(self, name: str) -> SchemeSettingElement:
        """

        :param name:
        :return:
        """
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """

class SchemeSettingInternal(Object):
    """"""

    def __init__(self, name: str, options: GenericUriParserOptions):
        """

        :param name:
        :param options:
        """
    @property
    def Name(self) -> str:
        """

        :return:
        """
    @property
    def Options(self) -> GenericUriParserOptions:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingAttribute(Attribute, _Attribute):
    """"""

    def __init__(self):
        """"""
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingChangingEventArgs(CancelEventArgs):
    """"""

    def __init__(
        self, settingName: str, settingClass: str, settingKey: str, newValue: object, cancel: bool
    ):
        """

        :param settingName:
        :param settingClass:
        :param settingKey:
        :param newValue:
        :param cancel:
        """
    @property
    def Cancel(self) -> bool:
        """

        :return:
        """
    @Cancel.setter
    def Cancel(self, value: bool) -> None: ...
    @property
    def NewValue(self) -> object:
        """

        :return:
        """
    @property
    def SettingClass(self) -> str:
        """

        :return:
        """
    @property
    def SettingKey(self) -> str:
        """

        :return:
        """
    @property
    def SettingName(self) -> str:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

SettingChangingEventHandler: Callable[[object, SettingChangingEventArgs], None] = ...
"""

:param sender: 
:param e: 
"""

class SettingElement(ConfigurationElement):
    """"""

    @overload
    def __init__(self):
        """"""
    @overload
    def __init__(self, name: str, serializeAs: SettingsSerializeAs):
        """

        :param name:
        :param serializeAs:
        """
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    @property
    def Name(self) -> str:
        """

        :return:
        """
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def SerializeAs(self) -> SettingsSerializeAs:
        """

        :return:
        """
    @SerializeAs.setter
    def SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    @property
    def Value(self) -> SettingValueElement:
        """

        :return:
        """
    @Value.setter
    def Value(self, value: SettingValueElement) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """

class SettingElementCollection(ConfigurationElementCollection, ICollection, IEnumerable):
    """"""

    def __init__(self):
        """"""
    @property
    def CollectionType(self) -> ConfigurationElementCollectionType:
        """"""
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def EmitClear(self) -> bool:
        """"""
    @EmitClear.setter
    def EmitClear(self, value: bool) -> None: ...
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    def Add(self, element: SettingElement) -> None:
        """

        :param element:
        """
    def Clear(self) -> None:
        """"""
    @overload
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    @overload
    def CopyTo(self, array: Array[ConfigurationElement], index: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def Get(self, elementKey: str) -> SettingElement:
        """

        :param elementKey:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def Remove(self, element: SettingElement) -> None:
        """

        :param element:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """

class SettingValueElement(ConfigurationElement):
    """"""

    def __init__(self):
        """"""
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    @property
    def ValueXml(self) -> XmlNode:
        """

        :return:
        """
    @ValueXml.setter
    def ValueXml(self, value: XmlNode) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsAttributeDictionary(
    Hashtable,
    ICollection,
    IDictionary,
    IEnumerable,
    IDeserializationCallback,
    ISerializable,
    ICloneable,
):
    """"""

    @overload
    def __init__(self):
        """"""
    @overload
    def __init__(self, attributes: SettingsAttributeDictionary):
        """

        :param attributes:
        """
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def IsFixedSize(self) -> bool:
        """

        :return:
        """
    @property
    def IsReadOnly(self) -> bool:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> object:
        """

        :return:
        """
    @Item.setter
    def Item(self, value: object) -> None: ...
    @property
    def Keys(self) -> ICollection:
        """

        :return:
        """
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    @property
    def Values(self) -> ICollection:
        """

        :return:
        """
    def Add(self, key: object, value: object) -> None:
        """

        :param key:
        :param value:
        """
    def Clear(self) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def Contains(self, key: object) -> bool:
        """

        :param key:
        :return:
        """
    def ContainsKey(self, key: object) -> bool:
        """

        :param key:
        :return:
        """
    def ContainsValue(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def OnDeserialization(self, sender: object) -> None:
        """

        :param sender:
        """
    def Remove(self, key: object) -> None:
        """

        :param key:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def __getitem__(self, key: object) -> object:
        """

        :param key:
        :return:
        """
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """
    def __setitem__(self, key: object, value: object) -> None:
        """

        :param key:
        :param value:
        """

class SettingsBase(ABC, Object):
    """"""

    @property
    def Context(self) -> SettingsContext:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> object:
        """

        :return:
        """
    @Item.setter
    def Item(self, value: object) -> None: ...
    @property
    def Properties(self) -> SettingsPropertyCollection:
        """

        :return:
        """
    @property
    def PropertyValues(self) -> SettingsPropertyValueCollection:
        """

        :return:
        """
    @property
    def Providers(self) -> SettingsProviderCollection:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def Initialize(
        self,
        context: SettingsContext,
        properties: SettingsPropertyCollection,
        providers: SettingsProviderCollection,
    ) -> None:
        """

        :param context:
        :param properties:
        :param providers:
        """
    def Save(self) -> None:
        """"""
    @classmethod
    def Synchronized(cls, settingsBase: SettingsBase) -> SettingsBase:
        """

        :param settingsBase:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def __getitem__(self, propertyName: str) -> object:
        """

        :param propertyName:
        :return:
        """
    def __setitem__(self, propertyName: str, value: object) -> None:
        """

        :param propertyName:
        :param value:
        """

class SettingsContext(
    Hashtable,
    ICollection,
    IDictionary,
    IEnumerable,
    IDeserializationCallback,
    ISerializable,
    ICloneable,
):
    """"""

    def __init__(self):
        """"""
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def IsFixedSize(self) -> bool:
        """

        :return:
        """
    @property
    def IsReadOnly(self) -> bool:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> object:
        """

        :return:
        """
    @Item.setter
    def Item(self, value: object) -> None: ...
    @property
    def Keys(self) -> ICollection:
        """

        :return:
        """
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    @property
    def Values(self) -> ICollection:
        """

        :return:
        """
    def Add(self, key: object, value: object) -> None:
        """

        :param key:
        :param value:
        """
    def Clear(self) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def Contains(self, key: object) -> bool:
        """

        :param key:
        :return:
        """
    def ContainsKey(self, key: object) -> bool:
        """

        :param key:
        :return:
        """
    def ContainsValue(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def OnDeserialization(self, sender: object) -> None:
        """

        :param sender:
        """
    def Remove(self, key: object) -> None:
        """

        :param key:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def __getitem__(self, key: object) -> object:
        """

        :param key:
        :return:
        """
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """
    def __setitem__(self, key: object, value: object) -> None:
        """

        :param key:
        :param value:
        """

class SettingsDescriptionAttribute(Attribute, _Attribute):
    """"""

    def __init__(self, description: str):
        """

        :param description:
        """
    @property
    def Description(self) -> str:
        """

        :return:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsGroupDescriptionAttribute(Attribute, _Attribute):
    """"""

    def __init__(self, description: str):
        """

        :param description:
        """
    @property
    def Description(self) -> str:
        """

        :return:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsGroupNameAttribute(Attribute, _Attribute):
    """"""

    def __init__(self, groupName: str):
        """

        :param groupName:
        """
    @property
    def GroupName(self) -> str:
        """

        :return:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsLoadedEventArgs(EventArgs):
    """"""

    def __init__(self, provider: SettingsProvider):
        """

        :param provider:
        """
    @property
    def Provider(self) -> SettingsProvider:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

SettingsLoadedEventHandler: Callable[[object, SettingsLoadedEventArgs], None] = ...
"""

:param sender: 
:param e: 
"""

class SettingsManageability(Enum):
    """"""

    Roaming: SettingsManageability = ...
    """"""

class SettingsManageabilityAttribute(Attribute, _Attribute):
    """"""

    def __init__(self, manageability: SettingsManageability):
        """

        :param manageability:
        """
    @property
    def Manageability(self) -> SettingsManageability:
        """

        :return:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsProperty(Object):
    """"""

    @overload
    def __init__(self, propertyToCopy: SettingsProperty):
        """

        :param propertyToCopy:
        """
    @overload
    def __init__(self, name: str):
        """

        :param name:
        """
    @overload
    def __init__(
        self,
        name: str,
        propertyType: Type,
        provider: SettingsProvider,
        isReadOnly: bool,
        defaultValue: object,
        serializeAs: SettingsSerializeAs,
        attributes: SettingsAttributeDictionary,
        throwOnErrorDeserializing: bool,
        throwOnErrorSerializing: bool,
    ):
        """

        :param name:
        :param propertyType:
        :param provider:
        :param isReadOnly:
        :param defaultValue:
        :param serializeAs:
        :param attributes:
        :param throwOnErrorDeserializing:
        :param throwOnErrorSerializing:
        """
    @property
    def Attributes(self) -> SettingsAttributeDictionary:
        """

        :return:
        """
    @property
    def DefaultValue(self) -> object:
        """

        :return:
        """
    @DefaultValue.setter
    def DefaultValue(self, value: object) -> None: ...
    @property
    def IsReadOnly(self) -> bool:
        """

        :return:
        """
    @IsReadOnly.setter
    def IsReadOnly(self, value: bool) -> None: ...
    @property
    def Name(self) -> str:
        """

        :return:
        """
    @Name.setter
    def Name(self, value: str) -> None: ...
    @property
    def PropertyType(self) -> Type:
        """

        :return:
        """
    @PropertyType.setter
    def PropertyType(self, value: Type) -> None: ...
    @property
    def Provider(self) -> SettingsProvider:
        """

        :return:
        """
    @Provider.setter
    def Provider(self, value: SettingsProvider) -> None: ...
    @property
    def SerializeAs(self) -> SettingsSerializeAs:
        """

        :return:
        """
    @SerializeAs.setter
    def SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    @property
    def ThrowOnErrorDeserializing(self) -> bool:
        """

        :return:
        """
    @ThrowOnErrorDeserializing.setter
    def ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    @property
    def ThrowOnErrorSerializing(self) -> bool:
        """

        :return:
        """
    @ThrowOnErrorSerializing.setter
    def ThrowOnErrorSerializing(self, value: bool) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsPropertyCollection(Object, ICollection, IEnumerable, ICloneable):
    """"""

    def __init__(self):
        """"""
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> SettingsProperty:
        """

        :return:
        """
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    def Add(self, property: SettingsProperty) -> None:
        """

        :param property:
        """
    def Clear(self) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def Remove(self, name: str) -> None:
        """

        :param name:
        """
    def SetReadOnly(self) -> None:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def __getitem__(self, name: str) -> SettingsProperty:
        """

        :param name:
        :return:
        """
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """

class SettingsPropertyIsReadOnlyException(Exception, _Exception, ISerializable):
    """"""

    @overload
    def __init__(self):
        """"""
    @overload
    def __init__(self, message: str):
        """

        :param message:
        """
    @overload
    def __init__(self, message: str, innerException: Exception):
        """

        :param message:
        :param innerException:
        """
    @property
    def Data(self) -> IDictionary:
        """

        :return:
        """
    @property
    def HResult(self) -> int:
        """

        :return:
        """
    @property
    def HelpLink(self) -> str:
        """

        :return:
        """
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @property
    def InnerException(self) -> Exception:
        """

        :return:
        """
    @property
    def Message(self) -> str:
        """

        :return:
        """
    @property
    def Source(self) -> str:
        """

        :return:
        """
    @Source.setter
    def Source(self, value: str) -> None: ...
    @property
    def StackTrace(self) -> str:
        """

        :return:
        """
    @property
    def TargetSite(self) -> MethodBase:
        """

        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetBaseException(self) -> Exception:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsPropertyNotFoundException(Exception, _Exception, ISerializable):
    """"""

    @overload
    def __init__(self):
        """"""
    @overload
    def __init__(self, message: str):
        """

        :param message:
        """
    @overload
    def __init__(self, message: str, innerException: Exception):
        """

        :param message:
        :param innerException:
        """
    @property
    def Data(self) -> IDictionary:
        """

        :return:
        """
    @property
    def HResult(self) -> int:
        """

        :return:
        """
    @property
    def HelpLink(self) -> str:
        """

        :return:
        """
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @property
    def InnerException(self) -> Exception:
        """

        :return:
        """
    @property
    def Message(self) -> str:
        """

        :return:
        """
    @property
    def Source(self) -> str:
        """

        :return:
        """
    @Source.setter
    def Source(self, value: str) -> None: ...
    @property
    def StackTrace(self) -> str:
        """

        :return:
        """
    @property
    def TargetSite(self) -> MethodBase:
        """

        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetBaseException(self) -> Exception:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsPropertyValue(Object):
    """"""

    def __init__(self, property: SettingsProperty):
        """

        :param property:
        """
    @property
    def Deserialized(self) -> bool:
        """

        :return:
        """
    @Deserialized.setter
    def Deserialized(self, value: bool) -> None: ...
    @property
    def IsDirty(self) -> bool:
        """

        :return:
        """
    @IsDirty.setter
    def IsDirty(self, value: bool) -> None: ...
    @property
    def Name(self) -> str:
        """

        :return:
        """
    @property
    def Property(self) -> SettingsProperty:
        """

        :return:
        """
    @property
    def PropertyValue(self) -> object:
        """

        :return:
        """
    @PropertyValue.setter
    def PropertyValue(self, value: object) -> None: ...
    @property
    def SerializedValue(self) -> object:
        """

        :return:
        """
    @SerializedValue.setter
    def SerializedValue(self, value: object) -> None: ...
    @property
    def UsingDefaultValue(self) -> bool:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsPropertyValueCollection(Object, ICollection, IEnumerable, ICloneable):
    """"""

    def __init__(self):
        """"""
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> SettingsPropertyValue:
        """

        :return:
        """
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    def Add(self, property: SettingsPropertyValue) -> None:
        """

        :param property:
        """
    def Clear(self) -> None:
        """"""
    def Clone(self) -> object:
        """

        :return:
        """
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def Remove(self, name: str) -> None:
        """

        :param name:
        """
    def SetReadOnly(self) -> None:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def __getitem__(self, name: str) -> SettingsPropertyValue:
        """

        :param name:
        :return:
        """
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """

class SettingsPropertyWrongTypeException(Exception, _Exception, ISerializable):
    """"""

    @overload
    def __init__(self):
        """"""
    @overload
    def __init__(self, message: str):
        """

        :param message:
        """
    @overload
    def __init__(self, message: str, innerException: Exception):
        """

        :param message:
        :param innerException:
        """
    @property
    def Data(self) -> IDictionary:
        """

        :return:
        """
    @property
    def HResult(self) -> int:
        """

        :return:
        """
    @property
    def HelpLink(self) -> str:
        """

        :return:
        """
    @HelpLink.setter
    def HelpLink(self, value: str) -> None: ...
    @property
    def InnerException(self) -> Exception:
        """

        :return:
        """
    @property
    def Message(self) -> str:
        """

        :return:
        """
    @property
    def Source(self) -> str:
        """

        :return:
        """
    @Source.setter
    def Source(self, value: str) -> None: ...
    @property
    def StackTrace(self) -> str:
        """

        :return:
        """
    @property
    def TargetSite(self) -> MethodBase:
        """

        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetBaseException(self) -> Exception:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetHashCode(self) -> int:
        """

        :return:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> None:
        """

        :param info:
        :param context:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def GetType(self) -> Type:
        """

        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """
    @overload
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsProvider(ABC, ProviderBase):
    """"""

    @property
    def ApplicationName(self) -> str:
        """

        :return:
        """
    @ApplicationName.setter
    def ApplicationName(self, value: str) -> None: ...
    @property
    def Description(self) -> str:
        """"""
    @property
    def Name(self) -> str:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetPropertyValues(
        self, context: SettingsContext, collection: SettingsPropertyCollection
    ) -> SettingsPropertyValueCollection:
        """

        :param context:
        :param collection:
        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def Initialize(self, name: str, config: NameValueCollection) -> None:
        """"""
    def SetPropertyValues(
        self, context: SettingsContext, collection: SettingsPropertyValueCollection
    ) -> None:
        """

        :param context:
        :param collection:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsProviderAttribute(Attribute, _Attribute):
    """"""

    @overload
    def __init__(self, providerTypeName: str):
        """

        :param providerTypeName:
        """
    @overload
    def __init__(self, providerType: Type):
        """

        :param providerType:
        """
    @property
    def ProviderTypeName(self) -> str:
        """

        :return:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SettingsProviderCollection(ProviderCollection, ICollection, IEnumerable):
    """"""

    def __init__(self):
        """"""
    @property
    def Count(self) -> int:
        """

        :return:
        """
    @property
    def IsSynchronized(self) -> bool:
        """

        :return:
        """
    @property
    def Item(self) -> ProviderBase:
        """"""
    @property
    def SyncRoot(self) -> object:
        """

        :return:
        """
    def Add(self, provider: ProviderBase) -> None:
        """"""
    def Clear(self) -> None:
        """"""
    @overload
    def CopyTo(self, array: Array, index: int) -> None:
        """

        :param array:
        :param index:
        """
    @overload
    def CopyTo(self, array: Array[ProviderBase], index: int) -> None:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetEnumerator(self) -> IEnumerator:
        """

        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def Remove(self, name: str) -> None:
        """"""
    def SetReadOnly(self) -> None:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """
    def __contains__(self, value: object) -> bool:
        """

        :param value:
        :return:
        """
    def __getitem__(self, name: str) -> ProviderBase:
        """"""
    def __iter__(self) -> Iterator[object]:
        """

        :return:
        """
    def __len__(self) -> int:
        """

        :return:
        """

SettingsSavingEventHandler: Callable[[object, CancelEventArgs], None] = ...
"""

:param sender: 
:param e: 
"""

class SettingsSerializeAs(Enum):
    """"""

    String: SettingsSerializeAs = ...
    """"""
    Xml: SettingsSerializeAs = ...
    """"""
    Binary: SettingsSerializeAs = ...
    """"""
    ProviderSpecific: SettingsSerializeAs = ...
    """"""

class SettingsSerializeAsAttribute(Attribute, _Attribute):
    """"""

    def __init__(self, serializeAs: SettingsSerializeAs):
        """

        :param serializeAs:
        """
    @property
    def SerializeAs(self) -> SettingsSerializeAs:
        """

        :return:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SingleTagSectionHandler(Object, IConfigurationSectionHandler):
    """"""

    def __init__(self):
        """"""
    def Create(self, parent: object, configContext: object, section: XmlNode) -> object:
        """

        :param parent:
        :param configContext:
        :param section:
        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class SpecialSetting(Enum):
    """"""

    ConnectionString: SpecialSetting = ...
    """"""
    WebServiceUrl: SpecialSetting = ...
    """"""

class SpecialSettingAttribute(Attribute, _Attribute):
    """"""

    def __init__(self, specialSetting: SpecialSetting):
        """

        :param specialSetting:
        """
    @property
    def SpecialSetting(self) -> SpecialSetting:
        """

        :return:
        """
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class StoredSetting(ValueType):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class TypeUtil(ABC, Object):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class UriSection(ConfigurationSection):
    """"""

    def __init__(self):
        """"""
    @property
    def CurrentConfiguration(self) -> Configuration:
        """"""
    @property
    def ElementInformation(self) -> ElementInformation:
        """"""
    @property
    def Idn(self) -> IdnElement:
        """

        :return:
        """
    @property
    def IriParsing(self) -> IriParsingElement:
        """

        :return:
        """
    @property
    def LockAllAttributesExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAllElementsExcept(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockAttributes(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockElements(self) -> ConfigurationLockCollection:
        """"""
    @property
    def LockItem(self) -> bool:
        """"""
    @LockItem.setter
    def LockItem(self, value: bool) -> None: ...
    @property
    def SchemeSettings(self) -> SchemeSettingElementCollection:
        """

        :return:
        """
    @property
    def SectionInformation(self) -> SectionInformation:
        """"""
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def IsReadOnly(self) -> bool:
        """"""
    def ToString(self) -> str:
        """

        :return:
        """

class UriSectionData(Object):
    """"""

    def __init__(self):
        """"""
    @property
    def IdnScope(self) -> Optional[UriIdnScope]:
        """

        :return:
        """
    @IdnScope.setter
    def IdnScope(self, value: Optional[UriIdnScope]) -> None: ...
    @property
    def IriParsing(self) -> Optional[bool]:
        """

        :return:
        """
    @IriParsing.setter
    def IriParsing(self, value: Optional[bool]) -> None: ...
    @property
    def SchemeSettings(self) -> Dictionary[str, SchemeSettingInternal]:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class UriSectionInternal(Object):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class UriSectionReader(Object):
    """"""

    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    @classmethod
    @overload
    def Read(cls, configFilePath: str) -> UriSectionData:
        """

        :param configFilePath:
        :return:
        """
    @classmethod
    @overload
    def Read(cls, configFilePath: str, parentData: UriSectionData) -> UriSectionData:
        """

        :param configFilePath:
        :param parentData:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class UserScopedSettingAttribute(SettingAttribute, _Attribute):
    """"""

    def __init__(self):
        """"""
    @property
    def TypeId(self) -> object:
        """

        :return:
        """
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetIDsOfNames(
        self, riid: Guid, rgszNames: IntPtr, cNames: int, lcid: int, rgDispId: IntPtr
    ) -> None:
        """

        :param riid:
        :param rgszNames:
        :param cNames:
        :param lcid:
        :param rgDispId:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def GetTypeInfo(self, iTInfo: int, lcid: int, ppTInfo: IntPtr) -> None:
        """

        :param iTInfo:
        :param lcid:
        :param ppTInfo:
        """
    def GetTypeInfoCount(self, pcTInfo: int) -> Tuple[None, int]:
        """

        :param pcTInfo:
        """
    def Invoke(
        self,
        dispIdMember: int,
        riid: Guid,
        lcid: int,
        wFlags: int,
        pDispParams: IntPtr,
        pVarResult: IntPtr,
        pExcepInfo: IntPtr,
        puArgErr: IntPtr,
    ) -> None:
        """

        :param dispIdMember:
        :param riid:
        :param lcid:
        :param wFlags:
        :param pDispParams:
        :param pVarResult:
        :param pExcepInfo:
        :param puArgErr:
        """
    def IsDefaultAttribute(self) -> bool:
        """

        :return:
        """
    def Match(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """

class UserSettingsGroup(ConfigurationSectionGroup):
    """"""

    def __init__(self):
        """"""
    @property
    def IsDeclarationRequired(self) -> bool:
        """"""
    @property
    def IsDeclared(self) -> bool:
        """"""
    @property
    def Name(self) -> str:
        """"""
    @property
    def SectionGroupName(self) -> str:
        """"""
    @property
    def SectionGroups(self) -> ConfigurationSectionGroupCollection:
        """"""
    @property
    def Sections(self) -> ConfigurationSectionCollection:
        """"""
    @property
    def Type(self) -> str:
        """"""
    @Type.setter
    def Type(self, value: str) -> None: ...
    def Equals(self, obj: object) -> bool:
        """

        :param obj:
        :return:
        """
    @overload
    def ForceDeclaration(self) -> None:
        """"""
    @overload
    def ForceDeclaration(self, force: bool) -> None:
        """"""
    def GetHashCode(self) -> int:
        """

        :return:
        """
    def GetType(self) -> Type:
        """

        :return:
        """
    def ToString(self) -> str:
        """

        :return:
        """
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

    pass

    pass

    def GetValue(key: str, type: Type) -> Any: ...

    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

    pass

    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

    pass

    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

    pass

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    pass

    pass

    pass

    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

    pass

    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

    pass

    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    pass

    pass

    def CloneNode(deep: bool) -> XmlNode: ...

    def CloneNode(deep: bool) -> XmlNode: ...

    def CloneNode(deep: bool) -> XmlNode: ...

    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

    def CloneNode(deep: bool) -> XmlNode: ...

    pass

    def CloneNode(deep: bool) -> XmlNode: ...

    def CloneNode(deep: bool) -> XmlNode: ...

    def CloneNode(deep: bool) -> XmlNode: ...

    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

    pass

    pass

    Value: str
    def get_Value(self) -> str: ...

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    pass

    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

    def Dispose(self) -> None: ...

    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

    pass

    pass

    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

    pass

    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    pass

    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

    pass

    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

    pass

    pass

    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

    pass

    pass

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

    pass

    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

    pass

    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

    pass

    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

    pass

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

    pass

    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

    pass

    pass

    pass

    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

    pass

    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

    pass

    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

    pass

    Description: str
    def get_Description(self) -> str: ...

    Description: str
    def get_Description(self) -> str: ...

    GroupName: str
    def get_GroupName(self) -> str: ...

    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

    pass

    pass

    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

    pass

    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

    pass

    pass

    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

    pass

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    pass

    pass

    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

    pass

    pass

    pass

    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

    pass

    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Object[]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Object[]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: ConfigurationElement[], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: String[], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: ConfigurationProperty[], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: ConfigurationSection[], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: ConfigurationSectionGroup[], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Object[]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> Object[]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Object[]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Object[]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: String[]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> String[]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: String[]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> String[]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: PropertyInformation[], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: String[]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(name: str, configurationValues: NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(value: str) -> None: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: str, type: Type) -> Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(configKey: str) -> Any: ...
    def GetLkgSection(configKey: str) -> Any: ...
    def RefreshSection(configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def GetStreamName(configPath: str) -> str: ...
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> None: ...
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: Func[str, str]
    AssemblyStringTransformer: Func[str, str]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> Func[str, str]: ...
    def set_TypeStringTransformer(value: Func[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> Func[str, str]: ...
    def set_AssemblyStringTransformer(value: Func[str, str]) -> None: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> None: ...
    def GetSection(sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: str) -> ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(saveMode: ConfigurationSaveMode) -> None: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(filename: str) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    def SaveAs(filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> bool: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetLineNumber(node: XmlNode) -> int: ...
    def GetFilename(node: XmlNode) -> str: ...
    def GetLineNumber(reader: XmlReader) -> int: ...
    def GetFilename(reader: XmlReader) -> str: ...

class ConfigurationException(SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> None: ...
    def GetXmlNodeFilename(node: XmlNode) -> str: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: str) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(name: str) -> bool: ...
    def CopyTo(array: list[str], index: int) -> None: ...
    def IsReadOnly(name: str) -> bool: ...
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: str) -> Any: ...
    def RefreshSection(sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: str
    DefaultValue: Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(name: str) -> bool: ...
    def Add(property: ConfigurationProperty) -> None: ...
    def Remove(name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: str) -> ConfigurationSection: ...
    def get_Item(index: int) -> ConfigurationSection: ...
    def Add(name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSection], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSection: ...
    def Get(name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: str) -> ConfigurationSectionGroup: ...
    def get_Item(index: int) -> ConfigurationSectionGroup: ...
    def Add(name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: int) -> None: ...
    def Get(index: int) -> ConfigurationSectionGroup: ...
    def Get(name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: int) -> str: ...
    def Remove(name: str) -> None: ...
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(filename: str) -> None: ...
    def LoadSingleElement(filename: str, sourceReader: XmlTextReader) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: bool) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: int) -> ConnectionStringSettings: ...
    def set_Item(index: int, value: ConnectionStringSettings) -> None: ...
    def get_Item(name: str) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> int: ...
    def Add(settings: ConnectionStringSettings) -> None: ...
    def Remove(settings: ConnectionStringSettings) -> None: ...
    def RemoveAt(index: int) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Any]
    def get_Item(index: int) -> DateTime: ...
    def set_Item(index: int, value: DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(dateTime: DateTime) -> None: ...
    def Remove(dateTime: DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: str) -> None: ...
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> XmlAttribute: ...
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> XmlElement: ...
    def CreateTextNode(text: str) -> XmlText: ...
    def CreateCDataSection(data: str) -> XmlCDataSection: ...
    def CreateComment(data: str) -> XmlComment: ...
    def CreateSignificantWhitespace(data: str) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: str) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(configPath: str) -> str: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> None: ...
    def Add(key: str, value: str) -> None: ...
    def Remove(key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...
    def Initialize(name: str, values: NameValueCollection) -> None: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(context: SettingsContext) -> None: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(name: str) -> NameValueConfigurationElement: ...
    def set_Item(name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(nameValue: NameValueConfigurationElement) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(parent: Any, configContext: Any, section: XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: str) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: str) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: str) -> ProviderSettings: ...
    def get_Item(index: int) -> ProviderSettings: ...
    def set_Item(index: int, value: ProviderSettings) -> None: ...
    def Add(provider: ProviderSettings) -> None: ...
    def Remove(name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: int) -> SchemeSettingElement: ...
    def get_Item(name: str) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(force: bool) -> None: ...
    def ProtectSection(protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingChangingEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: str) -> SettingElement: ...
    def Add(element: SettingElement) -> None: ...
    def Remove(element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(propertyName: str) -> Any: ...
    def set_Item(propertyName: str, value: Any) -> None: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsProperty) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(property: SettingsPropertyValue) -> None: ...
    def Remove(name: str) -> None: ...
    def get_Item(name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(array: Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: str
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> None: ...
    def get_Item(name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Any, e: CancelEventArgs) -> None: ...
    def BeginInvoke(sender: Any, e: CancelEventArgs, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(parent: Any, context: Any, section: XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(index: int) -> str: ...
    def set_Item(index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(value: str) -> None: ...
    def AddRange(range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(index: int, value: str) -> None: ...
    def Remove(value: str) -> None: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> bool: ...
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: str) -> Any: ...
    def OpenStreamForRead(streamName: str) -> Stream: ...
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    def DeleteStream(streamName: str) -> None: ...
    def IsFile(streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Any) -> None: ...
    def BeginInvoke(value: Any, callback: AsyncCallback, object: Any) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(value: Any, allowedType: Type) -> None: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Any, type: Type) -> Any: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(value: Any) -> None: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(configKey: String) -> Object: ...
    def GetLkgSection(configKey: String) -> Object: ...
    def RefreshSection(configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Object]) -> Void: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> Void: ...
    def GetSection(sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(filename: String) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(array: list[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(node: XmlNode) -> Int32: ...
    def GetFilename(node: XmlNode) -> String: ...
    def GetLineNumber(reader: XmlReader) -> Int32: ...
    def GetFilename(reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: String) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def CopyTo(array: list[String], index: Int32) -> Void: ...
    def IsReadOnly(name: String) -> Boolean: ...
    def SetFromList(attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: String) -> Object: ...
    def RefreshSection(sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: list[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def Add(property: ConfigurationProperty) -> Void: ...
    def Remove(name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: String) -> ConfigurationSection: ...
    def get_Item(index: Int32) -> ConfigurationSection: ...
    def Add(name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: list[ConfigurationSection], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSection: ...
    def Get(name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: String) -> ConfigurationSectionGroup: ...
    def get_Item(index: Int32) -> ConfigurationSectionGroup: ...
    def Add(name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: list[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSectionGroup: ...
    def Get(name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(filename: String) -> Void: ...
    def LoadSingleElement(filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: Int32) -> ConnectionStringSettings: ...
    def set_Item(index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(name: String) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> Int32: ...
    def Add(settings: ConnectionStringSettings) -> Void: ...
    def Remove(settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: list[Object]
    def get_Item(index: Int32) -> DateTime: ...
    def set_Item(index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> list[Object]: ...
    def Add(dateTime: DateTime) -> Void: ...
    def Remove(dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: String) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: list[Object]) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: list[Object]) -> Void: ...
    def GetStreamName(configPath: String) -> String: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[String]
    def get_Item(key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[String]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(key: String, value: String) -> Void: ...
    def Remove(key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...
    def Initialize(name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[String]
    def get_Item(name: String) -> NameValueConfigurationElement: ...
    def set_Item(name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> list[String]: ...
    def Add(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: String) -> PropertyInformation: ...
    def CopyTo(array: list[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: String) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: String) -> ProviderSettings: ...
    def get_Item(index: Int32) -> ProviderSettings: ...
    def set_Item(index: Int32, value: ProviderSettings) -> Void: ...
    def Add(provider: ProviderSettings) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: Int32) -> SchemeSettingElement: ...
    def get_Item(name: String) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...
    def ProtectSection(protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: String) -> SettingElement: ...
    def Add(element: SettingElement) -> Void: ...
    def Remove(element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsProperty) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsPropertyValue) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> Void: ...
    def get_Item(name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(index: Int32) -> String: ...
    def set_Item(index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(value: String) -> Void: ...
    def AddRange(range: list[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(index: Int32, value: String) -> Void: ...
    def Remove(value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Object) -> Void: ...
    def BeginInvoke(value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(configKey: String) -> Object: ...
    def GetLkgSection(configKey: String) -> Object: ...
    def RefreshSection(configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: System.Func`2[String, String]
    AssemblyStringTransformer: System.Func`2[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> System.Func`2[String, String]: ...
    def set_TypeStringTransformer(value: System.Func`2[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> System.Func`2[String, String]: ...
    def set_AssemblyStringTransformer(value: System.Func`2[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> Void: ...
    def GetSection(sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(filename: String) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(node: XmlNode) -> Int32: ...
    def GetFilename(node: XmlNode) -> String: ...
    def GetLineNumber(reader: XmlReader) -> Int32: ...
    def GetFilename(reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: String) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def CopyTo(array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(name: String) -> Boolean: ...
    def SetFromList(attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: String) -> Object: ...
    def RefreshSection(sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def Add(property: ConfigurationProperty) -> Void: ...
    def Remove(name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: String) -> ConfigurationSection: ...
    def get_Item(index: Int32) -> ConfigurationSection: ...
    def Add(name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSection: ...
    def Get(name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: String) -> ConfigurationSectionGroup: ...
    def get_Item(index: Int32) -> ConfigurationSectionGroup: ...
    def Add(name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSectionGroup: ...
    def Get(name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(filename: String) -> Void: ...
    def LoadSingleElement(filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: Int32) -> ConnectionStringSettings: ...
    def set_Item(index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(name: String) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> Int32: ...
    def Add(settings: ConnectionStringSettings) -> Void: ...
    def Remove(settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(index: Int32) -> DateTime: ...
    def set_Item(index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(dateTime: DateTime) -> Void: ...
    def Remove(dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: String) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(configPath: String) -> String: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(key: String, value: String) -> Void: ...
    def Remove(key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...
    def Initialize(name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(name: String) -> NameValueConfigurationElement: ...
    def set_Item(name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: String) -> PropertyInformation: ...
    def CopyTo(array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: String) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: String) -> ProviderSettings: ...
    def get_Item(index: Int32) -> ProviderSettings: ...
    def set_Item(index: Int32, value: ProviderSettings) -> Void: ...
    def Add(provider: ProviderSettings) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: Int32) -> SchemeSettingElement: ...
    def get_Item(name: String) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...
    def ProtectSection(protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: String) -> SettingElement: ...
    def Add(element: SettingElement) -> Void: ...
    def Remove(element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsProperty) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsPropertyValue) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> Void: ...
    def get_Item(name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(index: Int32) -> String: ...
    def set_Item(index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(value: String) -> Void: ...
    def AddRange(range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(index: Int32, value: String) -> Void: ...
    def Remove(value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Object) -> Void: ...
    def BeginInvoke(value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(configKey: String) -> Object: ...
    def GetLkgSection(configKey: String) -> Object: ...
    def RefreshSection(configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> Void: ...
    def GetSection(sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(filename: String) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(node: XmlNode) -> Int32: ...
    def GetFilename(node: XmlNode) -> String: ...
    def GetLineNumber(reader: XmlReader) -> Int32: ...
    def GetFilename(reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: String) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def CopyTo(array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(name: String) -> Boolean: ...
    def SetFromList(attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: String) -> Object: ...
    def RefreshSection(sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def Add(property: ConfigurationProperty) -> Void: ...
    def Remove(name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: String) -> ConfigurationSection: ...
    def get_Item(index: Int32) -> ConfigurationSection: ...
    def Add(name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSection: ...
    def Get(name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: String) -> ConfigurationSectionGroup: ...
    def get_Item(index: Int32) -> ConfigurationSectionGroup: ...
    def Add(name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSectionGroup: ...
    def Get(name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(filename: String) -> Void: ...
    def LoadSingleElement(filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: Int32) -> ConnectionStringSettings: ...
    def set_Item(index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(name: String) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> Int32: ...
    def Add(settings: ConnectionStringSettings) -> Void: ...
    def Remove(settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(index: Int32) -> DateTime: ...
    def set_Item(index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(dateTime: DateTime) -> Void: ...
    def Remove(dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: String) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String&, configPath: String&, locationConfigPath: String&, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(configPath: String) -> String: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(key: String, value: String) -> Void: ...
    def Remove(key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...
    def Initialize(name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(name: String) -> NameValueConfigurationElement: ...
    def set_Item(name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: String) -> PropertyInformation: ...
    def CopyTo(array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: String) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: String) -> ProviderSettings: ...
    def get_Item(index: Int32) -> ProviderSettings: ...
    def set_Item(index: Int32, value: ProviderSettings) -> Void: ...
    def Add(provider: ProviderSettings) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: Int32) -> SchemeSettingElement: ...
    def get_Item(name: String) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...
    def ProtectSection(protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: String) -> SettingElement: ...
    def Add(element: SettingElement) -> Void: ...
    def Remove(element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsProperty) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsPropertyValue) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> Void: ...
    def get_Item(name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(index: Int32) -> String: ...
    def set_Item(index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(value: String) -> Void: ...
    def AddRange(range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(index: Int32, value: String) -> Void: ...
    def Remove(value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object&) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Object) -> Void: ...
    def BeginInvoke(value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(value: String) -> Void: ...
    def add_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(configKey: String) -> Object: ...
    def GetLkgSection(configKey: String) -> Object: ...
    def RefreshSection(configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def GetStreamName(configPath: String) -> String: ...
    def GetStreamNameForConfigSource(streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(configPath: String) -> Object: ...
    def CreateConfigurationContext(configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(value: FrameworkName) -> Void: ...
    def GetSection(sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(filename: String) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(node: XmlNode) -> Int32: ...
    def GetFilename(node: XmlNode) -> String: ...
    def GetLineNumber(reader: XmlReader) -> Int32: ...
    def GetFilename(reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(name: String) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def CopyTo(array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(name: String) -> Boolean: ...
    def SetFromList(attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(sectionName: String) -> Object: ...
    def RefreshSection(sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(name: String) -> Boolean: ...
    def Add(property: ConfigurationProperty) -> Void: ...
    def Remove(name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(name: String) -> ConfigurationSection: ...
    def get_Item(index: Int32) -> ConfigurationSection: ...
    def Add(name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSection: ...
    def Get(name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(name: String) -> ConfigurationSectionGroup: ...
    def get_Item(index: Int32) -> ConfigurationSectionGroup: ...
    def Add(name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(index: Int32) -> ConfigurationSectionGroup: ...
    def Get(name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(index: Int32) -> String: ...
    def Remove(name: String) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(filename: String) -> Void: ...
    def LoadSingleElement(filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(index: Int32) -> ConnectionStringSettings: ...
    def set_Item(index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(name: String) -> ConnectionStringSettings: ...
    def IndexOf(settings: ConnectionStringSettings) -> Int32: ...
    def Add(settings: ConnectionStringSettings) -> Void: ...
    def Remove(settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(index: Int32) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(index: Int32) -> DateTime: ...
    def set_Item(index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(dateTime: DateTime) -> Void: ...
    def Remove(dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(filename: String) -> Void: ...
    def CreateAttribute(prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(text: String) -> XmlText: ...
    def CreateCDataSection(data: String) -> XmlCDataSection: ...
    def CreateComment(data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(configPath: String) -> String: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(key: String, value: String) -> Void: ...
    def Remove(key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...
    def Initialize(name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(context: SettingsContext) -> Void: ...
    def Upgrade(context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(name: String) -> NameValueConfigurationElement: ...
    def set_Item(name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(propertyName: String) -> PropertyInformation: ...
    def CopyTo(array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(name: String) -> ProtectedConfigurationProvider: ...
    def Add(provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(key: String) -> ProviderSettings: ...
    def get_Item(index: Int32) -> ProviderSettings: ...
    def set_Item(index: Int32, value: ProviderSettings) -> Void: ...
    def Add(provider: ProviderSettings) -> Void: ...
    def Remove(name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(node: XmlNode) -> XmlNode: ...
    def AddKey(keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(index: Int32) -> SchemeSettingElement: ...
    def get_Item(name: String) -> SchemeSettingElement: ...
    def IndexOf(element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(force: Boolean) -> Void: ...
    def ProtectSection(protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(elementKey: String) -> SettingElement: ...
    def Add(element: SettingElement) -> Void: ...
    def Remove(element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(propertyName: String) -> Object: ...
    def set_Item(propertyName: String, value: Object) -> Void: ...
    def Initialize(context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsProperty) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(property: SettingsPropertyValue) -> Void: ...
    def Remove(name: String) -> Void: ...
    def get_Item(name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(provider: ProviderBase) -> Void: ...
    def get_Item(name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(index: Int32) -> String: ...
    def set_Item(index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(value: String) -> Void: ...
    def AddRange(range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(index: Int32, value: String) -> Void: ...
    def Remove(value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(type: Type) -> Boolean: ...
    def Validate(value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(streamName: String) -> Object: ...
    def OpenStreamForRead(streamName: String) -> Stream: ...
    def OpenStreamForWrite(streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(configPath: String) -> Boolean: ...
    def DeleteStream(streamName: String) -> Void: ...
    def IsFile(streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(value: Object) -> Void: ...
    def BeginInvoke(value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(self, value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(self, value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(self, value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(self, value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(self, value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(self, value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(self, value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(self, value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(self, value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(self, value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(self, value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(self, value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(self, value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(self, value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(self, value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(self, value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(self, value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(self, value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(self, value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(self, value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(self, value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(self, value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(self, value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(self, value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: Func[String, String]
    AssemblyStringTransformer: Func[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> Func[String, String]: ...
    def set_TypeStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> Func[String, String]: ...
    def set_AssemblyStringTransformer(self, value: Func[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(self, value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(self, value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(self, value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(self, value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(self, value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(self, value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(self, value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(self, value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: list[String, String]
class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: list[String, String]
class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: list[String, String]
    AssemblyStringTransformer: list[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> list[String, String]: ...
    def set_TypeStringTransformer(self, value: list[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> list[String, String]: ...
    def set_AssemblyStringTransformer(self, value: list[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(self, value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(self, value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(self, value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(self, value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(self, value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(self, value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(self, value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(self, value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: list[String, String]
    AssemblyStringTransformer: list[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> list[String, String]: ...
    def set_TypeStringTransformer(self, value: list[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> list[String, String]: ...
    def set_AssemblyStringTransformer(self, value: list[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(self, value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(self, value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(self, value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(self, value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(self, value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(self, value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(self, value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(self, value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class UriIdnScopeTypeConverter(TypeConverter):
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> Boolean: ...
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> Int32: ...

class ClientSettingsConfigurationHost(DelegatingConfigHost):
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[String]

class <>c__DisplayClass6_0:
    value: String

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: Boolean
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def get_UseMachineProtection(self) -> Boolean: ...
    def Initialize(self, name: String, configurationValues: NameValueCollection) -> Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: String) -> Object: ...
    def Init(self) -> Void: ...

class IdnElement(ConfigurationElement):
    Enabled: UriIdnScope
    def get_Enabled(self) -> UriIdnScope: ...
    def set_Enabled(self, value: UriIdnScope) -> Void: ...

class IPersistComponentSettings:
    SaveSettings: Boolean
    SettingsKey: String
    def get_SaveSettings(self) -> Boolean: ...
    def set_SaveSettings(self, value: Boolean) -> Void: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def LoadComponentSettings(self) -> Void: ...
    def SaveComponentSettings(self) -> Void: ...
    def ResetComponentSettings(self) -> Void: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: String
    Item: Object
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> String: ...
    def set_SettingsKey(self, value: String) -> Void: ...
    def add_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def remove_PropertyChanged(self, value: PropertyChangedEventHandler) -> Void: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> Void: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> Void: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> Void: ...
    def GetPreviousVersion(self, propertyName: String) -> Object: ...
    def Reload(self) -> Void: ...
    def Reset(self) -> Void: ...
    def Save(self) -> Void: ...
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Upgrade(self) -> Void: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: String, type: Type) -> Object: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: String
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> String: ...
    def set_File(self, value: String) -> Void: ...

class BaseConfigurationRecord:
    ConfigPath: String
    StreamName: String
    HasInitErrors: Boolean
    def get_ConfigPath(self) -> String: ...
    def get_StreamName(self) -> String: ...
    def get_HasInitErrors(self) -> Boolean: ...
    def ThrowIfInitErrors(self) -> Void: ...
    def GetSection(self, configKey: String) -> Object: ...
    def GetLkgSection(self, configKey: String) -> Object: ...
    def RefreshSection(self, configKey: String) -> Void: ...
    def Remove(self) -> Void: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: Type
    CallbackMethodName: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> Type: ...
    def set_Type(self, value: Type) -> Void: ...
    def get_CallbackMethodName(self) -> String: ...
    def set_CallbackMethodName(self, value: String) -> Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(DelegatingConfigHost):
    HasRoamingConfig: Boolean
    HasLocalConfig: Boolean
    IsAppConfigHttp: Boolean
    SupportsRefresh: Boolean
    SupportsPath: Boolean
    SupportsLocation: Boolean
    def get_HasRoamingConfig(self) -> Boolean: ...
    def get_HasLocalConfig(self) -> Boolean: ...
    def get_IsAppConfigHttp(self) -> Boolean: ...
    def get_SupportsRefresh(self) -> Boolean: ...
    def get_SupportsPath(self) -> Boolean: ...
    def get_SupportsLocation(self) -> Boolean: ...
    def RefreshConfigPaths(self) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def IsInitDelayed(self, configRecord: IInternalConfigRecord) -> Boolean: ...
    def RequireCompleteInit(self, record: IInternalConfigRecord) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def GetStreamNameForConfigSource(self, streamName: String, configSource: String) -> String: ...
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: String, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: IConfigErrorInfo) -> Void: ...
    def PrefetchAll(self, configPath: String, streamName: String) -> Boolean: ...
    def PrefetchSection(self, sectionGroupName: String, sectionName: String) -> Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: String) -> Object: ...
    def CreateConfigurationContext(self, configPath: String, locationSubPath: String) -> Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: String
    HasFile: Boolean
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: Boolean
    TypeStringTransformer: list[String, String]
    AssemblyStringTransformer: list[String, String]
    TargetFramework: FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> String: ...
    def get_HasFile(self) -> Boolean: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> Boolean: ...
    def set_NamespaceDeclared(self, value: Boolean) -> Void: ...
    def get_TypeStringTransformer(self) -> list[String, String]: ...
    def set_TypeStringTransformer(self, value: list[String, String]) -> Void: ...
    def get_AssemblyStringTransformer(self) -> list[String, String]: ...
    def set_AssemblyStringTransformer(self, value: list[String, String]) -> Void: ...
    def get_TargetFramework(self) -> FrameworkName: ...
    def set_TargetFramework(self, value: FrameworkName) -> Void: ...
    def GetSection(self, sectionName: String) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: String) -> ConfigurationSectionGroup: ...
    def Save(self) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode) -> Void: ...
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...
    def SaveAs(self, filename: String) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode) -> Void: ...
    def SaveAs(self, filename: String, saveMode: ConfigurationSaveMode, forceSaveAll: Boolean) -> Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(Attribute):
    ItemType: Type
    AddItemName: String
    RemoveItemName: String
    ClearItemsName: String
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> Type: ...
    def get_AddItemName(self) -> String: ...
    def set_AddItemName(self, value: String) -> Void: ...
    def get_RemoveItemName(self) -> String: ...
    def set_RemoveItemName(self, value: String) -> Void: ...
    def get_ClearItemsName(self) -> String: ...
    def set_ClearItemsName(self, value: String) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> Void: ...

class ConfigurationConverterBase(TypeConverter):
    def CanConvertTo(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...
    def CanConvertFrom(self, ctx: ITypeDescriptorContext, type: Type) -> Boolean: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: Boolean
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> Boolean: ...
    def set_LockItem(self, value: Boolean) -> Void: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> Boolean: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: Boolean
    CollectionType: ConfigurationElementCollectionType
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_EmitClear(self) -> Boolean: ...
    def set_EmitClear(self, value: Boolean) -> Void: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def IsReadOnly(self) -> Boolean: ...
    def CopyTo(self, array: Array[ConfigurationElement], index: Int32) -> Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: String
    Filename: String
    Line: Int32
    Errors: ICollection
    def get_Message(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def get_Errors(self) -> ICollection: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetLineNumber(self, node: XmlNode) -> Int32: ...
    def GetFilename(self, node: XmlNode) -> String: ...
    def GetLineNumber(self, reader: XmlReader) -> Int32: ...
    def GetFilename(self, reader: XmlReader) -> String: ...

class ConfigurationException(SystemException):
    Message: String
    BareMessage: String
    Filename: String
    Line: Int32
    def get_Message(self) -> String: ...
    def get_BareMessage(self) -> String: ...
    def get_Filename(self) -> String: ...
    def get_Line(self) -> Int32: ...
    def GetObjectData(self, info: SerializationInfo, context: StreamingContext) -> Void: ...
    def GetXmlNodeFilename(self, node: XmlNode) -> String: ...
    def GetXmlNodeLineNumber(self, node: XmlNode) -> Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: String
    def get_MachineConfigFilename(self) -> String: ...
    def set_MachineConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ConfigurationLocation:
    Path: String
    def get_Path(self) -> String: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: Int32) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: Boolean
    AttributeList: String
    HasParentElements: Boolean
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_IsModified(self) -> Boolean: ...
    def get_AttributeList(self) -> String: ...
    def get_HasParentElements(self) -> Boolean: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Add(self, name: String) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def CopyTo(self, array: Array[String], index: Int32) -> Void: ...
    def IsReadOnly(self, name: String) -> Boolean: ...
    def SetFromList(self, attributeList: String) -> Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: String) -> Object: ...
    def RefreshSection(self, sectionName: String) -> Void: ...
    def OpenMachineConfiguration(self) -> Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: ConfigurationFileMap) -> Configuration: ...
    def OpenExeConfiguration(self, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenExeConfiguration(self, exePath: String) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: Boolean) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: String
    Description: String
    Type: Type
    DefaultValue: Object
    IsRequired: Boolean
    IsKey: Boolean
    IsDefaultCollection: Boolean
    IsTypeStringTransformationRequired: Boolean
    IsAssemblyStringTransformationRequired: Boolean
    IsVersionCheckRequired: Boolean
    Converter: TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> String: ...
    def get_Description(self) -> String: ...
    def get_Type(self) -> Type: ...
    def get_DefaultValue(self) -> Object: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> Boolean: ...
    def get_IsVersionCheckRequired(self) -> Boolean: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(Attribute):
    Name: String
    DefaultValue: Object
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: Boolean
    IsRequired: Boolean
    IsKey: Boolean
    def get_Name(self) -> String: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> Void: ...
    def get_IsDefaultCollection(self) -> Boolean: ...
    def set_IsDefaultCollection(self, value: Boolean) -> Void: ...
    def get_IsRequired(self) -> Boolean: ...
    def set_IsRequired(self, value: Boolean) -> Void: ...
    def get_IsKey(self) -> Boolean: ...
    def set_IsKey(self, value: Boolean) -> Void: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def get_Item(self, name: String) -> ConfigurationProperty: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def CopyTo(self, array: Array[ConfigurationProperty], index: Int32) -> Void: ...
    def Contains(self, name: String) -> Boolean: ...
    def Add(self, property: ConfigurationProperty) -> Void: ...
    def Remove(self, name: String) -> Boolean: ...
    def Clear(self) -> Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    def get_Item(self, name: String) -> ConfigurationSection: ...
    def get_Item(self, index: Int32) -> ConfigurationSection: ...
    def Add(self, name: String, section: ConfigurationSection) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSection], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSection: ...
    def Get(self, name: String) -> ConfigurationSection: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSectionGroup:
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    SectionGroupName: String
    Name: String
    Type: String
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_SectionGroupName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...

class ConfigurationSectionGroupCollection(NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    def get_Item(self, name: String) -> ConfigurationSectionGroup: ...
    def get_Item(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Add(self, name: String, sectionGroup: ConfigurationSectionGroup) -> Void: ...
    def Clear(self) -> Void: ...
    def CopyTo(self, array: Array[ConfigurationSectionGroup], index: Int32) -> Void: ...
    def Get(self, index: Int32) -> ConfigurationSectionGroup: ...
    def Get(self, name: String) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def GetKey(self, index: Int32) -> String: ...
    def Remove(self, name: String) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...

class ConfigurationSettings:
    AppSettings: NameValueCollection
    def get_AppSettings(self) -> NameValueCollection: ...
    def GetConfig(self, sectionName: String) -> Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(XmlAttribute):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlCDataSection(XmlCDataSection):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlComment(XmlComment):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlDocument(XmlDocument):
    LineNumber: Int32
    Filename: String
    def get_LineNumber(self) -> Int32: ...
    def get_Filename(self) -> String: ...
    def Load(self, filename: String) -> Void: ...
    def LoadSingleElement(self, filename: String, sourceReader: XmlTextReader) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ConfigXmlElement(XmlElement):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlReader(XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(XmlSignificantWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlText(XmlText):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConfigXmlWhitespace(XmlWhitespace):
    def CloneNode(self, deep: Boolean) -> XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: String
    ConnectionString: String
    ProviderName: String
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_ConnectionString(self) -> String: ...
    def set_ConnectionString(self, value: String) -> Void: ...
    def get_ProviderName(self) -> String: ...
    def set_ProviderName(self, value: String) -> Void: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    def get_Item(self, index: Int32) -> ConnectionStringSettings: ...
    def set_Item(self, index: Int32, value: ConnectionStringSettings) -> Void: ...
    def get_Item(self, name: String) -> ConnectionStringSettings: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> Int32: ...
    def Add(self, settings: ConnectionStringSettings) -> Void: ...
    def Remove(self, settings: ConnectionStringSettings) -> Void: ...
    def RemoveAt(self, index: Int32) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Object
    IsMachineLevel: Boolean
    def get_HostingContext(self) -> Object: ...
    def get_IsMachineLevel(self) -> Boolean: ...
    def GetSection(self, sectionName: String) -> Object: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: DateTime
    AllKeys: Array[Object]
    def get_Item(self, index: Int32) -> DateTime: ...
    def set_Item(self, index: Int32, value: DateTime) -> Void: ...
    def get_AllKeys(self) -> Array[Object]: ...
    def Add(self, dateTime: DateTime) -> Void: ...
    def Remove(self, dateTime: DateTime) -> Void: ...
    def Clear(self) -> Void: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: DateTime
    def get_Value(self) -> DateTime: ...
    def set_Value(self, value: DateTime) -> Void: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(Attribute):
    Value: String
    def get_Value(self) -> String: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: Boolean
    IsLocked: Boolean
    IsCollection: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Errors: ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsCollection(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> Void: ...

class ErrorInfoXmlDocument(XmlDocument):
    def Load(self, filename: String) -> Void: ...
    def CreateAttribute(self, prefix: String, localName: String, namespaceUri: String) -> XmlAttribute: ...
    def CreateElement(self, prefix: String, localName: String, namespaceUri: String) -> XmlElement: ...
    def CreateTextNode(self, text: String) -> XmlText: ...
    def CreateCDataSection(self, data: String) -> XmlCDataSection: ...
    def CreateComment(self, data: String) -> XmlComment: ...
    def CreateSignificantWhitespace(self, data: String) -> XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: String) -> XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: String
    RoamingUserConfigFilename: String
    LocalUserConfigFilename: String
    def get_ExeConfigFilename(self) -> String: ...
    def set_ExeConfigFilename(self, value: String) -> Void: ...
    def get_RoamingUserConfigFilename(self) -> String: ...
    def set_RoamingUserConfigFilename(self, value: String) -> Void: ...
    def get_LocalUserConfigFilename(self) -> String: ...
    def set_LocalUserConfigFilename(self, value: String) -> Void: ...
    def Clone(self) -> Object: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: String
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def set_Filename(self, value: String) -> Void: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class ImplicitMachineConfigHost(DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def GetStreamName(self, configPath: String) -> String: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int32
    MaxValue: Int32
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int32: ...
    def set_MinValue(self, value: Int32) -> Void: ...
    def get_MaxValue(self) -> Int32: ...
    def set_MaxValue(self, value: Int32) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: Boolean
    def get_Enabled(self) -> Boolean: ...
    def set_Enabled(self, value: Boolean) -> Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, key: String) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, keyValue: KeyValueConfigurationElement) -> Void: ...
    def Add(self, key: String, value: String) -> Void: ...
    def Remove(self, key: String) -> Void: ...
    def Clear(self) -> Void: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: String
    Value: String
    def get_Key(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class KeyValueInternalCollection(NameValueCollection):
    def Add(self, key: String, value: String) -> Void: ...
    def Clear(self) -> Void: ...
    def Remove(self, key: String) -> Void: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: String
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...
    def Initialize(self, name: String, values: NameValueCollection) -> Void: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> Void: ...
    def Reset(self, context: SettingsContext) -> Void: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> Void: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: Int64
    MaxValue: Int64
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> Int64: ...
    def set_MinValue(self, value: Int64) -> Void: ...
    def get_MaxValue(self) -> Int64: ...
    def set_MaxValue(self, value: Int64) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: Array[String]
    def get_Item(self, name: String) -> NameValueConfigurationElement: ...
    def set_Item(self, name: String, value: NameValueConfigurationElement) -> Void: ...
    def get_AllKeys(self) -> Array[String]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, nameValue: NameValueConfigurationElement) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: String
    Value: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> String: ...
    def set_Value(self, value: String) -> Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Object, configContext: Object, section: XmlNode) -> Object: ...

class NameValueSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: String
    Value: Object
    DefaultValue: Object
    ValueOrigin: PropertyValueOrigin
    IsModified: Boolean
    IsKey: Boolean
    IsRequired: Boolean
    IsLocked: Boolean
    Source: String
    LineNumber: Int32
    Type: Type
    Validator: ConfigurationValidatorBase
    Converter: TypeConverter
    Description: String
    def get_Name(self) -> String: ...
    def get_Value(self) -> Object: ...
    def set_Value(self, value: Object) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> Boolean: ...
    def get_IsKey(self) -> Boolean: ...
    def get_IsRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_Source(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def get_Type(self) -> Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> TypeConverter: ...
    def get_Description(self) -> String: ...

class PropertyInformationCollection(NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: String) -> PropertyInformation: ...
    def CopyTo(self, array: Array[PropertyInformation], index: Int32) -> Void: ...
    def GetEnumerator(self) -> IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: String
    DataProtectionProviderName: String
    ProtectedDataSectionName: String
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: String
    def get_Providers(self) -> ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> String: ...

class ProtectedConfigurationProvider(ProviderBase):
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...

class ProtectedConfigurationProviderCollection(ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: String) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: ProviderBase) -> Void: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: String
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> String: ...
    def set_DefaultProvider(self, value: String) -> Void: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: String
    Type: String
    Parameters: NameValueCollection
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_Parameters(self) -> NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    def get_Item(self, key: String) -> ProviderSettings: ...
    def get_Item(self, index: Int32) -> ProviderSettings: ...
    def set_Item(self, index: Int32, value: ProviderSettings) -> Void: ...
    def Add(self, provider: ProviderSettings) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def Clear(self) -> Void: ...

class ReadOnlyNameValueCollection(NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> String: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: String
    CspProviderName: String
    UseMachineContainer: Boolean
    UseOAEP: Boolean
    UseFIPS: Boolean
    RsaPublicKey: RSAParameters
    def Decrypt(self, encryptedNode: XmlNode) -> XmlNode: ...
    def Encrypt(self, node: XmlNode) -> XmlNode: ...
    def AddKey(self, keySize: Int32, exportable: Boolean) -> Void: ...
    def DeleteKey(self) -> Void: ...
    def ImportKey(self, xmlFileName: String, exportable: Boolean) -> Void: ...
    def ExportKey(self, xmlFileName: String, includePrivateParameters: Boolean) -> Void: ...
    def get_KeyContainerName(self) -> String: ...
    def get_CspProviderName(self) -> String: ...
    def get_UseMachineContainer(self) -> Boolean: ...
    def get_UseOAEP(self) -> Boolean: ...
    def get_UseFIPS(self) -> Boolean: ...
    def get_RsaPublicKey(self) -> RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: String
    GenericUriParserOptions: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_GenericUriParserOptions(self) -> GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Item(self, index: Int32) -> SchemeSettingElement: ...
    def get_Item(self, name: String) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> Int32: ...

class SchemeSettingInternal:
    Name: String
    Options: GenericUriParserOptions
    def get_Name(self) -> String: ...
    def get_Options(self) -> GenericUriParserOptions: ...

class SectionInformation:
    SectionName: String
    Name: String
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: Boolean
    AllowOverride: Boolean
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: String
    InheritInChildApplications: Boolean
    IsDeclared: Boolean
    IsDeclarationRequired: Boolean
    IsLocked: Boolean
    IsProtected: Boolean
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: Boolean
    RequirePermission: Boolean
    Type: String
    ForceSave: Boolean
    def get_SectionName(self) -> String: ...
    def get_Name(self) -> String: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> Void: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> Void: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> Void: ...
    def get_AllowLocation(self) -> Boolean: ...
    def set_AllowLocation(self, value: Boolean) -> Void: ...
    def get_AllowOverride(self) -> Boolean: ...
    def set_AllowOverride(self, value: Boolean) -> Void: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> Void: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> String: ...
    def set_ConfigSource(self, value: String) -> Void: ...
    def get_InheritInChildApplications(self) -> Boolean: ...
    def set_InheritInChildApplications(self, value: Boolean) -> Void: ...
    def get_IsDeclared(self) -> Boolean: ...
    def get_IsDeclarationRequired(self) -> Boolean: ...
    def get_IsLocked(self) -> Boolean: ...
    def get_IsProtected(self) -> Boolean: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> Boolean: ...
    def set_RestartOnExternalChanges(self, value: Boolean) -> Void: ...
    def get_RequirePermission(self) -> Boolean: ...
    def set_RequirePermission(self, value: Boolean) -> Void: ...
    def get_Type(self) -> String: ...
    def set_Type(self, value: String) -> Void: ...
    def get_ForceSave(self) -> Boolean: ...
    def set_ForceSave(self, value: Boolean) -> Void: ...
    def ForceDeclaration(self) -> Void: ...
    def ForceDeclaration(self, force: Boolean) -> Void: ...
    def ProtectSection(self, protectionProvider: String) -> Void: ...
    def UnprotectSection(self) -> Void: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> String: ...
    def SetRawXml(self, rawXml: String) -> Void: ...
    def RevertToParent(self) -> Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def set_LineNumber(self, value: Int32) -> Void: ...

class SettingAttribute(Attribute):
    pass

class SettingChangingEventArgs(CancelEventArgs):
    NewValue: Object
    SettingClass: String
    SettingName: String
    SettingKey: String
    def get_NewValue(self) -> Object: ...
    def get_SettingClass(self) -> String: ...
    def get_SettingName(self) -> String: ...
    def get_SettingKey(self) -> String: ...

class SettingChangingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingChangingEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingChangingEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingElement(ConfigurationElement):
    Name: String
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> Void: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: String) -> SettingElement: ...
    def Add(self, element: SettingElement) -> Void: ...
    def Remove(self, element: SettingElement) -> Void: ...
    def Clear(self) -> Void: ...

class SettingsAttributeDictionary(Hashtable):
    pass

class SettingsBase:
    Item: Object
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: Boolean
    def get_Item(self, propertyName: String) -> Object: ...
    def set_Item(self, propertyName: String, value: Object) -> Void: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> Void: ...
    def Save(self) -> Void: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    def Synchronized(self, settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> Boolean: ...

class SettingsContext(Hashtable):
    pass

class SettingsDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupDescriptionAttribute(Attribute):
    Description: String
    def get_Description(self) -> String: ...

class SettingsGroupNameAttribute(Attribute):
    GroupName: String
    def get_GroupName(self) -> String: ...

class SettingsLoadedEventArgs(EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: SettingsLoadedEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: SettingsLoadedEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsProperty) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsProperty: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyIsReadOnlyException(Exception):
    pass

class SettingsPropertyNotFoundException(Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: Int32
    IsSynchronized: Boolean
    SyncRoot: Object
    def Add(self, property: SettingsPropertyValue) -> Void: ...
    def Remove(self, name: String) -> Void: ...
    def get_Item(self, name: String) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> IEnumerator: ...
    def Clone(self) -> Object: ...
    def SetReadOnly(self) -> Void: ...
    def Clear(self) -> Void: ...
    def get_Count(self) -> Int32: ...
    def get_IsSynchronized(self) -> Boolean: ...
    def get_SyncRoot(self) -> Object: ...
    def CopyTo(self, array: Array, index: Int32) -> Void: ...

class SettingsPropertyWrongTypeException(Exception):
    pass

class SettingsProvider(ProviderBase):
    ApplicationName: String
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> Void: ...
    def get_ApplicationName(self) -> String: ...
    def set_ApplicationName(self, value: String) -> Void: ...

class SettingsProviderAttribute(Attribute):
    ProviderTypeName: String
    def get_ProviderTypeName(self) -> String: ...

class SettingsProviderCollection(ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: ProviderBase) -> Void: ...
    def get_Item(self, name: String) -> SettingsProvider: ...

class SettingsSavingEventHandler(MulticastDelegate):
    def Invoke(self, sender: Object, e: CancelEventArgs) -> Void: ...
    def BeginInvoke(self, sender: Object, e: CancelEventArgs, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class SettingsSerializeAsAttribute(Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: XmlNode
    def get_ValueXml(self) -> XmlNode: ...
    def set_ValueXml(self, value: XmlNode) -> Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: Object, context: Object, section: XmlNode) -> Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(StringCollection):
    IsModified: Boolean
    IsReadOnly: Boolean
    Item: String
    def get_IsModified(self) -> Boolean: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def get_Item(self, index: Int32) -> String: ...
    def set_Item(self, index: Int32, value: String) -> Void: ...
    def SetReadOnly(self) -> Void: ...
    def Add(self, value: String) -> Void: ...
    def AddRange(self, range: Array[String]) -> Void: ...
    def Clear(self) -> Void: ...
    def Insert(self, index: Int32, value: String) -> Void: ...
    def Remove(self, value: String) -> Void: ...
    def Clone(self) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: Int32
    MaxLength: Int32
    InvalidCharacters: String
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> Int32: ...
    def set_MinLength(self, value: Int32) -> Void: ...
    def get_MaxLength(self) -> Int32: ...
    def set_MaxLength(self, value: Int32) -> Void: ...
    def get_InvalidCharacters(self) -> String: ...
    def set_InvalidCharacters(self, value: String) -> Void: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: Type) -> Boolean: ...
    def Validate(self, value: Object) -> Void: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: String
    TimeSpanMaxValue: String
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: TimeSpan
    MaxValue: TimeSpan
    MinValueString: String
    MaxValueString: String
    ExcludeRange: Boolean
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> TimeSpan: ...
    def get_MaxValue(self) -> TimeSpan: ...
    def get_MinValueString(self) -> String: ...
    def set_MinValueString(self, value: String) -> Void: ...
    def get_MaxValueString(self) -> String: ...
    def set_MaxValueString(self, value: String) -> Void: ...
    def get_ExcludeRange(self) -> Boolean: ...
    def set_ExcludeRange(self, value: Boolean) -> Void: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(DelegatingConfigHost):
    def GetStreamVersion(self, streamName: String) -> Object: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...
    def IsConfigRecordRequired(self, configPath: String) -> Boolean: ...
    def DeleteStream(self, streamName: String) -> Void: ...
    def IsFile(self, streamName: String) -> Boolean: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(MulticastDelegate):
    def Invoke(self, value: Object) -> Void: ...
    def BeginInvoke(self, value: Object, callback: AsyncCallback, object: Object) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Object, allowedType: Type) -> Void: ...
    def ValidateScalar(self, value: T, min: T, max: T, resolution: T, exclusiveRange: Boolean) -> Void: ...
    def ValidateScalar(self, value: TimeSpan, min: TimeSpan, max: TimeSpan, resolutionInSeconds: Int64, exclusiveRange: Boolean) -> Void: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: ITypeDescriptorContext, ci: CultureInfo, value: Object, type: Type) -> Object: ...
    def ConvertFrom(self, ctx: ITypeDescriptorContext, ci: CultureInfo, data: Object) -> Object: ...

class XmlUtil:
    Filename: String
    LineNumber: Int32
    def get_Filename(self) -> String: ...
    def get_LineNumber(self) -> Int32: ...
    def Dispose(self) -> Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: String
    IsReadOnly: Boolean
    DefaultValue: Object
    PropertyType: Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: Boolean
    ThrowOnErrorSerializing: Boolean
    def get_Name(self) -> String: ...
    def set_Name(self, value: String) -> Void: ...
    def get_IsReadOnly(self) -> Boolean: ...
    def set_IsReadOnly(self, value: Boolean) -> Void: ...
    def get_DefaultValue(self) -> Object: ...
    def set_DefaultValue(self, value: Object) -> Void: ...
    def get_PropertyType(self) -> Type: ...
    def set_PropertyType(self, value: Type) -> Void: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> Void: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> Void: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: Boolean) -> Void: ...
    def get_ThrowOnErrorSerializing(self) -> Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: Boolean) -> Void: ...

class SettingsPropertyValue:
    Name: String
    IsDirty: Boolean
    Property: SettingsProperty
    UsingDefaultValue: Boolean
    Deserialized: Boolean
    PropertyValue: Object
    SerializedValue: Object
    def get_Name(self) -> String: ...
    def get_IsDirty(self) -> Boolean: ...
    def set_IsDirty(self, value: Boolean) -> Void: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> Boolean: ...
    def get_Deserialized(self) -> Boolean: ...
    def set_Deserialized(self, value: Boolean) -> Void: ...
    def get_PropertyValue(self) -> Object: ...
    def set_PropertyValue(self, value: Object) -> Void: ...
    def get_SerializedValue(self) -> Object: ...
    def set_SerializedValue(self, value: Object) -> Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(Attribute):
    pass

class UriIdnScopeTypeConverter(TypeConverter):
    def CanConvertFrom(self, context: ITypeDescriptorContext, sourceType: Type) -> Boolean: ...
    def ConvertFrom(self, context: ITypeDescriptorContext, culture: CultureInfo, value: Object) -> Object: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> Int32: ...

class ClientSettingsConfigurationHost(DelegatingConfigHost):
    def Init(self, configRoot: IInternalConfigRoot, hostInitParams: Array[Object]) -> Void: ...
    def InitForConfiguration(self, locationSubPath: String, configPath: String, locationConfigPath: String, configRoot: IInternalConfigRoot, hostInitConfigurationParams: Array[Object]) -> Void: ...
    def OpenStreamForRead(self, streamName: String) -> Stream: ...
    def OpenStreamForWrite(self, streamName: String, templateStreamName: String, writeContext: Object) -> Stream: ...
    def WriteCompleted(self, streamName: String, success: Boolean, writeContext: Object) -> Void: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[String]

class <>c__DisplayClass6_0:
    value: String

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: System.Boolean
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> System.Boolean: ...
    def Initialize(self, name: System.String, configurationValues: System.Collections.Specialized.NameValueCollection) -> System.Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: System.String) -> System.Object: ...
    def Init(self) -> System.Void: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> System.Void: ...

class IPersistComponentSettings:
    SaveSettings: System.Boolean
    SettingsKey: System.String
    def get_SaveSettings(self) -> System.Boolean: ...
    def set_SaveSettings(self, value: System.Boolean) -> System.Void: ...
    def get_SettingsKey(self) -> System.String: ...
    def set_SettingsKey(self, value: System.String) -> System.Void: ...
    def LoadComponentSettings(self) -> System.Void: ...
    def SaveComponentSettings(self) -> System.Void: ...
    def ResetComponentSettings(self) -> System.Void: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: System.String
    Item: System.Object
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> System.String: ...
    def set_SettingsKey(self, value: System.String) -> System.Void: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> System.Void: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> System.Void: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> System.Void: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> System.Void: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> System.Void: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> System.Void: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> System.Void: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> System.Void: ...
    def GetPreviousVersion(self, propertyName: System.String) -> System.Object: ...
    def Reload(self) -> System.Void: ...
    def Reset(self) -> System.Void: ...
    def Save(self) -> System.Void: ...
    def get_Item(self, propertyName: System.String) -> System.Object: ...
    def set_Item(self, propertyName: System.String, value: System.Object) -> System.Void: ...
    def Upgrade(self) -> System.Void: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: System.String, type: System.Type) -> System.Object: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: System.String
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> System.String: ...
    def set_File(self, value: System.String) -> System.Void: ...

class BaseConfigurationRecord:
    ConfigPath: System.String
    StreamName: System.String
    HasInitErrors: System.Boolean
    def get_ConfigPath(self) -> System.String: ...
    def get_StreamName(self) -> System.String: ...
    def get_HasInitErrors(self) -> System.Boolean: ...
    def ThrowIfInitErrors(self) -> System.Void: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def GetLkgSection(self, configKey: System.String) -> System.Object: ...
    def RefreshSection(self, configKey: System.String) -> System.Void: ...
    def Remove(self) -> System.Void: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> System.Void: ...
    def get_CallbackMethodName(self) -> System.String: ...
    def set_CallbackMethodName(self, value: System.String) -> System.Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: System.Boolean
    HasLocalConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def RefreshConfigPaths(self) -> System.Void: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String, configPath: System.String, locationConfigPath: System.String, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: System.String
    HasFile: System.Boolean
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: System.Boolean
    TypeStringTransformer: list[System.String, System.String]
    AssemblyStringTransformer: list[System.String, System.String]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> System.String: ...
    def get_HasFile(self) -> System.Boolean: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> System.Boolean: ...
    def set_NamespaceDeclared(self, value: System.Boolean) -> System.Void: ...
    def get_TypeStringTransformer(self) -> list[System.String, System.String]: ...
    def set_TypeStringTransformer(self, value: list[System.String, System.String]) -> System.Void: ...
    def get_AssemblyStringTransformer(self) -> list[System.String, System.String]: ...
    def set_AssemblyStringTransformer(self, value: list[System.String, System.String]) -> System.Void: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> System.Void: ...
    def GetSection(self, sectionName: System.String) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def Save(self) -> System.Void: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> System.Void: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: System.Boolean) -> System.Void: ...
    def SaveAs(self, filename: System.String) -> System.Void: ...
    def SaveAs(self, filename: System.String, saveMode: System.Configuration.ConfigurationSaveMode) -> System.Void: ...
    def SaveAs(self, filename: System.String, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: System.Boolean) -> System.Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: System.String
    RemoveItemName: System.String
    ClearItemsName: System.String
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> System.String: ...
    def set_AddItemName(self, value: System.String) -> System.Void: ...
    def get_RemoveItemName(self) -> System.String: ...
    def set_RemoveItemName(self, value: System.String) -> System.Void: ...
    def get_ClearItemsName(self) -> System.String: ...
    def set_ClearItemsName(self, value: System.String) -> System.Void: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> System.Void: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> System.Boolean: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> System.Boolean: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: System.Boolean
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> System.Boolean: ...
    def set_LockItem(self, value: System.Boolean) -> System.Void: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> System.Boolean: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: System.Boolean
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_EmitClear(self) -> System.Boolean: ...
    def set_EmitClear(self, value: System.Boolean) -> System.Void: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> System.Boolean: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationElement], index: System.Int32) -> System.Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: System.String
    Filename: System.String
    Line: System.Int32
    Errors: System.Collections.ICollection
    def get_Message(self) -> System.String: ...
    def get_Filename(self) -> System.String: ...
    def get_Line(self) -> System.Int32: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> System.Void: ...
    def GetLineNumber(self, node: System.Xml.XmlNode) -> System.Int32: ...
    def GetFilename(self, node: System.Xml.XmlNode) -> System.String: ...
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> System.Int32: ...
    def GetFilename(self, reader: System.Xml.XmlReader) -> System.String: ...

class ConfigurationException(System.SystemException):
    Message: System.String
    BareMessage: System.String
    Filename: System.String
    Line: System.Int32
    def get_Message(self) -> System.String: ...
    def get_BareMessage(self) -> System.String: ...
    def get_Filename(self) -> System.String: ...
    def get_Line(self) -> System.Int32: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> System.Void: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> System.String: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> System.Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: System.String
    def get_MachineConfigFilename(self) -> System.String: ...
    def set_MachineConfigFilename(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Object: ...

class ConfigurationLocation:
    Path: System.String
    def get_Path(self) -> System.String: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: System.Boolean
    AttributeList: System.String
    HasParentElements: System.Boolean
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_IsModified(self) -> System.Boolean: ...
    def get_AttributeList(self) -> System.String: ...
    def get_HasParentElements(self) -> System.Boolean: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: System.String) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Contains(self, name: System.String) -> System.Boolean: ...
    def CopyTo(self, array: System.Array[System.String], index: System.Int32) -> System.Void: ...
    def IsReadOnly(self, name: System.String) -> System.Boolean: ...
    def SetFromList(self, attributeList: System.String) -> System.Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: System.String) -> System.Object: ...
    def RefreshSection(self, sectionName: System.String) -> System.Void: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, exePath: System.String) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: System.Boolean) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: System.String
    Description: System.String
    Type: System.Type
    DefaultValue: System.Object
    IsRequired: System.Boolean
    IsKey: System.Boolean
    IsDefaultCollection: System.Boolean
    IsTypeStringTransformationRequired: System.Boolean
    IsAssemblyStringTransformationRequired: System.Boolean
    IsVersionCheckRequired: System.Boolean
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> System.String: ...
    def get_Description(self) -> System.String: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> System.Object: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def get_IsKey(self) -> System.Boolean: ...
    def get_IsDefaultCollection(self) -> System.Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> System.Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> System.Boolean: ...
    def get_IsVersionCheckRequired(self) -> System.Boolean: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: System.String
    DefaultValue: System.Object
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: System.Boolean
    IsRequired: System.Boolean
    IsKey: System.Boolean
    def get_Name(self) -> System.String: ...
    def get_DefaultValue(self) -> System.Object: ...
    def set_DefaultValue(self, value: System.Object) -> System.Void: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> System.Void: ...
    def get_IsDefaultCollection(self) -> System.Boolean: ...
    def set_IsDefaultCollection(self, value: System.Boolean) -> System.Void: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def set_IsRequired(self, value: System.Boolean) -> System.Void: ...
    def get_IsKey(self) -> System.Boolean: ...
    def set_IsKey(self, value: System.Boolean) -> System.Void: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationProperty], index: System.Int32) -> System.Void: ...
    def Contains(self, name: System.String) -> System.Boolean: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Boolean: ...
    def Clear(self) -> System.Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationSection: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: System.String, section: System.Configuration.ConfigurationSection) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationSection], index: System.Int32) -> System.Void: ...
    def Get(self, index: System.Int32) -> System.Configuration.ConfigurationSection: ...
    def Get(self, name: System.String) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: System.Int32) -> System.String: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...

class ConfigurationSectionGroup:
    IsDeclared: System.Boolean
    IsDeclarationRequired: System.Boolean
    SectionGroupName: System.String
    Name: System.String
    Type: System.String
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> System.Boolean: ...
    def get_IsDeclarationRequired(self) -> System.Boolean: ...
    def get_SectionGroupName(self) -> System.String: ...
    def get_Name(self) -> System.String: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> System.Void: ...
    def ForceDeclaration(self, force: System.Boolean) -> System.Void: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: System.String, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationSectionGroup], index: System.Int32) -> System.Void: ...
    def Get(self, index: System.Int32) -> System.Configuration.ConfigurationSectionGroup: ...
    def Get(self, name: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: System.Int32) -> System.String: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: System.String) -> System.Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: System.Int32
    Filename: System.String
    def get_LineNumber(self) -> System.Int32: ...
    def get_Filename(self) -> System.String: ...
    def Load(self, filename: System.String) -> System.Void: ...
    def LoadSingleElement(self, filename: System.String, sourceReader: System.Xml.XmlTextReader) -> System.Void: ...
    def CreateAttribute(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: System.String) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: System.String) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: System.String) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: System.String) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: System.String) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: System.String
    ConnectionString: System.String
    ProviderName: System.String
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_ConnectionString(self) -> System.String: ...
    def set_ConnectionString(self, value: System.String) -> System.Void: ...
    def get_ProviderName(self) -> System.String: ...
    def set_ProviderName(self, value: System.String) -> System.Void: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    def get_Item(self, index: System.Int32) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: System.Int32, value: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.ConnectionStringSettings: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> System.Int32: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: System.Object
    IsMachineLevel: System.Boolean
    def get_HostingContext(self) -> System.Object: ...
    def get_IsMachineLevel(self) -> System.Boolean: ...
    def GetSection(self, sectionName: System.String) -> System.Object: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: System.Array[System.Object]
    def get_Item(self, index: System.Int32) -> System.DateTime: ...
    def set_Item(self, index: System.Int32, value: System.DateTime) -> System.Void: ...
    def get_AllKeys(self) -> System.Array[System.Object]: ...
    def Add(self, dateTime: System.DateTime) -> System.Void: ...
    def Remove(self, dateTime: System.DateTime) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> System.Void: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: System.String
    def get_Value(self) -> System.String: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: System.Boolean
    IsLocked: System.Boolean
    IsCollection: System.Boolean
    Source: System.String
    LineNumber: System.Int32
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_IsCollection(self) -> System.Boolean: ...
    def get_Source(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> System.Void: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: System.String) -> System.Void: ...
    def CreateAttribute(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: System.String) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: System.String) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: System.String) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: System.String) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: System.String) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: System.String
    RoamingUserConfigFilename: System.String
    LocalUserConfigFilename: System.String
    def get_ExeConfigFilename(self) -> System.String: ...
    def set_ExeConfigFilename(self, value: System.String) -> System.Void: ...
    def get_RoamingUserConfigFilename(self) -> System.String: ...
    def set_RoamingUserConfigFilename(self, value: System.String) -> System.Void: ...
    def get_LocalUserConfigFilename(self) -> System.String: ...
    def set_LocalUserConfigFilename(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Object: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: System.String
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> System.String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def set_Filename(self, value: System.String) -> System.Void: ...
    def get_LineNumber(self) -> System.Int32: ...
    def set_LineNumber(self, value: System.Int32) -> System.Void: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> System.Void: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String, configPath: System.String, locationConfigPath: System.String, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.Int32
    MaxValue: System.Int32
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.Int32: ...
    def set_MinValue(self, value: System.Int32) -> System.Void: ...
    def get_MaxValue(self) -> System.Int32: ...
    def set_MaxValue(self, value: System.Int32) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: System.Boolean
    def get_Enabled(self) -> System.Boolean: ...
    def set_Enabled(self, value: System.Boolean) -> System.Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: System.Array[System.String]
    def get_Item(self, key: System.String) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> System.Array[System.String]: ...
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> System.Void: ...
    def Add(self, key: System.String, value: System.String) -> System.Void: ...
    def Remove(self, key: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: System.String
    Value: System.String
    def get_Key(self) -> System.String: ...
    def get_Value(self) -> System.String: ...
    def set_Value(self, value: System.String) -> System.Void: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: System.String, value: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Remove(self, key: System.String) -> System.Void: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: System.String
    def get_ApplicationName(self) -> System.String: ...
    def set_ApplicationName(self, value: System.String) -> System.Void: ...
    def Initialize(self, name: System.String, values: System.Collections.Specialized.NameValueCollection) -> System.Void: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> System.Void: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> System.Void: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Void: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.Int64
    MaxValue: System.Int64
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.Int64: ...
    def set_MinValue(self, value: System.Int64) -> System.Void: ...
    def get_MaxValue(self) -> System.Int64: ...
    def set_MaxValue(self, value: System.Int64) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: System.Array[System.String]
    def get_Item(self, name: System.String) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: System.String, value: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def get_AllKeys(self) -> System.Array[System.String]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: System.String
    Value: System.String
    def get_Name(self) -> System.String: ...
    def get_Value(self) -> System.String: ...
    def set_Value(self, value: System.String) -> System.Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class NameValueSectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: System.String
    Value: System.Object
    DefaultValue: System.Object
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: System.Boolean
    IsKey: System.Boolean
    IsRequired: System.Boolean
    IsLocked: System.Boolean
    Source: System.String
    LineNumber: System.Int32
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: System.String
    def get_Name(self) -> System.String: ...
    def get_Value(self) -> System.Object: ...
    def set_Value(self, value: System.Object) -> System.Void: ...
    def get_DefaultValue(self) -> System.Object: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> System.Boolean: ...
    def get_IsKey(self) -> System.Boolean: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_Source(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> System.String: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: System.String) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: System.Array[System.Configuration.PropertyInformation], index: System.Int32) -> System.Void: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: System.String
    DataProtectionProviderName: System.String
    ProtectedDataSectionName: System.String
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: System.String
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> System.String: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: System.String) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> System.Void: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: System.String
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> System.String: ...
    def set_DefaultProvider(self, value: System.String) -> System.Void: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: System.String
    Type: System.String
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    def get_Item(self, key: System.String) -> System.Configuration.ProviderSettings: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: System.Int32, value: System.Configuration.ProviderSettings) -> System.Void: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> System.String: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: System.String
    CspProviderName: System.String
    UseMachineContainer: System.Boolean
    UseOAEP: System.Boolean
    UseFIPS: System.Boolean
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: System.Int32, exportable: System.Boolean) -> System.Void: ...
    def DeleteKey(self) -> System.Void: ...
    def ImportKey(self, xmlFileName: System.String, exportable: System.Boolean) -> System.Void: ...
    def ExportKey(self, xmlFileName: System.String, includePrivateParameters: System.Boolean) -> System.Void: ...
    def get_KeyContainerName(self) -> System.String: ...
    def get_CspProviderName(self) -> System.String: ...
    def get_UseMachineContainer(self) -> System.Boolean: ...
    def get_UseOAEP(self) -> System.Boolean: ...
    def get_UseFIPS(self) -> System.Boolean: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: System.String
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> System.String: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.SchemeSettingElement: ...
    def get_Item(self, name: System.String) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> System.Int32: ...

class SchemeSettingInternal:
    Name: System.String
    Options: System.GenericUriParserOptions
    def get_Name(self) -> System.String: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: System.String
    Name: System.String
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: System.Boolean
    AllowOverride: System.Boolean
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: System.String
    InheritInChildApplications: System.Boolean
    IsDeclared: System.Boolean
    IsDeclarationRequired: System.Boolean
    IsLocked: System.Boolean
    IsProtected: System.Boolean
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: System.Boolean
    RequirePermission: System.Boolean
    Type: System.String
    ForceSave: System.Boolean
    def get_SectionName(self) -> System.String: ...
    def get_Name(self) -> System.String: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> System.Void: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> System.Void: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> System.Void: ...
    def get_AllowLocation(self) -> System.Boolean: ...
    def set_AllowLocation(self, value: System.Boolean) -> System.Void: ...
    def get_AllowOverride(self) -> System.Boolean: ...
    def set_AllowOverride(self, value: System.Boolean) -> System.Void: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> System.Void: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> System.String: ...
    def set_ConfigSource(self, value: System.String) -> System.Void: ...
    def get_InheritInChildApplications(self) -> System.Boolean: ...
    def set_InheritInChildApplications(self, value: System.Boolean) -> System.Void: ...
    def get_IsDeclared(self) -> System.Boolean: ...
    def get_IsDeclarationRequired(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_IsProtected(self) -> System.Boolean: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> System.Boolean: ...
    def set_RestartOnExternalChanges(self, value: System.Boolean) -> System.Void: ...
    def get_RequirePermission(self) -> System.Boolean: ...
    def set_RequirePermission(self, value: System.Boolean) -> System.Void: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_ForceSave(self) -> System.Boolean: ...
    def set_ForceSave(self, value: System.Boolean) -> System.Void: ...
    def ForceDeclaration(self) -> System.Void: ...
    def ForceDeclaration(self, force: System.Boolean) -> System.Void: ...
    def ProtectSection(self, protectionProvider: System.String) -> System.Void: ...
    def UnprotectSection(self) -> System.Void: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> System.String: ...
    def SetRawXml(self, rawXml: System.String) -> System.Void: ...
    def RevertToParent(self) -> System.Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def set_LineNumber(self, value: System.Int32) -> System.Void: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: System.Object
    SettingClass: System.String
    SettingName: System.String
    SettingKey: System.String
    def get_NewValue(self) -> System.Object: ...
    def get_SettingClass(self) -> System.String: ...
    def get_SettingName(self) -> System.String: ...
    def get_SettingKey(self) -> System.String: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.SettingChangingEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: System.String
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> System.Void: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> System.Void: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: System.String) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> System.Void: ...
    def Remove(self, element: System.Configuration.SettingElement) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: System.Object
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: System.Boolean
    def get_Item(self, propertyName: System.String) -> System.Object: ...
    def set_Item(self, propertyName: System.String, value: System.Object) -> System.Void: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> System.Void: ...
    def Save(self) -> System.Void: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> System.Boolean: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: System.String
    def get_Description(self) -> System.String: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: System.String
    def get_Description(self) -> System.String: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: System.String
    def get_GroupName(self) -> System.String: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.SettingsLoadedEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def Add(self, property: System.Configuration.SettingsProperty) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> System.Object: ...
    def SetReadOnly(self) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def CopyTo(self, array: System.Array, index: System.Int32) -> System.Void: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> System.Object: ...
    def SetReadOnly(self) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def CopyTo(self, array: System.Array, index: System.Int32) -> System.Void: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: System.String
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> System.Void: ...
    def get_ApplicationName(self) -> System.String: ...
    def set_ApplicationName(self, value: System.String) -> System.Void: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: System.String
    def get_ProviderTypeName(self) -> System.String: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.ComponentModel.CancelEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> System.Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: System.Boolean
    IsReadOnly: System.Boolean
    Item: System.String
    def get_IsModified(self) -> System.Boolean: ...
    def get_IsReadOnly(self) -> System.Boolean: ...
    def get_Item(self, index: System.Int32) -> System.String: ...
    def set_Item(self, index: System.Int32, value: System.String) -> System.Void: ...
    def SetReadOnly(self) -> System.Void: ...
    def Add(self, value: System.String) -> System.Void: ...
    def AddRange(self, range: System.Array[System.String]) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Insert(self, index: System.Int32, value: System.String) -> System.Void: ...
    def Remove(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: System.Int32
    MaxLength: System.Int32
    InvalidCharacters: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> System.Int32: ...
    def set_MinLength(self, value: System.Int32) -> System.Void: ...
    def get_MaxLength(self) -> System.Int32: ...
    def set_MaxLength(self, value: System.Int32) -> System.Void: ...
    def get_InvalidCharacters(self) -> System.String: ...
    def set_InvalidCharacters(self, value: System.String) -> System.Void: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: System.String
    TimeSpanMaxValue: System.String
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: System.String
    MaxValueString: System.String
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> System.String: ...
    def set_MinValueString(self, value: System.String) -> System.Void: ...
    def get_MaxValueString(self) -> System.String: ...
    def set_MaxValueString(self, value: System.String) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: System.Object) -> System.Void: ...
    def BeginInvoke(self, value: System.Object, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: System.Object, allowedType: System.Type) -> System.Void: ...
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: System.Boolean) -> System.Void: ...
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: System.Int64, exclusiveRange: System.Boolean) -> System.Void: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class XmlUtil:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def Dispose(self) -> System.Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: System.String
    IsReadOnly: System.Boolean
    DefaultValue: System.Object
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: System.Boolean
    ThrowOnErrorSerializing: System.Boolean
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_IsReadOnly(self) -> System.Boolean: ...
    def set_IsReadOnly(self, value: System.Boolean) -> System.Void: ...
    def get_DefaultValue(self) -> System.Object: ...
    def set_DefaultValue(self, value: System.Object) -> System.Void: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> System.Void: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> System.Void: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> System.Void: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> System.Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: System.Boolean) -> System.Void: ...
    def get_ThrowOnErrorSerializing(self) -> System.Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: System.Boolean) -> System.Void: ...

class SettingsPropertyValue:
    Name: System.String
    IsDirty: System.Boolean
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: System.Boolean
    Deserialized: System.Boolean
    PropertyValue: System.Object
    SerializedValue: System.Object
    def get_Name(self) -> System.String: ...
    def get_IsDirty(self) -> System.Boolean: ...
    def set_IsDirty(self, value: System.Boolean) -> System.Void: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> System.Boolean: ...
    def get_Deserialized(self) -> System.Boolean: ...
    def set_Deserialized(self, value: System.Boolean) -> System.Void: ...
    def get_PropertyValue(self) -> System.Object: ...
    def set_PropertyValue(self, value: System.Object) -> System.Void: ...
    def get_SerializedValue(self) -> System.Object: ...
    def set_SerializedValue(self, value: System.Object) -> System.Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> System.Boolean: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: System.Object) -> System.Object: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> System.Int32: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String, configPath: System.String, locationConfigPath: System.String, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[System.String]

class <>c__DisplayClass6_0:
    value: System.String

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: System.Boolean
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> System.Boolean: ...
    def Initialize(self, name: System.String, configurationValues: System.Collections.Specialized.NameValueCollection) -> System.Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: System.String) -> System.Object: ...
    def Init(self) -> System.Void: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> System.Void: ...

class IPersistComponentSettings:
    SaveSettings: System.Boolean
    SettingsKey: System.String
    def get_SaveSettings(self) -> System.Boolean: ...
    def set_SaveSettings(self, value: System.Boolean) -> System.Void: ...
    def get_SettingsKey(self) -> System.String: ...
    def set_SettingsKey(self, value: System.String) -> System.Void: ...
    def LoadComponentSettings(self) -> System.Void: ...
    def SaveComponentSettings(self) -> System.Void: ...
    def ResetComponentSettings(self) -> System.Void: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: System.String
    Item: System.Object
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> System.String: ...
    def set_SettingsKey(self, value: System.String) -> System.Void: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> System.Void: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> System.Void: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> System.Void: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> System.Void: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> System.Void: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> System.Void: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> System.Void: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> System.Void: ...
    def GetPreviousVersion(self, propertyName: System.String) -> System.Object: ...
    def Reload(self) -> System.Void: ...
    def Reset(self) -> System.Void: ...
    def Save(self) -> System.Void: ...
    def get_Item(self, propertyName: System.String) -> System.Object: ...
    def set_Item(self, propertyName: System.String, value: System.Object) -> System.Void: ...
    def Upgrade(self) -> System.Void: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: System.String, type: System.Type) -> System.Object: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: System.String
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> System.String: ...
    def set_File(self, value: System.String) -> System.Void: ...

class BaseConfigurationRecord:
    ConfigPath: System.String
    StreamName: System.String
    HasInitErrors: System.Boolean
    def get_ConfigPath(self) -> System.String: ...
    def get_StreamName(self) -> System.String: ...
    def get_HasInitErrors(self) -> System.Boolean: ...
    def ThrowIfInitErrors(self) -> System.Void: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def GetLkgSection(self, configKey: System.String) -> System.Object: ...
    def RefreshSection(self, configKey: System.String) -> System.Void: ...
    def Remove(self) -> System.Void: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> System.Void: ...
    def get_CallbackMethodName(self) -> System.String: ...
    def set_CallbackMethodName(self, value: System.String) -> System.Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: System.Boolean
    HasLocalConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def RefreshConfigPaths(self) -> System.Void: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: System.String
    HasFile: System.Boolean
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: System.Boolean
    TypeStringTransformer: dict[System.String, System.String]
    AssemblyStringTransformer: dict[System.String, System.String]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> System.String: ...
    def get_HasFile(self) -> System.Boolean: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> System.Boolean: ...
    def set_NamespaceDeclared(self, value: System.Boolean) -> System.Void: ...
    def get_TypeStringTransformer(self) -> dict[System.String, System.String]: ...
    def set_TypeStringTransformer(self, value: dict[System.String, System.String]) -> System.Void: ...
    def get_AssemblyStringTransformer(self) -> dict[System.String, System.String]: ...
    def set_AssemblyStringTransformer(self, value: dict[System.String, System.String]) -> System.Void: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> System.Void: ...
    def GetSection(self, sectionName: System.String) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def Save(self) -> System.Void: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> System.Void: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: System.Boolean) -> System.Void: ...
    def SaveAs(self, filename: System.String) -> System.Void: ...
    def SaveAs(self, filename: System.String, saveMode: System.Configuration.ConfigurationSaveMode) -> System.Void: ...
    def SaveAs(self, filename: System.String, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: System.Boolean) -> System.Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: System.String
    RemoveItemName: System.String
    ClearItemsName: System.String
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> System.String: ...
    def set_AddItemName(self, value: System.String) -> System.Void: ...
    def get_RemoveItemName(self) -> System.String: ...
    def set_RemoveItemName(self, value: System.String) -> System.Void: ...
    def get_ClearItemsName(self) -> System.String: ...
    def set_ClearItemsName(self, value: System.String) -> System.Void: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> System.Void: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> System.Boolean: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> System.Boolean: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: System.Boolean
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> System.Boolean: ...
    def set_LockItem(self, value: System.Boolean) -> System.Void: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> System.Boolean: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: System.Boolean
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_EmitClear(self) -> System.Boolean: ...
    def set_EmitClear(self, value: System.Boolean) -> System.Void: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> System.Boolean: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationElement], index: System.Int32) -> System.Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: System.String
    Filename: System.String
    Line: System.Int32
    Errors: System.Collections.ICollection
    def get_Message(self) -> System.String: ...
    def get_Filename(self) -> System.String: ...
    def get_Line(self) -> System.Int32: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> System.Void: ...
    def GetLineNumber(self, node: System.Xml.XmlNode) -> System.Int32: ...
    def GetFilename(self, node: System.Xml.XmlNode) -> System.String: ...
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> System.Int32: ...
    def GetFilename(self, reader: System.Xml.XmlReader) -> System.String: ...

class ConfigurationException(System.SystemException):
    Message: System.String
    BareMessage: System.String
    Filename: System.String
    Line: System.Int32
    def get_Message(self) -> System.String: ...
    def get_BareMessage(self) -> System.String: ...
    def get_Filename(self) -> System.String: ...
    def get_Line(self) -> System.Int32: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> System.Void: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> System.String: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> System.Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: System.String
    def get_MachineConfigFilename(self) -> System.String: ...
    def set_MachineConfigFilename(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Object: ...

class ConfigurationLocation:
    Path: System.String
    def get_Path(self) -> System.String: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: System.Boolean
    AttributeList: System.String
    HasParentElements: System.Boolean
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_IsModified(self) -> System.Boolean: ...
    def get_AttributeList(self) -> System.String: ...
    def get_HasParentElements(self) -> System.Boolean: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: System.String) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Contains(self, name: System.String) -> System.Boolean: ...
    def CopyTo(self, array: System.Array[System.String], index: System.Int32) -> System.Void: ...
    def IsReadOnly(self, name: System.String) -> System.Boolean: ...
    def SetFromList(self, attributeList: System.String) -> System.Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: System.String) -> System.Object: ...
    def RefreshSection(self, sectionName: System.String) -> System.Void: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, exePath: System.String) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: System.Boolean) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: System.String
    Description: System.String
    Type: System.Type
    DefaultValue: System.Object
    IsRequired: System.Boolean
    IsKey: System.Boolean
    IsDefaultCollection: System.Boolean
    IsTypeStringTransformationRequired: System.Boolean
    IsAssemblyStringTransformationRequired: System.Boolean
    IsVersionCheckRequired: System.Boolean
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> System.String: ...
    def get_Description(self) -> System.String: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> System.Object: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def get_IsKey(self) -> System.Boolean: ...
    def get_IsDefaultCollection(self) -> System.Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> System.Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> System.Boolean: ...
    def get_IsVersionCheckRequired(self) -> System.Boolean: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: System.String
    DefaultValue: System.Object
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: System.Boolean
    IsRequired: System.Boolean
    IsKey: System.Boolean
    def get_Name(self) -> System.String: ...
    def get_DefaultValue(self) -> System.Object: ...
    def set_DefaultValue(self, value: System.Object) -> System.Void: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> System.Void: ...
    def get_IsDefaultCollection(self) -> System.Boolean: ...
    def set_IsDefaultCollection(self, value: System.Boolean) -> System.Void: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def set_IsRequired(self, value: System.Boolean) -> System.Void: ...
    def get_IsKey(self) -> System.Boolean: ...
    def set_IsKey(self, value: System.Boolean) -> System.Void: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationProperty], index: System.Int32) -> System.Void: ...
    def Contains(self, name: System.String) -> System.Boolean: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Boolean: ...
    def Clear(self) -> System.Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationSection: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: System.String, section: System.Configuration.ConfigurationSection) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationSection], index: System.Int32) -> System.Void: ...
    def Get(self, index: System.Int32) -> System.Configuration.ConfigurationSection: ...
    def Get(self, name: System.String) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: System.Int32) -> System.String: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...

class ConfigurationSectionGroup:
    IsDeclared: System.Boolean
    IsDeclarationRequired: System.Boolean
    SectionGroupName: System.String
    Name: System.String
    Type: System.String
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> System.Boolean: ...
    def get_IsDeclarationRequired(self) -> System.Boolean: ...
    def get_SectionGroupName(self) -> System.String: ...
    def get_Name(self) -> System.String: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> System.Void: ...
    def ForceDeclaration(self, force: System.Boolean) -> System.Void: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: System.String, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def CopyTo(self, array: System.Array[System.Configuration.ConfigurationSectionGroup], index: System.Int32) -> System.Void: ...
    def Get(self, index: System.Int32) -> System.Configuration.ConfigurationSectionGroup: ...
    def Get(self, name: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: System.Int32) -> System.String: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: System.String) -> System.Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: System.Int32
    Filename: System.String
    def get_LineNumber(self) -> System.Int32: ...
    def get_Filename(self) -> System.String: ...
    def Load(self, filename: System.String) -> System.Void: ...
    def LoadSingleElement(self, filename: System.String, sourceReader: System.Xml.XmlTextReader) -> System.Void: ...
    def CreateAttribute(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: System.String) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: System.String) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: System.String) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: System.String) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: System.String) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: System.String
    ConnectionString: System.String
    ProviderName: System.String
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_ConnectionString(self) -> System.String: ...
    def set_ConnectionString(self, value: System.String) -> System.Void: ...
    def get_ProviderName(self) -> System.String: ...
    def set_ProviderName(self, value: System.String) -> System.Void: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    def get_Item(self, index: System.Int32) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: System.Int32, value: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.ConnectionStringSettings: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> System.Int32: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: System.Object
    IsMachineLevel: System.Boolean
    def get_HostingContext(self) -> System.Object: ...
    def get_IsMachineLevel(self) -> System.Boolean: ...
    def GetSection(self, sectionName: System.String) -> System.Object: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: System.Array[System.Object]
    def get_Item(self, index: System.Int32) -> System.DateTime: ...
    def set_Item(self, index: System.Int32, value: System.DateTime) -> System.Void: ...
    def get_AllKeys(self) -> System.Array[System.Object]: ...
    def Add(self, dateTime: System.DateTime) -> System.Void: ...
    def Remove(self, dateTime: System.DateTime) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> System.Void: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: System.String
    def get_Value(self) -> System.String: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: System.Boolean
    IsLocked: System.Boolean
    IsCollection: System.Boolean
    Source: System.String
    LineNumber: System.Int32
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_IsCollection(self) -> System.Boolean: ...
    def get_Source(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> System.Void: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: System.String) -> System.Void: ...
    def CreateAttribute(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: System.String) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: System.String) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: System.String) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: System.String) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: System.String) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: System.String
    RoamingUserConfigFilename: System.String
    LocalUserConfigFilename: System.String
    def get_ExeConfigFilename(self) -> System.String: ...
    def set_ExeConfigFilename(self, value: System.String) -> System.Void: ...
    def get_RoamingUserConfigFilename(self) -> System.String: ...
    def set_RoamingUserConfigFilename(self, value: System.String) -> System.Void: ...
    def get_LocalUserConfigFilename(self) -> System.String: ...
    def set_LocalUserConfigFilename(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Object: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: System.String
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> System.String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def set_Filename(self, value: System.String) -> System.Void: ...
    def get_LineNumber(self) -> System.Int32: ...
    def set_LineNumber(self, value: System.Int32) -> System.Void: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> System.Void: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.Int32
    MaxValue: System.Int32
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.Int32: ...
    def set_MinValue(self, value: System.Int32) -> System.Void: ...
    def get_MaxValue(self) -> System.Int32: ...
    def set_MaxValue(self, value: System.Int32) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: System.Boolean
    def get_Enabled(self) -> System.Boolean: ...
    def set_Enabled(self, value: System.Boolean) -> System.Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: System.Array[System.String]
    def get_Item(self, key: System.String) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> System.Array[System.String]: ...
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> System.Void: ...
    def Add(self, key: System.String, value: System.String) -> System.Void: ...
    def Remove(self, key: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: System.String
    Value: System.String
    def get_Key(self) -> System.String: ...
    def get_Value(self) -> System.String: ...
    def set_Value(self, value: System.String) -> System.Void: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: System.String, value: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Remove(self, key: System.String) -> System.Void: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: System.String
    def get_ApplicationName(self) -> System.String: ...
    def set_ApplicationName(self, value: System.String) -> System.Void: ...
    def Initialize(self, name: System.String, values: System.Collections.Specialized.NameValueCollection) -> System.Void: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> System.Void: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> System.Void: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Void: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.Int64
    MaxValue: System.Int64
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.Int64: ...
    def set_MinValue(self, value: System.Int64) -> System.Void: ...
    def get_MaxValue(self) -> System.Int64: ...
    def set_MaxValue(self, value: System.Int64) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: System.Array[System.String]
    def get_Item(self, name: System.String) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: System.String, value: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def get_AllKeys(self) -> System.Array[System.String]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: System.String
    Value: System.String
    def get_Name(self) -> System.String: ...
    def get_Value(self) -> System.String: ...
    def set_Value(self, value: System.String) -> System.Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class NameValueSectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: System.String
    Value: System.Object
    DefaultValue: System.Object
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: System.Boolean
    IsKey: System.Boolean
    IsRequired: System.Boolean
    IsLocked: System.Boolean
    Source: System.String
    LineNumber: System.Int32
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: System.String
    def get_Name(self) -> System.String: ...
    def get_Value(self) -> System.Object: ...
    def set_Value(self, value: System.Object) -> System.Void: ...
    def get_DefaultValue(self) -> System.Object: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> System.Boolean: ...
    def get_IsKey(self) -> System.Boolean: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_Source(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> System.String: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: System.String) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: System.Array[System.Configuration.PropertyInformation], index: System.Int32) -> System.Void: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: System.String
    DataProtectionProviderName: System.String
    ProtectedDataSectionName: System.String
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: System.String
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> System.String: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: System.String) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> System.Void: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: System.String
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> System.String: ...
    def set_DefaultProvider(self, value: System.String) -> System.Void: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: System.String
    Type: System.String
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    def get_Item(self, key: System.String) -> System.Configuration.ProviderSettings: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: System.Int32, value: System.Configuration.ProviderSettings) -> System.Void: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> System.String: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: System.String
    CspProviderName: System.String
    UseMachineContainer: System.Boolean
    UseOAEP: System.Boolean
    UseFIPS: System.Boolean
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: System.Int32, exportable: System.Boolean) -> System.Void: ...
    def DeleteKey(self) -> System.Void: ...
    def ImportKey(self, xmlFileName: System.String, exportable: System.Boolean) -> System.Void: ...
    def ExportKey(self, xmlFileName: System.String, includePrivateParameters: System.Boolean) -> System.Void: ...
    def get_KeyContainerName(self) -> System.String: ...
    def get_CspProviderName(self) -> System.String: ...
    def get_UseMachineContainer(self) -> System.Boolean: ...
    def get_UseOAEP(self) -> System.Boolean: ...
    def get_UseFIPS(self) -> System.Boolean: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: System.String
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> System.String: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.SchemeSettingElement: ...
    def get_Item(self, name: System.String) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> System.Int32: ...

class SchemeSettingInternal:
    Name: System.String
    Options: System.GenericUriParserOptions
    def get_Name(self) -> System.String: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: System.String
    Name: System.String
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: System.Boolean
    AllowOverride: System.Boolean
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: System.String
    InheritInChildApplications: System.Boolean
    IsDeclared: System.Boolean
    IsDeclarationRequired: System.Boolean
    IsLocked: System.Boolean
    IsProtected: System.Boolean
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: System.Boolean
    RequirePermission: System.Boolean
    Type: System.String
    ForceSave: System.Boolean
    def get_SectionName(self) -> System.String: ...
    def get_Name(self) -> System.String: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> System.Void: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> System.Void: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> System.Void: ...
    def get_AllowLocation(self) -> System.Boolean: ...
    def set_AllowLocation(self, value: System.Boolean) -> System.Void: ...
    def get_AllowOverride(self) -> System.Boolean: ...
    def set_AllowOverride(self, value: System.Boolean) -> System.Void: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> System.Void: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> System.String: ...
    def set_ConfigSource(self, value: System.String) -> System.Void: ...
    def get_InheritInChildApplications(self) -> System.Boolean: ...
    def set_InheritInChildApplications(self, value: System.Boolean) -> System.Void: ...
    def get_IsDeclared(self) -> System.Boolean: ...
    def get_IsDeclarationRequired(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_IsProtected(self) -> System.Boolean: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> System.Boolean: ...
    def set_RestartOnExternalChanges(self, value: System.Boolean) -> System.Void: ...
    def get_RequirePermission(self) -> System.Boolean: ...
    def set_RequirePermission(self, value: System.Boolean) -> System.Void: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_ForceSave(self) -> System.Boolean: ...
    def set_ForceSave(self, value: System.Boolean) -> System.Void: ...
    def ForceDeclaration(self) -> System.Void: ...
    def ForceDeclaration(self, force: System.Boolean) -> System.Void: ...
    def ProtectSection(self, protectionProvider: System.String) -> System.Void: ...
    def UnprotectSection(self) -> System.Void: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> System.String: ...
    def SetRawXml(self, rawXml: System.String) -> System.Void: ...
    def RevertToParent(self) -> System.Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def set_LineNumber(self, value: System.Int32) -> System.Void: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: System.Object
    SettingClass: System.String
    SettingName: System.String
    SettingKey: System.String
    def get_NewValue(self) -> System.Object: ...
    def get_SettingClass(self) -> System.String: ...
    def get_SettingName(self) -> System.String: ...
    def get_SettingKey(self) -> System.String: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.SettingChangingEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: System.String
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> System.Void: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> System.Void: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: System.String) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> System.Void: ...
    def Remove(self, element: System.Configuration.SettingElement) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: System.Object
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: System.Boolean
    def get_Item(self, propertyName: System.String) -> System.Object: ...
    def set_Item(self, propertyName: System.String, value: System.Object) -> System.Void: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> System.Void: ...
    def Save(self) -> System.Void: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> System.Boolean: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: System.String
    def get_Description(self) -> System.String: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: System.String
    def get_Description(self) -> System.String: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: System.String
    def get_GroupName(self) -> System.String: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.SettingsLoadedEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def Add(self, property: System.Configuration.SettingsProperty) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> System.Object: ...
    def SetReadOnly(self) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def CopyTo(self, array: System.Array, index: System.Int32) -> System.Void: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> System.Object: ...
    def SetReadOnly(self) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def CopyTo(self, array: System.Array, index: System.Int32) -> System.Void: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: System.String
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> System.Void: ...
    def get_ApplicationName(self) -> System.String: ...
    def set_ApplicationName(self, value: System.String) -> System.Void: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: System.String
    def get_ProviderTypeName(self) -> System.String: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.ComponentModel.CancelEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> System.Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: System.Boolean
    IsReadOnly: System.Boolean
    Item: System.String
    def get_IsModified(self) -> System.Boolean: ...
    def get_IsReadOnly(self) -> System.Boolean: ...
    def get_Item(self, index: System.Int32) -> System.String: ...
    def set_Item(self, index: System.Int32, value: System.String) -> System.Void: ...
    def SetReadOnly(self) -> System.Void: ...
    def Add(self, value: System.String) -> System.Void: ...
    def AddRange(self, range: System.Array[System.String]) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Insert(self, index: System.Int32, value: System.String) -> System.Void: ...
    def Remove(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: System.Int32
    MaxLength: System.Int32
    InvalidCharacters: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> System.Int32: ...
    def set_MinLength(self, value: System.Int32) -> System.Void: ...
    def get_MaxLength(self) -> System.Int32: ...
    def set_MaxLength(self, value: System.Int32) -> System.Void: ...
    def get_InvalidCharacters(self) -> System.String: ...
    def set_InvalidCharacters(self, value: System.String) -> System.Void: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: System.String
    TimeSpanMaxValue: System.String
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: System.String
    MaxValueString: System.String
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> System.String: ...
    def set_MinValueString(self, value: System.String) -> System.Void: ...
    def get_MaxValueString(self) -> System.String: ...
    def set_MaxValueString(self, value: System.String) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: System.Object) -> System.Void: ...
    def BeginInvoke(self, value: System.Object, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: System.Object, allowedType: System.Type) -> System.Void: ...
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: System.Boolean) -> System.Void: ...
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: System.Int64, exclusiveRange: System.Boolean) -> System.Void: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class XmlUtil:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def Dispose(self) -> System.Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: System.String
    IsReadOnly: System.Boolean
    DefaultValue: System.Object
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: System.Boolean
    ThrowOnErrorSerializing: System.Boolean
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_IsReadOnly(self) -> System.Boolean: ...
    def set_IsReadOnly(self, value: System.Boolean) -> System.Void: ...
    def get_DefaultValue(self) -> System.Object: ...
    def set_DefaultValue(self, value: System.Object) -> System.Void: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> System.Void: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> System.Void: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> System.Void: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> System.Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: System.Boolean) -> System.Void: ...
    def get_ThrowOnErrorSerializing(self) -> System.Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: System.Boolean) -> System.Void: ...

class SettingsPropertyValue:
    Name: System.String
    IsDirty: System.Boolean
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: System.Boolean
    Deserialized: System.Boolean
    PropertyValue: System.Object
    SerializedValue: System.Object
    def get_Name(self) -> System.String: ...
    def get_IsDirty(self) -> System.Boolean: ...
    def set_IsDirty(self, value: System.Boolean) -> System.Void: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> System.Boolean: ...
    def get_Deserialized(self) -> System.Boolean: ...
    def set_Deserialized(self, value: System.Boolean) -> System.Void: ...
    def get_PropertyValue(self) -> System.Object: ...
    def set_PropertyValue(self, value: System.Object) -> System.Void: ...
    def get_SerializedValue(self) -> System.Object: ...
    def set_SerializedValue(self, value: System.Object) -> System.Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> System.Boolean: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: System.Object) -> System.Object: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> System.Int32: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: System.Array[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: System.Array[System.Object]) -> System.Void: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[System.String]

class <>c__DisplayClass6_0:
    value: System.String

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: System.Boolean
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> System.Boolean: ...
    def Initialize(self, name: System.String, configurationValues: System.Collections.Specialized.NameValueCollection) -> System.Void: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: System.String) -> System.Object: ...
    def Init(self) -> System.Void: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> System.Void: ...

class IPersistComponentSettings:
    SaveSettings: System.Boolean
    SettingsKey: System.String
    def get_SaveSettings(self) -> System.Boolean: ...
    def set_SaveSettings(self, value: System.Boolean) -> System.Void: ...
    def get_SettingsKey(self) -> System.String: ...
    def set_SettingsKey(self, value: System.String) -> System.Void: ...
    def LoadComponentSettings(self) -> System.Void: ...
    def SaveComponentSettings(self) -> System.Void: ...
    def ResetComponentSettings(self) -> System.Void: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: System.String
    Item: System.Object
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> System.String: ...
    def set_SettingsKey(self, value: System.String) -> System.Void: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> System.Void: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> System.Void: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> System.Void: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> System.Void: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> System.Void: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> System.Void: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> System.Void: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> System.Void: ...
    def GetPreviousVersion(self, propertyName: System.String) -> System.Object: ...
    def Reload(self) -> System.Void: ...
    def Reset(self) -> System.Void: ...
    def Save(self) -> System.Void: ...
    def get_Item(self, propertyName: System.String) -> System.Object: ...
    def set_Item(self, propertyName: System.String, value: System.Object) -> System.Void: ...
    def Upgrade(self) -> System.Void: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: System.String, type: System.Type) -> System.Object: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: System.String
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> System.String: ...
    def set_File(self, value: System.String) -> System.Void: ...

class BaseConfigurationRecord:
    ConfigPath: System.String
    StreamName: System.String
    HasInitErrors: System.Boolean
    def get_ConfigPath(self) -> System.String: ...
    def get_StreamName(self) -> System.String: ...
    def get_HasInitErrors(self) -> System.Boolean: ...
    def ThrowIfInitErrors(self) -> System.Void: ...
    def GetSection(self, configKey: System.String) -> System.Object: ...
    def GetLkgSection(self, configKey: System.String) -> System.Object: ...
    def RefreshSection(self, configKey: System.String) -> System.Void: ...
    def Remove(self) -> System.Void: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> System.Void: ...
    def get_CallbackMethodName(self) -> System.String: ...
    def set_CallbackMethodName(self, value: System.String) -> System.Void: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: System.Boolean
    HasLocalConfig: System.Boolean
    IsAppConfigHttp: System.Boolean
    SupportsRefresh: System.Boolean
    SupportsPath: System.Boolean
    SupportsLocation: System.Boolean
    def get_HasRoamingConfig(self) -> System.Boolean: ...
    def get_HasLocalConfig(self) -> System.Boolean: ...
    def get_IsAppConfigHttp(self) -> System.Boolean: ...
    def get_SupportsRefresh(self) -> System.Boolean: ...
    def get_SupportsPath(self) -> System.Boolean: ...
    def get_SupportsLocation(self) -> System.Boolean: ...
    def RefreshConfigPaths(self) -> System.Void: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[System.Object]) -> System.Void: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> System.Boolean: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def GetStreamNameForConfigSource(self, streamName: System.String, configSource: System.String) -> System.String: ...
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> System.Boolean: ...
    def VerifyDefinitionAllowed(self, configPath: System.String, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> System.Void: ...
    def PrefetchAll(self, configPath: System.String, streamName: System.String) -> System.Boolean: ...
    def PrefetchSection(self, sectionGroupName: System.String, sectionName: System.String) -> System.Boolean: ...
    def CreateDeprecatedConfigContext(self, configPath: System.String) -> System.Object: ...
    def CreateConfigurationContext(self, configPath: System.String, locationSubPath: System.String) -> System.Object: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: System.String
    HasFile: System.Boolean
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: System.Boolean
    TypeStringTransformer: dict[System.String, System.String]
    AssemblyStringTransformer: dict[System.String, System.String]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> System.String: ...
    def get_HasFile(self) -> System.Boolean: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> System.Boolean: ...
    def set_NamespaceDeclared(self, value: System.Boolean) -> System.Void: ...
    def get_TypeStringTransformer(self) -> dict[System.String, System.String]: ...
    def set_TypeStringTransformer(self, value: dict[System.String, System.String]) -> System.Void: ...
    def get_AssemblyStringTransformer(self) -> dict[System.String, System.String]: ...
    def set_AssemblyStringTransformer(self, value: dict[System.String, System.String]) -> System.Void: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> System.Void: ...
    def GetSection(self, sectionName: System.String) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def Save(self) -> System.Void: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> System.Void: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: System.Boolean) -> System.Void: ...
    def SaveAs(self, filename: System.String) -> System.Void: ...
    def SaveAs(self, filename: System.String, saveMode: System.Configuration.ConfigurationSaveMode) -> System.Void: ...
    def SaveAs(self, filename: System.String, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: System.Boolean) -> System.Void: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: System.String
    RemoveItemName: System.String
    ClearItemsName: System.String
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> System.String: ...
    def set_AddItemName(self, value: System.String) -> System.Void: ...
    def get_RemoveItemName(self) -> System.String: ...
    def set_RemoveItemName(self, value: System.String) -> System.Void: ...
    def get_ClearItemsName(self) -> System.String: ...
    def set_ClearItemsName(self, value: System.String) -> System.Void: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> System.Void: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> System.Boolean: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> System.Boolean: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: System.Boolean
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> System.Boolean: ...
    def set_LockItem(self, value: System.Boolean) -> System.Void: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> System.Boolean: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: System.Boolean
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_EmitClear(self) -> System.Boolean: ...
    def set_EmitClear(self, value: System.Boolean) -> System.Void: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> System.Boolean: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: System.Int32) -> System.Void: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: System.String
    Filename: System.String
    Line: System.Int32
    Errors: System.Collections.ICollection
    def get_Message(self) -> System.String: ...
    def get_Filename(self) -> System.String: ...
    def get_Line(self) -> System.Int32: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> System.Void: ...
    def GetLineNumber(self, node: System.Xml.XmlNode) -> System.Int32: ...
    def GetFilename(self, node: System.Xml.XmlNode) -> System.String: ...
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> System.Int32: ...
    def GetFilename(self, reader: System.Xml.XmlReader) -> System.String: ...

class ConfigurationException(System.SystemException):
    Message: System.String
    BareMessage: System.String
    Filename: System.String
    Line: System.Int32
    def get_Message(self) -> System.String: ...
    def get_BareMessage(self) -> System.String: ...
    def get_Filename(self) -> System.String: ...
    def get_Line(self) -> System.Int32: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> System.Void: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> System.String: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> System.Int32: ...

class ConfigurationFileMap:
    MachineConfigFilename: System.String
    def get_MachineConfigFilename(self) -> System.String: ...
    def set_MachineConfigFilename(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Object: ...

class ConfigurationLocation:
    Path: System.String
    def get_Path(self) -> System.String: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: System.Boolean
    AttributeList: System.String
    HasParentElements: System.Boolean
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_IsModified(self) -> System.Boolean: ...
    def get_AttributeList(self) -> System.String: ...
    def get_HasParentElements(self) -> System.Boolean: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: System.String) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Contains(self, name: System.String) -> System.Boolean: ...
    def CopyTo(self, array: list[System.String], index: System.Int32) -> System.Void: ...
    def IsReadOnly(self, name: System.String) -> System.Boolean: ...
    def SetFromList(self, attributeList: System.String) -> System.Void: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: System.String) -> System.Object: ...
    def RefreshSection(self, sectionName: System.String) -> System.Void: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, exePath: System.String) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: System.Boolean) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: System.String
    Description: System.String
    Type: System.Type
    DefaultValue: System.Object
    IsRequired: System.Boolean
    IsKey: System.Boolean
    IsDefaultCollection: System.Boolean
    IsTypeStringTransformationRequired: System.Boolean
    IsAssemblyStringTransformationRequired: System.Boolean
    IsVersionCheckRequired: System.Boolean
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> System.String: ...
    def get_Description(self) -> System.String: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> System.Object: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def get_IsKey(self) -> System.Boolean: ...
    def get_IsDefaultCollection(self) -> System.Boolean: ...
    def get_IsTypeStringTransformationRequired(self) -> System.Boolean: ...
    def get_IsAssemblyStringTransformationRequired(self) -> System.Boolean: ...
    def get_IsVersionCheckRequired(self) -> System.Boolean: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: System.String
    DefaultValue: System.Object
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: System.Boolean
    IsRequired: System.Boolean
    IsKey: System.Boolean
    def get_Name(self) -> System.String: ...
    def get_DefaultValue(self) -> System.Object: ...
    def set_DefaultValue(self, value: System.Object) -> System.Void: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> System.Void: ...
    def get_IsDefaultCollection(self) -> System.Boolean: ...
    def set_IsDefaultCollection(self, value: System.Boolean) -> System.Void: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def set_IsRequired(self, value: System.Boolean) -> System.Void: ...
    def get_IsKey(self) -> System.Boolean: ...
    def set_IsKey(self, value: System.Boolean) -> System.Void: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: System.Int32) -> System.Void: ...
    def Contains(self, name: System.String) -> System.Boolean: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Boolean: ...
    def Clear(self) -> System.Void: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationSection: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: System.String, section: System.Configuration.ConfigurationSection) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: System.Int32) -> System.Void: ...
    def Get(self, index: System.Int32) -> System.Configuration.ConfigurationSection: ...
    def Get(self, name: System.String) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: System.Int32) -> System.String: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...

class ConfigurationSectionGroup:
    IsDeclared: System.Boolean
    IsDeclarationRequired: System.Boolean
    SectionGroupName: System.String
    Name: System.String
    Type: System.String
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> System.Boolean: ...
    def get_IsDeclarationRequired(self) -> System.Boolean: ...
    def get_SectionGroupName(self) -> System.String: ...
    def get_Name(self) -> System.String: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> System.Void: ...
    def ForceDeclaration(self, force: System.Boolean) -> System.Void: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    def get_Item(self, name: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: System.String, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: System.Int32) -> System.Void: ...
    def Get(self, index: System.Int32) -> System.Configuration.ConfigurationSectionGroup: ...
    def Get(self, name: System.String) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: System.Int32) -> System.String: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: System.String) -> System.Object: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: System.Int32
    Filename: System.String
    def get_LineNumber(self) -> System.Int32: ...
    def get_Filename(self) -> System.String: ...
    def Load(self, filename: System.String) -> System.Void: ...
    def LoadSingleElement(self, filename: System.String, sourceReader: System.Xml.XmlTextReader) -> System.Void: ...
    def CreateAttribute(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: System.String) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: System.String) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: System.String) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: System.String) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: System.String) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: System.Boolean) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: System.String
    ConnectionString: System.String
    ProviderName: System.String
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_ConnectionString(self) -> System.String: ...
    def set_ConnectionString(self, value: System.String) -> System.Void: ...
    def get_ProviderName(self) -> System.String: ...
    def set_ProviderName(self, value: System.String) -> System.Void: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    def get_Item(self, index: System.Int32) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: System.Int32, value: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.ConnectionStringSettings: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> System.Int32: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> System.Void: ...
    def RemoveAt(self, index: System.Int32) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: System.Object
    IsMachineLevel: System.Boolean
    def get_HostingContext(self) -> System.Object: ...
    def get_IsMachineLevel(self) -> System.Boolean: ...
    def GetSection(self, sectionName: System.String) -> System.Object: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[System.Object]
    def get_Item(self, index: System.Int32) -> System.DateTime: ...
    def set_Item(self, index: System.Int32, value: System.DateTime) -> System.Void: ...
    def get_AllKeys(self) -> list[System.Object]: ...
    def Add(self, dateTime: System.DateTime) -> System.Void: ...
    def Remove(self, dateTime: System.DateTime) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> System.Void: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: System.String
    def get_Value(self) -> System.String: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: System.Boolean
    IsLocked: System.Boolean
    IsCollection: System.Boolean
    Source: System.String
    LineNumber: System.Int32
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_IsCollection(self) -> System.Boolean: ...
    def get_Source(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> System.Void: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: System.String) -> System.Void: ...
    def CreateAttribute(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: System.String, localName: System.String, namespaceUri: System.String) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: System.String) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: System.String) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: System.String) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: System.String) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: System.String) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: System.String
    RoamingUserConfigFilename: System.String
    LocalUserConfigFilename: System.String
    def get_ExeConfigFilename(self) -> System.String: ...
    def set_ExeConfigFilename(self, value: System.String) -> System.Void: ...
    def get_RoamingUserConfigFilename(self) -> System.String: ...
    def set_RoamingUserConfigFilename(self, value: System.String) -> System.Void: ...
    def get_LocalUserConfigFilename(self) -> System.String: ...
    def set_LocalUserConfigFilename(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Object: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: System.String
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> System.String: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def set_Filename(self, value: System.String) -> System.Void: ...
    def get_LineNumber(self) -> System.Int32: ...
    def set_LineNumber(self, value: System.Int32) -> System.Void: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> System.Void: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Void: ...

class IConfigurationSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[System.Object]) -> System.Void: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[System.Object]) -> System.Void: ...
    def GetStreamName(self, configPath: System.String) -> System.String: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.Int32
    MaxValue: System.Int32
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.Int32: ...
    def set_MinValue(self, value: System.Int32) -> System.Void: ...
    def get_MaxValue(self) -> System.Int32: ...
    def set_MaxValue(self, value: System.Int32) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: System.Boolean
    def get_Enabled(self) -> System.Boolean: ...
    def set_Enabled(self, value: System.Boolean) -> System.Void: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[System.String]
    def get_Item(self, key: System.String) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[System.String]: ...
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> System.Void: ...
    def Add(self, key: System.String, value: System.String) -> System.Void: ...
    def Remove(self, key: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: System.String
    Value: System.String
    def get_Key(self) -> System.String: ...
    def get_Value(self) -> System.String: ...
    def set_Value(self, value: System.String) -> System.Void: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: System.String, value: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Remove(self, key: System.String) -> System.Void: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: System.String
    def get_ApplicationName(self) -> System.String: ...
    def set_ApplicationName(self, value: System.String) -> System.Void: ...
    def Initialize(self, name: System.String, values: System.Collections.Specialized.NameValueCollection) -> System.Void: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> System.Void: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> System.Void: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Void: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.Int64
    MaxValue: System.Int64
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.Int64: ...
    def set_MinValue(self, value: System.Int64) -> System.Void: ...
    def get_MaxValue(self) -> System.Int64: ...
    def set_MaxValue(self, value: System.Int64) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[System.String]
    def get_Item(self, name: System.String) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: System.String, value: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def get_AllKeys(self) -> list[System.String]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: System.String
    Value: System.String
    def get_Name(self) -> System.String: ...
    def get_Value(self) -> System.String: ...
    def set_Value(self, value: System.String) -> System.Void: ...

class NameValueFileSectionHandler:
    def Create(self, parent: System.Object, configContext: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class NameValueSectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: System.String
    Value: System.Object
    DefaultValue: System.Object
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: System.Boolean
    IsKey: System.Boolean
    IsRequired: System.Boolean
    IsLocked: System.Boolean
    Source: System.String
    LineNumber: System.Int32
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: System.String
    def get_Name(self) -> System.String: ...
    def get_Value(self) -> System.Object: ...
    def set_Value(self, value: System.Object) -> System.Void: ...
    def get_DefaultValue(self) -> System.Object: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> System.Boolean: ...
    def get_IsKey(self) -> System.Boolean: ...
    def get_IsRequired(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_Source(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> System.String: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: System.String) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: System.Int32) -> System.Void: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: System.String
    DataProtectionProviderName: System.String
    ProtectedDataSectionName: System.String
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: System.String
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> System.String: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: System.String) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> System.Void: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: System.String
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> System.String: ...
    def set_DefaultProvider(self, value: System.String) -> System.Void: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: System.String
    Type: System.String
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    def get_Item(self, key: System.String) -> System.Configuration.ProviderSettings: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: System.Int32, value: System.Configuration.ProviderSettings) -> System.Void: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> System.String: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: System.String
    CspProviderName: System.String
    UseMachineContainer: System.Boolean
    UseOAEP: System.Boolean
    UseFIPS: System.Boolean
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: System.Int32, exportable: System.Boolean) -> System.Void: ...
    def DeleteKey(self) -> System.Void: ...
    def ImportKey(self, xmlFileName: System.String, exportable: System.Boolean) -> System.Void: ...
    def ExportKey(self, xmlFileName: System.String, includePrivateParameters: System.Boolean) -> System.Void: ...
    def get_KeyContainerName(self) -> System.String: ...
    def get_CspProviderName(self) -> System.String: ...
    def get_UseMachineContainer(self) -> System.Boolean: ...
    def get_UseOAEP(self) -> System.Boolean: ...
    def get_UseFIPS(self) -> System.Boolean: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: System.String
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> System.String: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Item(self, index: System.Int32) -> System.Configuration.SchemeSettingElement: ...
    def get_Item(self, name: System.String) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> System.Int32: ...

class SchemeSettingInternal:
    Name: System.String
    Options: System.GenericUriParserOptions
    def get_Name(self) -> System.String: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: System.String
    Name: System.String
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: System.Boolean
    AllowOverride: System.Boolean
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: System.String
    InheritInChildApplications: System.Boolean
    IsDeclared: System.Boolean
    IsDeclarationRequired: System.Boolean
    IsLocked: System.Boolean
    IsProtected: System.Boolean
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: System.Boolean
    RequirePermission: System.Boolean
    Type: System.String
    ForceSave: System.Boolean
    def get_SectionName(self) -> System.String: ...
    def get_Name(self) -> System.String: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> System.Void: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> System.Void: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> System.Void: ...
    def get_AllowLocation(self) -> System.Boolean: ...
    def set_AllowLocation(self, value: System.Boolean) -> System.Void: ...
    def get_AllowOverride(self) -> System.Boolean: ...
    def set_AllowOverride(self, value: System.Boolean) -> System.Void: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> System.Void: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> System.String: ...
    def set_ConfigSource(self, value: System.String) -> System.Void: ...
    def get_InheritInChildApplications(self) -> System.Boolean: ...
    def set_InheritInChildApplications(self, value: System.Boolean) -> System.Void: ...
    def get_IsDeclared(self) -> System.Boolean: ...
    def get_IsDeclarationRequired(self) -> System.Boolean: ...
    def get_IsLocked(self) -> System.Boolean: ...
    def get_IsProtected(self) -> System.Boolean: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> System.Boolean: ...
    def set_RestartOnExternalChanges(self, value: System.Boolean) -> System.Void: ...
    def get_RequirePermission(self) -> System.Boolean: ...
    def set_RequirePermission(self, value: System.Boolean) -> System.Void: ...
    def get_Type(self) -> System.String: ...
    def set_Type(self, value: System.String) -> System.Void: ...
    def get_ForceSave(self) -> System.Boolean: ...
    def set_ForceSave(self, value: System.Boolean) -> System.Void: ...
    def ForceDeclaration(self) -> System.Void: ...
    def ForceDeclaration(self, force: System.Boolean) -> System.Void: ...
    def ProtectSection(self, protectionProvider: System.String) -> System.Void: ...
    def UnprotectSection(self) -> System.Void: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> System.String: ...
    def SetRawXml(self, rawXml: System.String) -> System.Void: ...
    def RevertToParent(self) -> System.Void: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def set_LineNumber(self, value: System.Int32) -> System.Void: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: System.Object
    SettingClass: System.String
    SettingName: System.String
    SettingKey: System.String
    def get_NewValue(self) -> System.Object: ...
    def get_SettingClass(self) -> System.String: ...
    def get_SettingName(self) -> System.String: ...
    def get_SettingKey(self) -> System.String: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.SettingChangingEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: System.String
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> System.Void: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> System.Void: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: System.String) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> System.Void: ...
    def Remove(self, element: System.Configuration.SettingElement) -> System.Void: ...
    def Clear(self) -> System.Void: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: System.Object
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: System.Boolean
    def get_Item(self, propertyName: System.String) -> System.Object: ...
    def set_Item(self, propertyName: System.String, value: System.Object) -> System.Void: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> System.Void: ...
    def Save(self) -> System.Void: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> System.Boolean: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: System.String
    def get_Description(self) -> System.String: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: System.String
    def get_Description(self) -> System.String: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: System.String
    def get_GroupName(self) -> System.String: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.Configuration.SettingsLoadedEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def Add(self, property: System.Configuration.SettingsProperty) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> System.Object: ...
    def SetReadOnly(self) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def CopyTo(self, array: System.Array, index: System.Int32) -> System.Void: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: System.Int32
    IsSynchronized: System.Boolean
    SyncRoot: System.Object
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> System.Void: ...
    def Remove(self, name: System.String) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> System.Object: ...
    def SetReadOnly(self) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def get_Count(self) -> System.Int32: ...
    def get_IsSynchronized(self) -> System.Boolean: ...
    def get_SyncRoot(self) -> System.Object: ...
    def CopyTo(self, array: System.Array, index: System.Int32) -> System.Void: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: System.String
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> System.Void: ...
    def get_ApplicationName(self) -> System.String: ...
    def set_ApplicationName(self, value: System.String) -> System.Void: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: System.String
    def get_ProviderTypeName(self) -> System.String: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> System.Void: ...
    def get_Item(self, name: System.String) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: System.Object, e: System.ComponentModel.CancelEventArgs) -> System.Void: ...
    def BeginInvoke(self, sender: System.Object, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> System.Void: ...

class SingleTagSectionHandler:
    def Create(self, parent: System.Object, context: System.Object, section: System.Xml.XmlNode) -> System.Object: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: System.Boolean
    IsReadOnly: System.Boolean
    Item: System.String
    def get_IsModified(self) -> System.Boolean: ...
    def get_IsReadOnly(self) -> System.Boolean: ...
    def get_Item(self, index: System.Int32) -> System.String: ...
    def set_Item(self, index: System.Int32, value: System.String) -> System.Void: ...
    def SetReadOnly(self) -> System.Void: ...
    def Add(self, value: System.String) -> System.Void: ...
    def AddRange(self, range: list[System.String]) -> System.Void: ...
    def Clear(self) -> System.Void: ...
    def Insert(self, index: System.Int32, value: System.String) -> System.Void: ...
    def Remove(self, value: System.String) -> System.Void: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: System.Int32
    MaxLength: System.Int32
    InvalidCharacters: System.String
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> System.Int32: ...
    def set_MinLength(self, value: System.Int32) -> System.Void: ...
    def get_MaxLength(self) -> System.Int32: ...
    def set_MaxLength(self, value: System.Int32) -> System.Void: ...
    def get_InvalidCharacters(self) -> System.String: ...
    def set_InvalidCharacters(self, value: System.String) -> System.Void: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> System.Boolean: ...
    def Validate(self, value: System.Object) -> System.Void: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: System.String
    TimeSpanMaxValue: System.String
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: System.String
    MaxValueString: System.String
    ExcludeRange: System.Boolean
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> System.String: ...
    def set_MinValueString(self, value: System.String) -> System.Void: ...
    def get_MaxValueString(self) -> System.String: ...
    def set_MaxValueString(self, value: System.String) -> System.Void: ...
    def get_ExcludeRange(self) -> System.Boolean: ...
    def set_ExcludeRange(self, value: System.Boolean) -> System.Void: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: System.String) -> System.Object: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...
    def IsConfigRecordRequired(self, configPath: System.String) -> System.Boolean: ...
    def DeleteStream(self, streamName: System.String) -> System.Void: ...
    def IsFile(self, streamName: System.String) -> System.Boolean: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: System.Object) -> System.Void: ...
    def BeginInvoke(self, value: System.Object, callback: System.AsyncCallback, object: System.Object) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> System.Void: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: System.Object, allowedType: System.Type) -> System.Void: ...
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: System.Boolean) -> System.Void: ...
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: System.Int64, exclusiveRange: System.Boolean) -> System.Void: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: System.Object, type: System.Type) -> System.Object: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: System.Object) -> System.Object: ...

class XmlUtil:
    Filename: System.String
    LineNumber: System.Int32
    def get_Filename(self) -> System.String: ...
    def get_LineNumber(self) -> System.Int32: ...
    def Dispose(self) -> System.Void: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: System.String
    IsReadOnly: System.Boolean
    DefaultValue: System.Object
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: System.Boolean
    ThrowOnErrorSerializing: System.Boolean
    def get_Name(self) -> System.String: ...
    def set_Name(self, value: System.String) -> System.Void: ...
    def get_IsReadOnly(self) -> System.Boolean: ...
    def set_IsReadOnly(self, value: System.Boolean) -> System.Void: ...
    def get_DefaultValue(self) -> System.Object: ...
    def set_DefaultValue(self, value: System.Object) -> System.Void: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> System.Void: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> System.Void: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> System.Void: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> System.Boolean: ...
    def set_ThrowOnErrorDeserializing(self, value: System.Boolean) -> System.Void: ...
    def get_ThrowOnErrorSerializing(self) -> System.Boolean: ...
    def set_ThrowOnErrorSerializing(self, value: System.Boolean) -> System.Void: ...

class SettingsPropertyValue:
    Name: System.String
    IsDirty: System.Boolean
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: System.Boolean
    Deserialized: System.Boolean
    PropertyValue: System.Object
    SerializedValue: System.Object
    def get_Name(self) -> System.String: ...
    def get_IsDirty(self) -> System.Boolean: ...
    def set_IsDirty(self, value: System.Boolean) -> System.Void: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> System.Boolean: ...
    def get_Deserialized(self) -> System.Boolean: ...
    def set_Deserialized(self, value: System.Boolean) -> System.Void: ...
    def get_PropertyValue(self) -> System.Object: ...
    def set_PropertyValue(self, value: System.Object) -> System.Void: ...
    def get_SerializedValue(self) -> System.Object: ...
    def set_SerializedValue(self, value: System.Object) -> System.Void: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> System.Boolean: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: System.Object) -> System.Object: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> System.Int32: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[System.Object]) -> System.Void: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[System.Object]) -> System.Void: ...
    def OpenStreamForRead(self, streamName: System.String) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: System.String, templateStreamName: System.String, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: System.String, success: System.Boolean, writeContext: System.Object) -> System.Void: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[System.String]

class <>c__DisplayClass6_0:
    value: System.String

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(self, filename: str) -> None: ...
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetLineNumber(self, node: System.Xml.XmlNode) -> int: ...
    def GetFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> int: ...
    def GetFilename(self, reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: str) -> Any: ...
    def RefreshSection(self, sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, exePath: str) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Any, allowedType: System.Type) -> None: ...
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(self, filename: str) -> None: ...
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetLineNumber(self, node: System.Xml.XmlNode) -> int: ...
    def GetFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> int: ...
    def GetFilename(self, reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: str) -> Any: ...
    def RefreshSection(self, sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, exePath: str) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Any, allowedType: System.Type) -> None: ...
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def Save(self) -> None: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    def SaveAs(self, filename: str) -> None: ...
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetLineNumber(self, node: System.Xml.XmlNode) -> int: ...
    def GetFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> int: ...
    def GetFilename(self, reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: str) -> Any: ...
    def RefreshSection(self, sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenExeConfiguration(self, exePath: str) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    def ForceDeclaration(self) -> None: ...
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Any, allowedType: System.Type) -> None: ...
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @overload
    def Save(self) -> None: ...
    @overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @overload
    def SaveAs(self, filename: str) -> None: ...
    @overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @overload
    def GetLineNumber(self, node: System.Xml.XmlNode) -> int: ...
    @overload
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> int: ...
    @overload
    def GetFilename(self, node: System.Xml.XmlNode) -> str: ...
    @overload
    def GetFilename(self, reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: str) -> Any: ...
    def RefreshSection(self, sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    @overload
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @overload
    def OpenExeConfiguration(self, exePath: str) -> System.Configuration.Configuration: ...
    @overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    @overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    @overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    @overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    @overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    @overload
    def ForceDeclaration(self) -> None: ...
    @overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    @overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    @overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    @overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    @overload
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    @overload
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @overload
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @overload
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    @overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @overload
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    @overload
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    @overload
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @overload
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    @overload
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @overload
    def ForceDeclaration(self) -> None: ...
    @overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Any, allowedType: System.Type) -> None: ...
    @overload
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    @overload
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @typing.overload
    def GetLineNumber(self, node: System.Xml.XmlNode) -> int: ...
    @typing.overload
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> int: ...
    @typing.overload
    def GetFilename(self, node: System.Xml.XmlNode) -> str: ...
    @typing.overload
    def GetFilename(self, reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: str) -> Any: ...
    def RefreshSection(self, sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(self, exePath: str) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(self, settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Any, allowedType: System.Type) -> None: ...
    @typing.overload
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    @typing.overload
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    @staticmethod
    def Create(parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    @staticmethod
    def Decrypt(encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    @staticmethod
    def Encrypt(node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    @staticmethod
    def get_UseMachineProtection(self) -> bool: ...
    @staticmethod
    def Initialize(name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    @staticmethod
    def GetConfig(configKey: str) -> Any: ...
    @staticmethod
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    @staticmethod
    def get_Enabled(self) -> System.UriIdnScope: ...
    @staticmethod
    def set_Enabled(value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    @staticmethod
    def get_SaveSettings(self) -> bool: ...
    @staticmethod
    def set_SaveSettings(value: bool) -> None: ...
    @staticmethod
    def get_SettingsKey(self) -> str: ...
    @staticmethod
    def set_SettingsKey(value: str) -> None: ...
    @staticmethod
    def LoadComponentSettings(self) -> None: ...
    @staticmethod
    def SaveComponentSettings(self) -> None: ...
    @staticmethod
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    @staticmethod
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    @staticmethod
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    @staticmethod
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    @staticmethod
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    @staticmethod
    def get_SettingsKey(self) -> str: ...
    @staticmethod
    def set_SettingsKey(value: str) -> None: ...
    @staticmethod
    def add_PropertyChanged(value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    @staticmethod
    def remove_PropertyChanged(value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    @staticmethod
    def add_SettingChanging(value: System.Configuration.SettingChangingEventHandler) -> None: ...
    @staticmethod
    def remove_SettingChanging(value: System.Configuration.SettingChangingEventHandler) -> None: ...
    @staticmethod
    def add_SettingsLoaded(value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    @staticmethod
    def remove_SettingsLoaded(value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    @staticmethod
    def add_SettingsSaving(value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    @staticmethod
    def remove_SettingsSaving(value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    @staticmethod
    def GetPreviousVersion(propertyName: str) -> Any: ...
    @staticmethod
    def Reload(self) -> None: ...
    @staticmethod
    def Reset(self) -> None: ...
    @staticmethod
    def Save(self) -> None: ...
    @staticmethod
    def get_Item(propertyName: str) -> Any: ...
    @staticmethod
    def set_Item(propertyName: str, value: Any) -> None: ...
    @staticmethod
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    @staticmethod
    def GetValue(key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    @staticmethod
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    @staticmethod
    def get_File(self) -> str: ...
    @staticmethod
    def set_File(value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    @staticmethod
    def get_ConfigPath(self) -> str: ...
    @staticmethod
    def get_StreamName(self) -> str: ...
    @staticmethod
    def get_HasInitErrors(self) -> bool: ...
    @staticmethod
    def ThrowIfInitErrors(self) -> None: ...
    @staticmethod
    def GetSection(configKey: str) -> Any: ...
    @staticmethod
    def GetLkgSection(configKey: str) -> Any: ...
    @staticmethod
    def RefreshSection(configKey: str) -> None: ...
    @staticmethod
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_Type(self) -> System.Type: ...
    @staticmethod
    def set_Type(value: System.Type) -> None: ...
    @staticmethod
    def get_CallbackMethodName(self) -> str: ...
    @staticmethod
    def set_CallbackMethodName(value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    @staticmethod
    def get_HasRoamingConfig(self) -> bool: ...
    @staticmethod
    def get_HasLocalConfig(self) -> bool: ...
    @staticmethod
    def get_IsAppConfigHttp(self) -> bool: ...
    @staticmethod
    def get_SupportsRefresh(self) -> bool: ...
    @staticmethod
    def get_SupportsPath(self) -> bool: ...
    @staticmethod
    def get_SupportsLocation(self) -> bool: ...
    @staticmethod
    def RefreshConfigPaths(self) -> None: ...
    @staticmethod
    def Init(configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    @staticmethod
    def InitForConfiguration(locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    @staticmethod
    def IsInitDelayed(configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    @staticmethod
    def RequireCompleteInit(record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    @staticmethod
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    @staticmethod
    def GetStreamName(configPath: str) -> str: ...
    @staticmethod
    def GetStreamNameForConfigSource(streamName: str, configSource: str) -> str: ...
    @staticmethod
    def GetStreamVersion(streamName: str) -> Any: ...
    @staticmethod
    def OpenStreamForRead(streamName: str) -> System.IO.Stream: ...
    @staticmethod
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @staticmethod
    def DeleteStream(streamName: str) -> None: ...
    @staticmethod
    def IsDefinitionAllowed(configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    @staticmethod
    def VerifyDefinitionAllowed(configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    @staticmethod
    def PrefetchAll(configPath: str, streamName: str) -> bool: ...
    @staticmethod
    def PrefetchSection(sectionGroupName: str, sectionName: str) -> bool: ...
    @staticmethod
    def CreateDeprecatedConfigContext(configPath: str) -> Any: ...
    @staticmethod
    def CreateConfigurationContext(configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    @staticmethod
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    @staticmethod
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    @staticmethod
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    @staticmethod
    def get_FilePath(self) -> str: ...
    @staticmethod
    def get_HasFile(self) -> bool: ...
    @staticmethod
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    @staticmethod
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    @staticmethod
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    @staticmethod
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    @staticmethod
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    @staticmethod
    def get_NamespaceDeclared(self) -> bool: ...
    @staticmethod
    def set_NamespaceDeclared(value: bool) -> None: ...
    @staticmethod
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    @staticmethod
    def set_TypeStringTransformer(value: dict[str, str]) -> None: ...
    @staticmethod
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    @staticmethod
    def set_AssemblyStringTransformer(value: dict[str, str]) -> None: ...
    @staticmethod
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    @staticmethod
    def set_TargetFramework(value: System.Runtime.Versioning.FrameworkName) -> None: ...
    @staticmethod
    def GetSection(sectionName: str) -> System.Configuration.ConfigurationSection: ...
    @staticmethod
    def GetSectionGroup(sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(filename: str) -> None: ...
    @typing.overload
    def SaveAs(filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    @staticmethod
    def get_ItemType(self) -> System.Type: ...
    @staticmethod
    def get_AddItemName(self) -> str: ...
    @staticmethod
    def set_AddItemName(value: str) -> None: ...
    @staticmethod
    def get_RemoveItemName(self) -> str: ...
    @staticmethod
    def set_RemoveItemName(value: str) -> None: ...
    @staticmethod
    def get_ClearItemsName(self) -> str: ...
    @staticmethod
    def set_ClearItemsName(value: str) -> None: ...
    @staticmethod
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @staticmethod
    def set_CollectionType(value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    @staticmethod
    def CanConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    @staticmethod
    def CanConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    @staticmethod
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    @staticmethod
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    @staticmethod
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    @staticmethod
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    @staticmethod
    def get_LockItem(self) -> bool: ...
    @staticmethod
    def set_LockItem(value: bool) -> None: ...
    @staticmethod
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    @staticmethod
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    @staticmethod
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    @staticmethod
    def get_EmitClear(self) -> bool: ...
    @staticmethod
    def set_EmitClear(value: bool) -> None: ...
    @staticmethod
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @staticmethod
    def get_Count(self) -> int: ...
    @staticmethod
    def get_IsSynchronized(self) -> bool: ...
    @staticmethod
    def get_SyncRoot(self) -> Any: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    @staticmethod
    def IsReadOnly(self) -> bool: ...
    @staticmethod
    def CopyTo(array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    @staticmethod
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    @staticmethod
    def get_Message(self) -> str: ...
    @staticmethod
    def get_Filename(self) -> str: ...
    @staticmethod
    def get_Line(self) -> int: ...
    @staticmethod
    def get_Errors(self) -> System.Collections.ICollection: ...
    @staticmethod
    def GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    @staticmethod
    def get_Message(self) -> str: ...
    @staticmethod
    def get_BareMessage(self) -> str: ...
    @staticmethod
    def get_Filename(self) -> str: ...
    @staticmethod
    def get_Line(self) -> int: ...
    @staticmethod
    def GetObjectData(info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    @staticmethod
    def get_MachineConfigFilename(self) -> str: ...
    @staticmethod
    def set_MachineConfigFilename(value: str) -> None: ...
    @staticmethod
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    @staticmethod
    def get_Path(self) -> str: ...
    @staticmethod
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    @staticmethod
    def get_Item(index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    @staticmethod
    def get_IsModified(self) -> bool: ...
    @staticmethod
    def get_AttributeList(self) -> str: ...
    @staticmethod
    def get_HasParentElements(self) -> bool: ...
    @staticmethod
    def get_Count(self) -> int: ...
    @staticmethod
    def get_IsSynchronized(self) -> bool: ...
    @staticmethod
    def get_SyncRoot(self) -> Any: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    @staticmethod
    def Add(name: str) -> None: ...
    @staticmethod
    def Remove(name: str) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...
    @staticmethod
    def Contains(name: str) -> bool: ...
    @staticmethod
    def CopyTo(array: list[str], index: int) -> None: ...
    @staticmethod
    def IsReadOnly(name: str) -> bool: ...
    @staticmethod
    def SetFromList(attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_Description(self) -> str: ...
    @staticmethod
    def get_Type(self) -> System.Type: ...
    @staticmethod
    def get_DefaultValue(self) -> Any: ...
    @staticmethod
    def get_IsRequired(self) -> bool: ...
    @staticmethod
    def get_IsKey(self) -> bool: ...
    @staticmethod
    def get_IsDefaultCollection(self) -> bool: ...
    @staticmethod
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    @staticmethod
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    @staticmethod
    def get_IsVersionCheckRequired(self) -> bool: ...
    @staticmethod
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    @staticmethod
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_DefaultValue(self) -> Any: ...
    @staticmethod
    def set_DefaultValue(value: Any) -> None: ...
    @staticmethod
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    @staticmethod
    def set_Options(value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    @staticmethod
    def get_IsDefaultCollection(self) -> bool: ...
    @staticmethod
    def set_IsDefaultCollection(value: bool) -> None: ...
    @staticmethod
    def get_IsRequired(self) -> bool: ...
    @staticmethod
    def set_IsRequired(value: bool) -> None: ...
    @staticmethod
    def get_IsKey(self) -> bool: ...
    @staticmethod
    def set_IsKey(value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    @staticmethod
    def get_Item(name: str) -> System.Configuration.ConfigurationProperty: ...
    @staticmethod
    def get_Count(self) -> int: ...
    @staticmethod
    def get_IsSynchronized(self) -> bool: ...
    @staticmethod
    def get_SyncRoot(self) -> Any: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    @staticmethod
    def CopyTo(array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    @staticmethod
    def Contains(name: str) -> bool: ...
    @staticmethod
    def Add(property: System.Configuration.ConfigurationProperty) -> None: ...
    @staticmethod
    def Remove(name: str) -> bool: ...
    @staticmethod
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    @staticmethod
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    @typing.overload
    def get_Item(name: str) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def get_Item(index: int) -> System.Configuration.ConfigurationSection: ...
    @staticmethod
    def Add(name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...
    @staticmethod
    def CopyTo(array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(index: int) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def Get(name: str) -> System.Configuration.ConfigurationSection: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    @staticmethod
    def GetKey(index: int) -> str: ...
    @staticmethod
    def Remove(name: str) -> None: ...
    @staticmethod
    def RemoveAt(index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    @staticmethod
    def get_IsDeclared(self) -> bool: ...
    @staticmethod
    def get_IsDeclarationRequired(self) -> bool: ...
    @staticmethod
    def get_SectionGroupName(self) -> str: ...
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_Type(self) -> str: ...
    @staticmethod
    def set_Type(value: str) -> None: ...
    @staticmethod
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    @staticmethod
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    @typing.overload
    def get_Item(name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    @staticmethod
    def Add(name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...
    @staticmethod
    def CopyTo(array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Get(name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    @staticmethod
    def GetKey(index: int) -> str: ...
    @staticmethod
    def Remove(name: str) -> None: ...
    @staticmethod
    def RemoveAt(index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    @staticmethod
    def CloneNode(deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    @staticmethod
    def CloneNode(deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    @staticmethod
    def CloneNode(deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    @staticmethod
    def get_LineNumber(self) -> int: ...
    @staticmethod
    def get_Filename(self) -> str: ...
    @staticmethod
    def Load(filename: str) -> None: ...
    @staticmethod
    def LoadSingleElement(filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    @staticmethod
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    @staticmethod
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    @staticmethod
    def CreateTextNode(text: str) -> System.Xml.XmlText: ...
    @staticmethod
    def CreateCDataSection(data: str) -> System.Xml.XmlCDataSection: ...
    @staticmethod
    def CreateComment(data: str) -> System.Xml.XmlComment: ...
    @staticmethod
    def CreateSignificantWhitespace(data: str) -> System.Xml.XmlSignificantWhitespace: ...
    @staticmethod
    def CreateWhitespace(data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    @staticmethod
    def CloneNode(deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    @staticmethod
    def CloneNode(deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    @staticmethod
    def CloneNode(deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    @staticmethod
    def CloneNode(deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def set_Name(value: str) -> None: ...
    @staticmethod
    def get_ConnectionString(self) -> str: ...
    @staticmethod
    def set_ConnectionString(value: str) -> None: ...
    @staticmethod
    def get_ProviderName(self) -> str: ...
    @staticmethod
    def set_ProviderName(value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    @typing.overload
    def get_Item(index: int) -> System.Configuration.ConnectionStringSettings: ...
    @typing.overload
    def get_Item(name: str) -> System.Configuration.ConnectionStringSettings: ...
    @staticmethod
    def set_Item(index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    @staticmethod
    def IndexOf(settings: System.Configuration.ConnectionStringSettings) -> int: ...
    @staticmethod
    def Add(settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(name: str) -> None: ...
    @staticmethod
    def RemoveAt(index: int) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    @staticmethod
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    @staticmethod
    def get_HostingContext(self) -> Any: ...
    @staticmethod
    def get_IsMachineLevel(self) -> bool: ...
    @staticmethod
    def GetSection(sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    @staticmethod
    def get_Item(index: int) -> System.DateTime: ...
    @staticmethod
    def set_Item(index: int, value: System.DateTime) -> None: ...
    @staticmethod
    def get_AllKeys(self) -> list[Any]: ...
    @staticmethod
    def Add(dateTime: System.DateTime) -> None: ...
    @staticmethod
    def Remove(dateTime: System.DateTime) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    @staticmethod
    def get_Value(self) -> System.DateTime: ...
    @staticmethod
    def set_Value(value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    @staticmethod
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    @staticmethod
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    @staticmethod
    def get_IsPresent(self) -> bool: ...
    @staticmethod
    def get_IsLocked(self) -> bool: ...
    @staticmethod
    def get_IsCollection(self) -> bool: ...
    @staticmethod
    def get_Source(self) -> str: ...
    @staticmethod
    def get_LineNumber(self) -> int: ...
    @staticmethod
    def get_Type(self) -> System.Type: ...
    @staticmethod
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    @staticmethod
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    @staticmethod
    def Load(filename: str) -> None: ...
    @staticmethod
    def CreateAttribute(prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    @staticmethod
    def CreateElement(prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    @staticmethod
    def CreateTextNode(text: str) -> System.Xml.XmlText: ...
    @staticmethod
    def CreateCDataSection(data: str) -> System.Xml.XmlCDataSection: ...
    @staticmethod
    def CreateComment(data: str) -> System.Xml.XmlComment: ...
    @staticmethod
    def CreateSignificantWhitespace(data: str) -> System.Xml.XmlSignificantWhitespace: ...
    @staticmethod
    def CreateWhitespace(data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    @staticmethod
    def get_ExeConfigFilename(self) -> str: ...
    @staticmethod
    def set_ExeConfigFilename(value: str) -> None: ...
    @staticmethod
    def get_RoamingUserConfigFilename(self) -> str: ...
    @staticmethod
    def set_RoamingUserConfigFilename(value: str) -> None: ...
    @staticmethod
    def get_LocalUserConfigFilename(self) -> str: ...
    @staticmethod
    def set_LocalUserConfigFilename(value: str) -> None: ...
    @staticmethod
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    @staticmethod
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    @staticmethod
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    @staticmethod
    def get_Filename(self) -> str: ...
    @staticmethod
    def set_Filename(value: str) -> None: ...
    @staticmethod
    def get_LineNumber(self) -> int: ...
    @staticmethod
    def set_LineNumber(value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    @staticmethod
    def GetPreviousVersion(context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    @staticmethod
    def Reset(context: System.Configuration.SettingsContext) -> None: ...
    @staticmethod
    def Upgrade(context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    @staticmethod
    def Create(parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    @staticmethod
    def Create(parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    @staticmethod
    def InitForConfiguration(locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    @staticmethod
    def Init(configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    @staticmethod
    def GetStreamName(configPath: str) -> str: ...
    @staticmethod
    def OpenStreamForRead(streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_MinValue(self) -> int: ...
    @staticmethod
    def set_MinValue(value: int) -> None: ...
    @staticmethod
    def get_MaxValue(self) -> int: ...
    @staticmethod
    def set_MaxValue(value: int) -> None: ...
    @staticmethod
    def get_ExcludeRange(self) -> bool: ...
    @staticmethod
    def set_ExcludeRange(value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    @staticmethod
    def get_Enabled(self) -> bool: ...
    @staticmethod
    def set_Enabled(value: bool) -> None: ...

class ISettingsProviderService:
    @staticmethod
    def GetSettingsProvider(property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    @staticmethod
    def get_Item(key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    @staticmethod
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(key: str, value: str) -> None: ...
    @staticmethod
    def Remove(key: str) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    @staticmethod
    def get_Key(self) -> str: ...
    @staticmethod
    def get_Value(self) -> str: ...
    @staticmethod
    def set_Value(value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    @staticmethod
    def Add(key: str, value: str) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...
    @staticmethod
    def Remove(key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    @staticmethod
    def get_ApplicationName(self) -> str: ...
    @staticmethod
    def set_ApplicationName(value: str) -> None: ...
    @staticmethod
    def Initialize(name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    @staticmethod
    def GetPropertyValues(context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    @staticmethod
    def SetPropertyValues(context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    @staticmethod
    def Reset(context: System.Configuration.SettingsContext) -> None: ...
    @staticmethod
    def Upgrade(context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    @staticmethod
    def GetPreviousVersion(context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_MinValue(self) -> int: ...
    @staticmethod
    def set_MinValue(value: int) -> None: ...
    @staticmethod
    def get_MaxValue(self) -> int: ...
    @staticmethod
    def set_MaxValue(value: int) -> None: ...
    @staticmethod
    def get_ExcludeRange(self) -> bool: ...
    @staticmethod
    def set_ExcludeRange(value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    @staticmethod
    def get_Item(name: str) -> System.Configuration.NameValueConfigurationElement: ...
    @staticmethod
    def set_Item(name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    @staticmethod
    def get_AllKeys(self) -> list[str]: ...
    @staticmethod
    def Add(nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(name: str) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_Value(self) -> str: ...
    @staticmethod
    def set_Value(value: str) -> None: ...

class NameValueFileSectionHandler:
    @staticmethod
    def Create(parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    @staticmethod
    def Create(parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_Value(self) -> Any: ...
    @staticmethod
    def set_Value(value: Any) -> None: ...
    @staticmethod
    def get_DefaultValue(self) -> Any: ...
    @staticmethod
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    @staticmethod
    def get_IsModified(self) -> bool: ...
    @staticmethod
    def get_IsKey(self) -> bool: ...
    @staticmethod
    def get_IsRequired(self) -> bool: ...
    @staticmethod
    def get_IsLocked(self) -> bool: ...
    @staticmethod
    def get_Source(self) -> str: ...
    @staticmethod
    def get_LineNumber(self) -> int: ...
    @staticmethod
    def get_Type(self) -> System.Type: ...
    @staticmethod
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    @staticmethod
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    @staticmethod
    def get_Item(propertyName: str) -> System.Configuration.PropertyInformation: ...
    @staticmethod
    def CopyTo(array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    @staticmethod
    def Encrypt(node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    @staticmethod
    def Decrypt(encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    @staticmethod
    def get_Item(name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    @staticmethod
    def Add(provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    @staticmethod
    def get_DefaultProvider(self) -> str: ...
    @staticmethod
    def set_DefaultProvider(value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    @staticmethod
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def set_Name(value: str) -> None: ...
    @staticmethod
    def get_Type(self) -> str: ...
    @staticmethod
    def set_Type(value: str) -> None: ...
    @staticmethod
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    @typing.overload
    def get_Item(key: str) -> System.Configuration.ProviderSettings: ...
    @typing.overload
    def get_Item(index: int) -> System.Configuration.ProviderSettings: ...
    @staticmethod
    def set_Item(index: int, value: System.Configuration.ProviderSettings) -> None: ...
    @staticmethod
    def Add(provider: System.Configuration.ProviderSettings) -> None: ...
    @staticmethod
    def Remove(name: str) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    @staticmethod
    def Decrypt(encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    @staticmethod
    def Encrypt(node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    @staticmethod
    def AddKey(keySize: int, exportable: bool) -> None: ...
    @staticmethod
    def DeleteKey(self) -> None: ...
    @staticmethod
    def ImportKey(xmlFileName: str, exportable: bool) -> None: ...
    @staticmethod
    def ExportKey(xmlFileName: str, includePrivateParameters: bool) -> None: ...
    @staticmethod
    def get_KeyContainerName(self) -> str: ...
    @staticmethod
    def get_CspProviderName(self) -> str: ...
    @staticmethod
    def get_UseMachineContainer(self) -> bool: ...
    @staticmethod
    def get_UseOAEP(self) -> bool: ...
    @staticmethod
    def get_UseFIPS(self) -> bool: ...
    @staticmethod
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    @staticmethod
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(index: int) -> System.Configuration.SchemeSettingElement: ...
    @typing.overload
    def get_Item(name: str) -> System.Configuration.SchemeSettingElement: ...
    @staticmethod
    def IndexOf(element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    @staticmethod
    def get_SectionName(self) -> str: ...
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    @staticmethod
    def set_AllowDefinition(value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    @staticmethod
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    @staticmethod
    def set_AllowExeDefinition(value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    @staticmethod
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    @staticmethod
    def set_OverrideModeDefault(value: System.Configuration.OverrideMode) -> None: ...
    @staticmethod
    def get_AllowLocation(self) -> bool: ...
    @staticmethod
    def set_AllowLocation(value: bool) -> None: ...
    @staticmethod
    def get_AllowOverride(self) -> bool: ...
    @staticmethod
    def set_AllowOverride(value: bool) -> None: ...
    @staticmethod
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    @staticmethod
    def set_OverrideMode(value: System.Configuration.OverrideMode) -> None: ...
    @staticmethod
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    @staticmethod
    def get_ConfigSource(self) -> str: ...
    @staticmethod
    def set_ConfigSource(value: str) -> None: ...
    @staticmethod
    def get_InheritInChildApplications(self) -> bool: ...
    @staticmethod
    def set_InheritInChildApplications(value: bool) -> None: ...
    @staticmethod
    def get_IsDeclared(self) -> bool: ...
    @staticmethod
    def get_IsDeclarationRequired(self) -> bool: ...
    @staticmethod
    def get_IsLocked(self) -> bool: ...
    @staticmethod
    def get_IsProtected(self) -> bool: ...
    @staticmethod
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    @staticmethod
    def get_RestartOnExternalChanges(self) -> bool: ...
    @staticmethod
    def set_RestartOnExternalChanges(value: bool) -> None: ...
    @staticmethod
    def get_RequirePermission(self) -> bool: ...
    @staticmethod
    def set_RequirePermission(value: bool) -> None: ...
    @staticmethod
    def get_Type(self) -> str: ...
    @staticmethod
    def set_Type(value: str) -> None: ...
    @staticmethod
    def get_ForceSave(self) -> bool: ...
    @staticmethod
    def set_ForceSave(value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(force: bool) -> None: ...
    @staticmethod
    def ProtectSection(protectionProvider: str) -> None: ...
    @staticmethod
    def UnprotectSection(self) -> None: ...
    @staticmethod
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    @staticmethod
    def GetRawXml(self) -> str: ...
    @staticmethod
    def SetRawXml(rawXml: str) -> None: ...
    @staticmethod
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    @staticmethod
    def get_Filename(self) -> str: ...
    @staticmethod
    def get_LineNumber(self) -> int: ...
    @staticmethod
    def set_LineNumber(value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    @staticmethod
    def get_NewValue(self) -> Any: ...
    @staticmethod
    def get_SettingClass(self) -> str: ...
    @staticmethod
    def get_SettingName(self) -> str: ...
    @staticmethod
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    @staticmethod
    def Invoke(sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    @staticmethod
    def BeginInvoke(sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    @staticmethod
    def EndInvoke(result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def set_Name(value: str) -> None: ...
    @staticmethod
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    @staticmethod
    def set_SerializeAs(value: System.Configuration.SettingsSerializeAs) -> None: ...
    @staticmethod
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    @staticmethod
    def set_Value(value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    @staticmethod
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @staticmethod
    def Get(elementKey: str) -> System.Configuration.SettingElement: ...
    @staticmethod
    def Add(element: System.Configuration.SettingElement) -> None: ...
    @staticmethod
    def Remove(element: System.Configuration.SettingElement) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    @staticmethod
    def get_Item(propertyName: str) -> Any: ...
    @staticmethod
    def set_Item(propertyName: str, value: Any) -> None: ...
    @staticmethod
    def Initialize(context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    @staticmethod
    def Save(self) -> None: ...
    @staticmethod
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    @staticmethod
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    @staticmethod
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    @staticmethod
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    @staticmethod
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    @staticmethod
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    @staticmethod
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    @staticmethod
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    @staticmethod
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    @staticmethod
    def Invoke(sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    @staticmethod
    def BeginInvoke(sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    @staticmethod
    def EndInvoke(result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    @staticmethod
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    @staticmethod
    def Add(property: System.Configuration.SettingsProperty) -> None: ...
    @staticmethod
    def Remove(name: str) -> None: ...
    @staticmethod
    def get_Item(name: str) -> System.Configuration.SettingsProperty: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    @staticmethod
    def Clone(self) -> Any: ...
    @staticmethod
    def SetReadOnly(self) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...
    @staticmethod
    def get_Count(self) -> int: ...
    @staticmethod
    def get_IsSynchronized(self) -> bool: ...
    @staticmethod
    def get_SyncRoot(self) -> Any: ...
    @staticmethod
    def CopyTo(array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    @staticmethod
    def Add(property: System.Configuration.SettingsPropertyValue) -> None: ...
    @staticmethod
    def Remove(name: str) -> None: ...
    @staticmethod
    def get_Item(name: str) -> System.Configuration.SettingsPropertyValue: ...
    @staticmethod
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    @staticmethod
    def Clone(self) -> Any: ...
    @staticmethod
    def SetReadOnly(self) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...
    @staticmethod
    def get_Count(self) -> int: ...
    @staticmethod
    def get_IsSynchronized(self) -> bool: ...
    @staticmethod
    def get_SyncRoot(self) -> Any: ...
    @staticmethod
    def CopyTo(array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    @staticmethod
    def GetPropertyValues(context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    @staticmethod
    def SetPropertyValues(context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    @staticmethod
    def get_ApplicationName(self) -> str: ...
    @staticmethod
    def set_ApplicationName(value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    @staticmethod
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    @staticmethod
    def Add(provider: System.Configuration.Provider.ProviderBase) -> None: ...
    @staticmethod
    def get_Item(name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    @staticmethod
    def Invoke(sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    @staticmethod
    def BeginInvoke(sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    @staticmethod
    def EndInvoke(result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    @staticmethod
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    @staticmethod
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    @staticmethod
    def set_ValueXml(value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    @staticmethod
    def Create(parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    @staticmethod
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    @staticmethod
    def get_IsModified(self) -> bool: ...
    @staticmethod
    def get_IsReadOnly(self) -> bool: ...
    @staticmethod
    def get_Item(index: int) -> str: ...
    @staticmethod
    def set_Item(index: int, value: str) -> None: ...
    @staticmethod
    def SetReadOnly(self) -> None: ...
    @staticmethod
    def Add(value: str) -> None: ...
    @staticmethod
    def AddRange(range: list[str]) -> None: ...
    @staticmethod
    def Clear(self) -> None: ...
    @staticmethod
    def Insert(index: int, value: str) -> None: ...
    @staticmethod
    def Remove(value: str) -> None: ...
    @staticmethod
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_MinLength(self) -> int: ...
    @staticmethod
    def set_MinLength(value: int) -> None: ...
    @staticmethod
    def get_MaxLength(self) -> int: ...
    @staticmethod
    def set_MaxLength(value: int) -> None: ...
    @staticmethod
    def get_InvalidCharacters(self) -> str: ...
    @staticmethod
    def set_InvalidCharacters(value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    @staticmethod
    def CanValidate(type: System.Type) -> bool: ...
    @staticmethod
    def Validate(value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    @staticmethod
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    @staticmethod
    def get_MinValue(self) -> System.TimeSpan: ...
    @staticmethod
    def get_MaxValue(self) -> System.TimeSpan: ...
    @staticmethod
    def get_MinValueString(self) -> str: ...
    @staticmethod
    def set_MinValueString(value: str) -> None: ...
    @staticmethod
    def get_MaxValueString(self) -> str: ...
    @staticmethod
    def set_MaxValueString(value: str) -> None: ...
    @staticmethod
    def get_ExcludeRange(self) -> bool: ...
    @staticmethod
    def set_ExcludeRange(value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    @staticmethod
    def GetStreamVersion(streamName: str) -> Any: ...
    @staticmethod
    def OpenStreamForRead(streamName: str) -> System.IO.Stream: ...
    @staticmethod
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @staticmethod
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...
    @staticmethod
    def IsConfigRecordRequired(configPath: str) -> bool: ...
    @staticmethod
    def DeleteStream(streamName: str) -> None: ...
    @staticmethod
    def IsFile(streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    @staticmethod
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    @staticmethod
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    @staticmethod
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    @staticmethod
    def Invoke(value: Any) -> None: ...
    @staticmethod
    def BeginInvoke(value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    @staticmethod
    def EndInvoke(result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: Any, allowedType: System.Type) -> None: ...
    @typing.overload
    def ValidateScalar(value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    @staticmethod
    def ConvertTo(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    @staticmethod
    def ConvertFrom(ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    @staticmethod
    def get_Filename(self) -> str: ...
    @staticmethod
    def get_LineNumber(self) -> int: ...
    @staticmethod
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def set_Name(value: str) -> None: ...
    @staticmethod
    def get_IsReadOnly(self) -> bool: ...
    @staticmethod
    def set_IsReadOnly(value: bool) -> None: ...
    @staticmethod
    def get_DefaultValue(self) -> Any: ...
    @staticmethod
    def set_DefaultValue(value: Any) -> None: ...
    @staticmethod
    def get_PropertyType(self) -> System.Type: ...
    @staticmethod
    def set_PropertyType(value: System.Type) -> None: ...
    @staticmethod
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    @staticmethod
    def set_SerializeAs(value: System.Configuration.SettingsSerializeAs) -> None: ...
    @staticmethod
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    @staticmethod
    def set_Provider(value: System.Configuration.SettingsProvider) -> None: ...
    @staticmethod
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    @staticmethod
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    @staticmethod
    def set_ThrowOnErrorDeserializing(value: bool) -> None: ...
    @staticmethod
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    @staticmethod
    def set_ThrowOnErrorSerializing(value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    @staticmethod
    def get_Name(self) -> str: ...
    @staticmethod
    def get_IsDirty(self) -> bool: ...
    @staticmethod
    def set_IsDirty(value: bool) -> None: ...
    @staticmethod
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    @staticmethod
    def get_UsingDefaultValue(self) -> bool: ...
    @staticmethod
    def get_Deserialized(self) -> bool: ...
    @staticmethod
    def set_Deserialized(value: bool) -> None: ...
    @staticmethod
    def get_PropertyValue(self) -> Any: ...
    @staticmethod
    def set_PropertyValue(value: Any) -> None: ...
    @staticmethod
    def get_SerializedValue(self) -> Any: ...
    @staticmethod
    def set_SerializedValue(value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    @staticmethod
    def CanConvertFrom(context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    @staticmethod
    def ConvertFrom(context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    @staticmethod
    def Compare(x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    @staticmethod
    def Init(configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    @staticmethod
    def InitForConfiguration(locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    @staticmethod
    def OpenStreamForRead(streamName: str) -> System.IO.Stream: ...
    @staticmethod
    def OpenStreamForWrite(streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    @staticmethod
    def WriteCompleted(streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @typing.overload
    def GetLineNumber(self, node: System.Xml.XmlNode) -> int: ...
    @typing.overload
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> int: ...
    @typing.overload
    def GetFilename(self, node: System.Xml.XmlNode) -> str: ...
    @typing.overload
    def GetFilename(self, reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: str) -> Any: ...
    def RefreshSection(self, sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(self, exePath: str) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def Synchronized(settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Any, allowedType: System.Type) -> None: ...
    @typing.overload
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    @typing.overload
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @typing.overload
    def GetLineNumber(self, node: System.Xml.XmlNode) -> int: ...
    @typing.overload
    def GetLineNumber(self, reader: System.Xml.XmlReader) -> int: ...
    @typing.overload
    def GetFilename(self, node: System.Xml.XmlNode) -> str: ...
    @typing.overload
    def GetFilename(self, reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def GetXmlNodeFilename(self, node: System.Xml.XmlNode) -> str: ...
    def GetXmlNodeLineNumber(self, node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...
    def GetSection(self, sectionName: str) -> Any: ...
    def RefreshSection(self, sectionName: str) -> None: ...
    def OpenMachineConfiguration(self) -> System.Configuration.Configuration: ...
    def OpenMappedMachineConfiguration(self, fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(self, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenExeConfiguration(self, exePath: str) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @typing.overload
    def OpenMappedExeConfiguration(self, fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    def get_AppSettings(self) -> System.Collections.Specialized.NameValueCollection: ...
    def GetConfig(self, sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    def get_DefaultProvider(self) -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone(self) -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    def HelperParamValidation(self, value: Any, allowedType: System.Type) -> None: ...
    @typing.overload
    def ValidateScalar(self, value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    @typing.overload
    def ValidateScalar(self, value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class DpapiProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> Any: ...
    def Init(self) -> None: ...

class IdnElement(System.Configuration.ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(System.Configuration.SettingsBase):
    Context: System.Configuration.SettingsContext
    Properties: System.Configuration.SettingsPropertyCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Providers: System.Configuration.SettingsProviderCollection
    SettingsKey: str
    Item: Any
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: System.Configuration.SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: System.Configuration.SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: System.Configuration.SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class ApplicationSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> Any: ...

class AppSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> System.Configuration.KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> Any: ...
    def GetLkgSection(self, configKey: str) -> Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class CallbackValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: System.Configuration.ConfigurationAllowDefinition, allowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(System.Configuration.ConfigurationSection):
    Settings: System.Configuration.SettingElementCollection
    def get_Settings(self) -> System.Configuration.SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: System.Configuration.AppSettingsSection
    ConnectionStrings: System.Configuration.ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: System.Configuration.ConfigurationLocationCollection
    EvaluationContext: System.Configuration.ContextInformation
    RootSectionGroup: System.Configuration.ConfigurationSectionGroup
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> System.Configuration.AppSettingsSection: ...
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> System.Configuration.ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> System.Configuration.ContextInformation: ...
    def get_RootSectionGroup(self) -> System.Configuration.ConfigurationSectionGroup: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> System.Configuration.ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: System.Configuration.ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: System.Configuration.ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: System.Configuration.ConfigurationLockCollection
    LockAllAttributesExcept: System.Configuration.ConfigurationLockCollection
    LockElements: System.Configuration.ConfigurationLockCollection
    LockAllElementsExcept: System.Configuration.ConfigurationLockCollection
    LockItem: bool
    ElementInformation: System.Configuration.ElementInformation
    CurrentConfiguration: System.Configuration.Configuration
    def get_LockAttributes(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockElements(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> System.Configuration.ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> System.Configuration.ElementInformation: ...
    def get_CurrentConfiguration(self) -> System.Configuration.Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(System.Configuration.ConfigurationElement):
    EmitClear: bool
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationErrorsException(System.Configuration.ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> System.Configuration.Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: System.Configuration.ConfigurationLocation
    def get_Item(self, index: int) -> System.Configuration.ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> System.Configuration.ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> System.Configuration.Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: System.Configuration.ConfigurationFileMap) -> System.Configuration.Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> System.Configuration.Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel) -> System.Configuration.Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: System.Configuration.ExeConfigurationFileMap, userLevel: System.Configuration.ConfigurationUserLevel, preLoad: bool) -> System.Configuration.Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: System.Configuration.ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: Any
    Options: System.Configuration.ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_Options(self) -> System.Configuration.ConfigurationPropertyOptions: ...
    def set_Options(self, value: System.Configuration.ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: System.Configuration.ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def get_Item(self, name: str) -> System.Configuration.ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: System.Configuration.ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(System.Configuration.ConfigurationElement):
    SectionInformation: System.Configuration.SectionInformation
    def get_SectionInformation(self) -> System.Configuration.SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSection
    Item: System.Configuration.ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSection: ...
    def Add(self, name: str, section: System.Configuration.ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: System.Configuration.ConfigurationSectionCollection
    SectionGroups: System.Configuration.ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> System.Configuration.ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> System.Configuration.ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.ConfigurationSectionGroup
    Item: System.Configuration.ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: System.Configuration.ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[System.Configuration.ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> System.Configuration.ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> System.Configuration.ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(System.Configuration.ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ConnectionStringSettings
    Item: System.Configuration.ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.ConnectionStringSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: System.Configuration.ConnectionStringSettings) -> int: ...
    def Add(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: System.Configuration.ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(System.Configuration.ConfigurationSection):
    ConnectionStrings: System.Configuration.ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> System.Configuration.ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> Any: ...

class DateTimeConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(System.Configuration.ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(System.Configuration.Update):
    pass

class DefaultSection(System.Configuration.ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class DefinitionUpdate(System.Configuration.Update):
    pass

class ElementInformation:
    Properties: System.Configuration.PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> System.Configuration.PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(System.Configuration.ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> Any: ...

class ExeContext:
    UserLevel: System.Configuration.ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> System.Configuration.ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class IgnoreSection(System.Configuration.ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class InfiniteTimeSpanConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class IntegerValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class IntegerValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(System.Configuration.ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsProvider: ...

class KeyValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> System.Configuration.KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: System.Configuration.KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(System.Configuration.ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(System.Configuration.SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, values: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: System.Configuration.SettingsContext) -> None: ...
    def Upgrade(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: System.Configuration.SettingsContext, property: System.Configuration.SettingsProperty) -> System.Configuration.SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class LongValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> System.Configuration.NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: System.Configuration.NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: System.Configuration.NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(System.Configuration.ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: Any, configContext: Any, section: System.Xml.XmlNode) -> Any: ...

class NameValueSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: Any
    DefaultValue: Any
    ValueOrigin: System.Configuration.PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: System.Configuration.ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> Any: ...
    def set_Value(self, value: Any) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def get_ValueOrigin(self) -> System.Configuration.PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: System.Configuration.PropertyInformation
    def get_Item(self, propertyName: str) -> System.Configuration.PropertyInformation: ...
    def CopyTo(self, array: list[System.Configuration.PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: System.Configuration.ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> System.Configuration.ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.ProtectedConfigurationProvider
    def get_Item(self, name: str) -> System.Configuration.ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(System.Configuration.ConfigurationSection):
    Providers: System.Configuration.ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(System.Configuration.ConfigurationElement):
    Providers: System.Configuration.ProviderSettingsCollection
    def get_Providers(self) -> System.Configuration.ProviderSettingsCollection: ...

class ProviderSettings(System.Configuration.ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(System.Configuration.ConfigurationElementCollection):
    Item: System.Configuration.ProviderSettings
    Item: System.Configuration.ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> System.Configuration.ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.ProviderSettings: ...
    def set_Item(self, index: int, value: System.Configuration.ProviderSettings) -> None: ...
    def Add(self, provider: System.Configuration.ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class RegexStringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(System.Configuration.ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(System.Configuration.BaseConfigurationRecord):
    pass

class SchemeSettingElement(System.Configuration.ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    Item: System.Configuration.SchemeSettingElement
    Item: System.Configuration.SchemeSettingElement
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> System.Configuration.SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> System.Configuration.SchemeSettingElement: ...
    def IndexOf(self, element: System.Configuration.SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: System.Configuration.ConfigurationAllowDefinition
    AllowExeDefinition: System.Configuration.ConfigurationAllowExeDefinition
    OverrideModeDefault: System.Configuration.OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: System.Configuration.OverrideMode
    OverrideModeEffective: System.Configuration.OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: System.Configuration.ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> System.Configuration.ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: System.Configuration.ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> System.Configuration.ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: System.Configuration.ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideModeDefault(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> System.Configuration.OverrideMode: ...
    def set_OverrideMode(self, value: System.Configuration.OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> System.Configuration.OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> System.Configuration.ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> System.Configuration.ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingChangingEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(System.Configuration.ConfigurationElement):
    Name: str
    SerializeAs: System.Configuration.SettingsSerializeAs
    Value: System.Configuration.SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Value(self) -> System.Configuration.SettingValueElement: ...
    def set_Value(self, value: System.Configuration.SettingValueElement) -> None: ...

class SettingElementCollection(System.Configuration.ConfigurationElementCollection):
    CollectionType: System.Configuration.ConfigurationElementCollectionType
    def get_CollectionType(self) -> System.Configuration.ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> System.Configuration.SettingElement: ...
    def Add(self, element: System.Configuration.SettingElement) -> None: ...
    def Remove(self, element: System.Configuration.SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: Any
    Properties: System.Configuration.SettingsPropertyCollection
    Providers: System.Configuration.SettingsProviderCollection
    PropertyValues: System.Configuration.SettingsPropertyValueCollection
    Context: System.Configuration.SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> Any: ...
    def set_Item(self, propertyName: str, value: Any) -> None: ...
    def Initialize(self, context: System.Configuration.SettingsContext, properties: System.Configuration.SettingsPropertyCollection, providers: System.Configuration.SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> System.Configuration.SettingsPropertyCollection: ...
    def get_Providers(self) -> System.Configuration.SettingsProviderCollection: ...
    def get_PropertyValues(self) -> System.Configuration.SettingsPropertyValueCollection: ...
    def get_Context(self) -> System.Configuration.SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: System.Configuration.SettingsBase) -> System.Configuration.SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: System.Configuration.SettingsProvider
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.Configuration.SettingsLoadedEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: System.Configuration.SettingsManageability
    def get_Manageability(self) -> System.Configuration.SettingsManageability: ...

class SettingsPropertyCollection:
    Item: System.Configuration.SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: System.Configuration.SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: Any
    def Add(self, property: System.Configuration.SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyCollection) -> System.Configuration.SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: System.Configuration.SettingsContext, collection: System.Configuration.SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: System.Configuration.SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> System.Configuration.SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: System.Configuration.SettingsSerializeAs
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...

class SettingValueElement(System.Configuration.ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: Any, context: Any, section: System.Xml.XmlNode) -> Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: System.Configuration.SpecialSetting
    def get_SpecialSetting(self) -> System.Configuration.SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> System.Configuration.CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class StringValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class SubclassTypeValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanMinutesOrInfiniteConverter(System.Configuration.TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanSecondsOrInfiniteConverter(System.Configuration.TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TimeSpanValidator(System.Configuration.ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: Any) -> None: ...

class TimeSpanValidatorAttribute(System.Configuration.ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: System.Configuration.ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> System.Configuration.ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(System.Configuration.ConfigurationSection):
    Idn: System.Configuration.IdnElement
    IriParsing: System.Configuration.IriParsingElement
    SchemeSettings: System.Configuration.SchemeSettingElementCollection
    def get_Idn(self) -> System.Configuration.IdnElement: ...
    def get_IriParsing(self) -> System.Configuration.IriParsingElement: ...
    def get_SchemeSettings(self) -> System.Configuration.SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(System.Configuration.SettingAttribute):
    pass

class UserSettingsGroup(System.Configuration.ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: Any) -> None: ...
    def BeginInvoke(self, value: Any, callback: System.AsyncCallback, object: Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: None, min: None, max: None, resolution: None, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(System.Configuration.ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: Any, type: System.Type) -> Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: Any) -> Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: Any
    PropertyType: System.Type
    SerializeAs: System.Configuration.SettingsSerializeAs
    Provider: System.Configuration.SettingsProvider
    Attributes: System.Configuration.SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> Any: ...
    def set_DefaultValue(self, value: Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> System.Configuration.SettingsSerializeAs: ...
    def set_SerializeAs(self, value: System.Configuration.SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> System.Configuration.SettingsProvider: ...
    def set_Provider(self, value: System.Configuration.SettingsProvider) -> None: ...
    def get_Attributes(self) -> System.Configuration.SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: System.Configuration.SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: Any
    SerializedValue: Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> System.Configuration.SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> Any: ...
    def set_PropertyValue(self, value: Any) -> None: ...
    def get_SerializedValue(self) -> Any: ...
    def set_SerializedValue(self, value: Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: Any) -> Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: System.Configuration.SectionInput, y: System.Configuration.SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: System.Configuration.ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: System.Configuration.ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: System.Configuration.PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: System.Configuration.ConfigurationValues+InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> typing.Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: typing.Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> typing.Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> typing.Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> typing.Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: typing.Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: typing.Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_Item(self, name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSection: ...
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> typing.Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> ConnectionStringSettings: ...
    def set_Item(self, index: int, value: ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: typing.Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> typing.Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> typing.Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[typing.Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[typing.Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class NameValueSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: typing.Any
    DefaultValue: typing.Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def set_Value(self, value: typing.Any) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: str) -> PropertyInformation: ...
    def CopyTo(self, array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: str) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> ProviderSettings: ...
    def set_Item(self, index: int, value: ProviderSettings) -> None: ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: typing.Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> typing.Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingChangingEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> SettingElement: ...
    def Add(self, element: SettingElement) -> None: ...
    def Remove(self, element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: typing.Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: typing.Any) -> None: ...
    def BeginInvoke(self, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: typing.Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: typing.Any
    PropertyType: System.Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: typing.Any
    SerializedValue: typing.Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> typing.Any: ...
    def set_PropertyValue(self, value: typing.Any) -> None: ...
    def get_SerializedValue(self) -> typing.Any: ...
    def set_SerializedValue(self, value: typing.Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: typing.Any) -> typing.Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> typing.Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: typing.Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> typing.Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> typing.Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(Enum):
    MachineOnly = 0
    MachineToWebRoot = 100
    MachineToApplication = 200
    Everywhere = 300

class ConfigurationAllowExeDefinition(Enum):
    MachineOnly = 0
    MachineToApplication = 100
    MachineToRoamingUser = 200
    MachineToLocalUser = 300

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def CopyTo(self, array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(Enum):
    BasicMap = 0
    AddRemoveClearMap = 1
    BasicMapAlternate = 2
    AddRemoveClearMapAlternate = 3

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(Enum):
    LockedAttributes = 1
    LockedExceptionList = 2
    LockedElements = 3
    LockedElementsExceptionList = 4

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> typing.Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: typing.Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: typing.Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_Item(self, name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(Enum):
    None = 0
    IsDefaultCollection = 1
    IsRequired = 2
    IsKey = 4
    IsTypeStringTransformationRequired = 8
    IsAssemblyStringTransformationRequired = 16
    IsVersionCheckRequired = 32

class ConfigurationSaveMode(Enum):
    Modified = 0
    Minimal = 1
    Full = 2

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSection: ...
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> typing.Any: ...

class ConfigurationUserLevel(Enum):
    None = 0
    PerUserRoaming = 10
    PerUserRoamingAndLocal = 20

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(Enum):
    Default = 0
    Inherited = 1
    Modified = 2
    Locked = 4
    XmlParentInherited = 8

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> ConnectionStringSettings: ...
    def set_Item(self, index: int, value: ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: typing.Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> typing.Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> typing.Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[typing.Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[typing.Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(Enum):
    NonSpecific = 0
    Local = 1
    Global = 2

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(Enum):
    None = 0
    Add = 1
    Remove = 2

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class NameValueSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class OverrideMode(Enum):
    Inherit = 0
    Allow = 1
    Deny = 2

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: typing.Any
    DefaultValue: typing.Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def set_Value(self, value: typing.Any) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: str) -> PropertyInformation: ...
    def CopyTo(self, array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(Enum):
    Default = 0
    Inherited = 1
    SetHere = 2

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: str) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> ProviderSettings: ...
    def set_Item(self, index: int, value: ProviderSettings) -> None: ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: typing.Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> typing.Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingChangingEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> SettingElement: ...
    def Add(self, element: SettingElement) -> None: ...
    def Remove(self, element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: typing.Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(Enum):
    Roaming = 0

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...

class SingleTagSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class SpecialSetting(Enum):
    ConnectionString = 0
    WebServiceUrl = 1

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: typing.Any) -> None: ...
    def BeginInvoke(self, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: typing.Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: typing.Any
    PropertyType: System.Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: typing.Any
    SerializedValue: typing.Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> typing.Any: ...
    def set_PropertyValue(self, value: typing.Any) -> None: ...
    def get_SerializedValue(self) -> typing.Any: ...
    def set_SerializedValue(self, value: typing.Any) -> None: ...

class SettingsSerializeAs(Enum):
    String = 0
    Xml = 1
    Binary = 2
    ProviderSpecific = 3

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: typing.Any) -> typing.Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...

class InheritedType(Enum):
    InNeither = 0
    InParent = 1
    InSelf = 2
    InBothSame = 3
    InBothDiff = 4
    InBothCopyNoRemove = 5

class EntryType(Enum):
    Inherited = 0
    Replaced = 1
    Removed = 2
    Added = 3

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(Enum):
    NotStarted = 0
    Started = 1
    Usable = 2
    Completed = 3

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class XmlEscaper:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(Enum):
    None = 0
    ExclusiveRange = 1

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def GetConfig(self, configKey: str) -> typing.Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: typing.Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> typing.Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> typing.Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(System.Enum):
    value__: Enum = ...
    MachineOnly: Enum = ...
    MachineToWebRoot: Enum = ...
    MachineToApplication: Enum = ...
    Everywhere: Enum = ...

class ConfigurationAllowExeDefinition(System.Enum):
    value__: Enum = ...
    MachineOnly: Enum = ...
    MachineToApplication: Enum = ...
    MachineToRoamingUser: Enum = ...
    MachineToLocalUser: Enum = ...

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def CopyTo(self, array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(System.Enum):
    value__: Enum = ...
    BasicMap: Enum = ...
    AddRemoveClearMap: Enum = ...
    BasicMapAlternate: Enum = ...
    AddRemoveClearMapAlternate: Enum = ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(System.Enum):
    value__: Enum = ...
    LockedAttributes: Enum = ...
    LockedExceptionList: Enum = ...
    LockedElements: Enum = ...
    LockedElementsExceptionList: Enum = ...

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> typing.Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: typing.Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: typing.Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_Item(self, name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(System.Enum):
    value__: Enum = ...
    None: Enum = ...
    IsDefaultCollection: Enum = ...
    IsRequired: Enum = ...
    IsKey: Enum = ...
    IsTypeStringTransformationRequired: Enum = ...
    IsAssemblyStringTransformationRequired: Enum = ...
    IsVersionCheckRequired: Enum = ...

class ConfigurationSaveMode(System.Enum):
    value__: Enum = ...
    Modified: Enum = ...
    Minimal: Enum = ...
    Full: Enum = ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSection: ...
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> typing.Any: ...

class ConfigurationUserLevel(System.Enum):
    value__: Enum = ...
    None: Enum = ...
    PerUserRoaming: Enum = ...
    PerUserRoamingAndLocal: Enum = ...

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(System.Enum):
    value__: Enum = ...
    Default: Enum = ...
    Inherited: Enum = ...
    Modified: Enum = ...
    Locked: Enum = ...
    XmlParentInherited: Enum = ...

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...
    def ToString(self) -> str: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> ConnectionStringSettings: ...
    def set_Item(self, index: int, value: ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: typing.Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> typing.Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> typing.Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[typing.Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[typing.Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(System.Enum):
    value__: Enum = ...
    NonSpecific: Enum = ...
    Local: Enum = ...
    Global: Enum = ...

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(System.Enum):
    value__: Enum = ...
    None: Enum = ...
    Add: Enum = ...
    Remove: Enum = ...

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class NameValueSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class OverrideMode(System.Enum):
    value__: Enum = ...
    Inherit: Enum = ...
    Allow: Enum = ...
    Deny: Enum = ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: typing.Any
    DefaultValue: typing.Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def set_Value(self, value: typing.Any) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: str) -> PropertyInformation: ...
    def CopyTo(self, array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(System.Enum):
    value__: Enum = ...
    Default: Enum = ...
    Inherited: Enum = ...
    SetHere: Enum = ...

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: str) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> ProviderSettings: ...
    def set_Item(self, index: int, value: ProviderSettings) -> None: ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: typing.Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> typing.Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingChangingEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def Equals(self, settings: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> SettingElement: ...
    def Add(self, element: SettingElement) -> None: ...
    def Remove(self, element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: typing.Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(System.Enum):
    value__: Enum = ...
    Roaming: Enum = ...

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...
    def Equals(self, settingValue: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class SingleTagSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class SpecialSetting(System.Enum):
    value__: Enum = ...
    ConnectionString: Enum = ...
    WebServiceUrl: Enum = ...

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def ToString(self) -> str: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: typing.Any) -> None: ...
    def BeginInvoke(self, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: typing.Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: typing.Any
    PropertyType: System.Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: typing.Any
    SerializedValue: typing.Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> typing.Any: ...
    def set_PropertyValue(self, value: typing.Any) -> None: ...
    def get_SerializedValue(self) -> typing.Any: ...
    def set_SerializedValue(self, value: typing.Any) -> None: ...

class SettingsSerializeAs(System.Enum):
    value__: Enum = ...
    String: Enum = ...
    Xml: Enum = ...
    Binary: Enum = ...
    ProviderSpecific: Enum = ...

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: typing.Any) -> typing.Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...

class InheritedType(System.Enum):
    value__: Enum = ...
    InNeither: Enum = ...
    InParent: Enum = ...
    InSelf: Enum = ...
    InBothSame: Enum = ...
    InBothDiff: Enum = ...
    InBothCopyNoRemove: Enum = ...

class EntryType(System.Enum):
    value__: Enum = ...
    Inherited: Enum = ...
    Replaced: Enum = ...
    Removed: Enum = ...
    Added: Enum = ...

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(System.Enum):
    value__: Enum = ...
    NotStarted: Enum = ...
    Started: Enum = ...
    Usable: Enum = ...
    Completed: Enum = ...

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(System.Enum):
    value__: Enum = ...
    None: Enum = ...
    ExclusiveRange: Enum = ...

class XmlEscaper:
    pass

class ValidationFlags(System.Enum):
    value__: Enum = ...
    None: Enum = ...
    ExclusiveRange: Enum = ...

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(System.Enum):
    value__: Enum = ...
    None: Enum = ...
    ExclusiveRange: Enum = ...

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetConfig(self, configKey: str) -> typing.Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    def __init__(self , *args: typing.Any) -> None: ...
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: typing.Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> typing.Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> typing.Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(System.Enum, int):
    MachineOnly: Enum = ...
    MachineToWebRoot: Enum = ...
    MachineToApplication: Enum = ...
    Everywhere: Enum = ...

class ConfigurationAllowExeDefinition(System.Enum, int):
    MachineOnly: Enum = ...
    MachineToApplication: Enum = ...
    MachineToRoamingUser: Enum = ...
    MachineToLocalUser: Enum = ...

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def CopyTo(self, array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(System.Enum, int):
    BasicMap: Enum = ...
    AddRemoveClearMap: Enum = ...
    BasicMapAlternate: Enum = ...
    AddRemoveClearMapAlternate: Enum = ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(System.Enum, int):
    LockedAttributes: Enum = ...
    LockedExceptionList: Enum = ...
    LockedElements: Enum = ...
    LockedElementsExceptionList: Enum = ...

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> typing.Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: typing.Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: typing.Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_Item(self, name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(System.Enum, int):
    None: Enum = ...
    IsDefaultCollection: Enum = ...
    IsRequired: Enum = ...
    IsKey: Enum = ...
    IsTypeStringTransformationRequired: Enum = ...
    IsAssemblyStringTransformationRequired: Enum = ...
    IsVersionCheckRequired: Enum = ...

class ConfigurationSaveMode(System.Enum, int):
    Modified: Enum = ...
    Minimal: Enum = ...
    Full: Enum = ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSection: ...
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> typing.Any: ...

class ConfigurationUserLevel(System.Enum, int):
    None: Enum = ...
    PerUserRoaming: Enum = ...
    PerUserRoamingAndLocal: Enum = ...

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(System.Enum, int):
    Default: Enum = ...
    Inherited: Enum = ...
    Modified: Enum = ...
    Locked: Enum = ...
    XmlParentInherited: Enum = ...

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...
    def ToString(self) -> str: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> ConnectionStringSettings: ...
    def set_Item(self, index: int, value: ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: typing.Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> typing.Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> typing.Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[typing.Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[typing.Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(System.Enum, int):
    NonSpecific: Enum = ...
    Local: Enum = ...
    Global: Enum = ...

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(System.Enum, int):
    None: Enum = ...
    Add: Enum = ...
    Remove: Enum = ...

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class NameValueSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class OverrideMode(System.Enum, int):
    Inherit: Enum = ...
    Allow: Enum = ...
    Deny: Enum = ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: typing.Any
    DefaultValue: typing.Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def set_Value(self, value: typing.Any) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: str) -> PropertyInformation: ...
    def CopyTo(self, array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(System.Enum, int):
    Default: Enum = ...
    Inherited: Enum = ...
    SetHere: Enum = ...

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: str) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> ProviderSettings: ...
    def set_Item(self, index: int, value: ProviderSettings) -> None: ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: typing.Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> typing.Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingChangingEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def Equals(self, settings: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> SettingElement: ...
    def Add(self, element: SettingElement) -> None: ...
    def Remove(self, element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: typing.Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(System.Enum, int):
    Roaming: Enum = ...

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...
    def Equals(self, settingValue: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class SingleTagSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class SpecialSetting(System.Enum, int):
    ConnectionString: Enum = ...
    WebServiceUrl: Enum = ...

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def ToString(self) -> str: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: typing.Any) -> None: ...
    def BeginInvoke(self, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: typing.Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: typing.Any
    PropertyType: System.Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: typing.Any
    SerializedValue: typing.Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> typing.Any: ...
    def set_PropertyValue(self, value: typing.Any) -> None: ...
    def get_SerializedValue(self) -> typing.Any: ...
    def set_SerializedValue(self, value: typing.Any) -> None: ...

class SettingsSerializeAs(System.Enum, int):
    String: Enum = ...
    Xml: Enum = ...
    Binary: Enum = ...
    ProviderSpecific: Enum = ...

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: typing.Any) -> typing.Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...

class InheritedType(System.Enum, int):
    InNeither: Enum = ...
    InParent: Enum = ...
    InSelf: Enum = ...
    InBothSame: Enum = ...
    InBothDiff: Enum = ...
    InBothCopyNoRemove: Enum = ...

class EntryType(System.Enum, int):
    Inherited: Enum = ...
    Replaced: Enum = ...
    Removed: Enum = ...
    Added: Enum = ...

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(System.Enum, int):
    NotStarted: Enum = ...
    Started: Enum = ...
    Usable: Enum = ...
    Completed: Enum = ...

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(System.Enum, int):
    None: Enum = ...
    ExclusiveRange: Enum = ...

class XmlEscaper:
    pass

class ValidationFlags(System.Enum, int):
    None: Enum = ...
    ExclusiveRange: Enum = ...

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(System.Enum, int):
    None: Enum = ...
    ExclusiveRange: Enum = ...

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetConfig(self, configKey: str) -> typing.Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    def __init__(self , *args: typing.Any) -> None: ...
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: typing.Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> typing.Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    pass

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    pass

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> typing.Any: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    pass

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(System.Enum, int):
    MachineOnly: ConfigurationAllowDefinition = ...
    MachineToWebRoot: ConfigurationAllowDefinition = ...
    MachineToApplication: ConfigurationAllowDefinition = ...
    Everywhere: ConfigurationAllowDefinition = ...

class ConfigurationAllowExeDefinition(System.Enum, int):
    MachineOnly: ConfigurationAllowExeDefinition = ...
    MachineToApplication: ConfigurationAllowExeDefinition = ...
    MachineToRoamingUser: ConfigurationAllowExeDefinition = ...
    MachineToLocalUser: ConfigurationAllowExeDefinition = ...

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def CopyTo(self, array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(System.Enum, int):
    BasicMap: ConfigurationElementCollectionType = ...
    AddRemoveClearMap: ConfigurationElementCollectionType = ...
    BasicMapAlternate: ConfigurationElementCollectionType = ...
    AddRemoveClearMapAlternate: ConfigurationElementCollectionType = ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(System.Enum, int):
    LockedAttributes: ConfigurationLockCollectionType = ...
    LockedExceptionList: ConfigurationLockCollectionType = ...
    LockedElements: ConfigurationLockCollectionType = ...
    LockedElementsExceptionList: ConfigurationLockCollectionType = ...

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> typing.Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: typing.Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: typing.Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_Item(self, name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(System.Enum, int):
    None: ConfigurationPropertyOptions = ...
    IsDefaultCollection: ConfigurationPropertyOptions = ...
    IsRequired: ConfigurationPropertyOptions = ...
    IsKey: ConfigurationPropertyOptions = ...
    IsTypeStringTransformationRequired: ConfigurationPropertyOptions = ...
    IsAssemblyStringTransformationRequired: ConfigurationPropertyOptions = ...
    IsVersionCheckRequired: ConfigurationPropertyOptions = ...

class ConfigurationSaveMode(System.Enum, int):
    Modified: ConfigurationSaveMode = ...
    Minimal: ConfigurationSaveMode = ...
    Full: ConfigurationSaveMode = ...

class ConfigurationSchemaErrors:
    pass

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSection: ...
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> typing.Any: ...

class ConfigurationUserLevel(System.Enum, int):
    None: ConfigurationUserLevel = ...
    PerUserRoaming: ConfigurationUserLevel = ...
    PerUserRoamingAndLocal: ConfigurationUserLevel = ...

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(System.Enum, int):
    Default: ConfigurationValueFlags = ...
    Inherited: ConfigurationValueFlags = ...
    Modified: ConfigurationValueFlags = ...
    Locked: ConfigurationValueFlags = ...
    XmlParentInherited: ConfigurationValueFlags = ...

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...
    def ToString(self) -> str: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> ConnectionStringSettings: ...
    def set_Item(self, index: int, value: ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: typing.Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> typing.Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> typing.Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[typing.Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[typing.Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    pass

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(System.Enum, int):
    NonSpecific: ExceptionAction = ...
    Local: ExceptionAction = ...
    Global: ExceptionAction = ...

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class IgnoreSection(ConfigurationSection):
    pass

class IgnoreSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(System.Enum, int):
    None: NamespaceChange = ...
    Add: NamespaceChange = ...
    Remove: NamespaceChange = ...

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class NameValueSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class OverrideMode(System.Enum, int):
    Inherit: OverrideMode = ...
    Allow: OverrideMode = ...
    Deny: OverrideMode = ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: typing.Any
    DefaultValue: typing.Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def set_Value(self, value: typing.Any) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: str) -> PropertyInformation: ...
    def CopyTo(self, array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(System.Enum, int):
    Default: PropertyValueOrigin = ...
    Inherited: PropertyValueOrigin = ...
    SetHere: PropertyValueOrigin = ...

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: str) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> ProviderSettings: ...
    def set_Item(self, index: int, value: ProviderSettings) -> None: ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    pass

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: typing.Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> typing.Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingChangingEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def Equals(self, settings: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> SettingElement: ...
    def Add(self, element: SettingElement) -> None: ...
    def Remove(self, element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    pass

class SettingsBase:
    Item: typing.Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    pass

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(System.Enum, int):
    Roaming: SettingsManageability = ...

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    pass

class SettingsPropertyNotFoundException(System.Exception):
    pass

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    pass

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...
    def Equals(self, settingValue: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class SingleTagSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class SpecialSetting(System.Enum, int):
    ConnectionString: SpecialSetting = ...
    WebServiceUrl: SpecialSetting = ...

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def ToString(self) -> str: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    pass

class UserSettingsGroup(ConfigurationSectionGroup):
    pass

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: typing.Any) -> None: ...
    def BeginInvoke(self, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: typing.Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: typing.Any
    PropertyType: System.Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: typing.Any
    SerializedValue: typing.Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> typing.Any: ...
    def set_PropertyValue(self, value: typing.Any) -> None: ...
    def get_SerializedValue(self) -> typing.Any: ...
    def set_SerializedValue(self, value: typing.Any) -> None: ...

class SettingsSerializeAs(System.Enum, int):
    String: SettingsSerializeAs = ...
    Xml: SettingsSerializeAs = ...
    Binary: SettingsSerializeAs = ...
    ProviderSpecific: SettingsSerializeAs = ...

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    pass

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: typing.Any) -> typing.Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...

class InheritedType(System.Enum, int):
    InNeither: InheritedType = ...
    InParent: InheritedType = ...
    InSelf: InheritedType = ...
    InBothSame: InheritedType = ...
    InBothDiff: InheritedType = ...
    InBothCopyNoRemove: InheritedType = ...

class EntryType(System.Enum, int):
    Inherited: EntryType = ...
    Replaced: EntryType = ...
    Removed: EntryType = ...
    Added: EntryType = ...

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str

class InitState(System.Enum, int):
    NotStarted: InitState = ...
    Started: InitState = ...
    Usable: InitState = ...
    Completed: InitState = ...

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class XmlEscaper:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    pass

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection

class DictionarySectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...
    def __init__(self, ) -> DictionarySectionHandler: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...
    def __init__(self, ) -> DpapiProtectedConfigurationProvider: ...

class IConfigurationSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetConfig(self, configKey: str) -> typing.Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...
    def __init__(self, ) -> IdnElement: ...

class IPersistComponentSettings:
    def __init__(self , *args: typing.Any) -> None: ...
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: typing.Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> typing.Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    def __init__(self, ) -> ApplicationScopedSettingAttribute: ...

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    def __init__(self, ) -> ApplicationSettingsGroup: ...

class AppSettingsReader:
    def GetValue(self, key: str, type: System.Type) -> typing.Any: ...
    def __init__(self, ) -> AppSettingsReader: ...

class AppSettingsSection(ConfigurationSection):
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...
    def __init__(self, ) -> AppSettingsSection: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, type: System.Type, callback: ValidatorCallback) -> CallbackValidator: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...
    def __init__(self, ) -> CallbackValidatorAttribute: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...
    def __init__(self, ) -> ClientSettingsSection: ...

class ClientSettingsStore:
    def __init__(self, ) -> ClientSettingsStore: ...

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> CommaDelimitedStringCollectionConverter: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(System.Enum, int):
    MachineOnly: ConfigurationAllowDefinition = ...
    MachineToWebRoot: ConfigurationAllowDefinition = ...
    MachineToApplication: ConfigurationAllowDefinition = ...
    Everywhere: ConfigurationAllowDefinition = ...

class ConfigurationAllowExeDefinition(System.Enum, int):
    MachineOnly: ConfigurationAllowExeDefinition = ...
    MachineToApplication: ConfigurationAllowExeDefinition = ...
    MachineToRoamingUser: ConfigurationAllowExeDefinition = ...
    MachineToLocalUser: ConfigurationAllowExeDefinition = ...

class ConfigurationCollectionAttribute(System.Attribute):
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...
    def __init__(self, itemType: System.Type) -> ConfigurationCollectionAttribute: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def CopyTo(self, array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(System.Enum, int):
    BasicMap: ConfigurationElementCollectionType = ...
    AddRemoveClearMap: ConfigurationElementCollectionType = ...
    BasicMapAlternate: ConfigurationElementCollectionType = ...
    AddRemoveClearMapAlternate: ConfigurationElementCollectionType = ...

class ConfigurationElementProperty:
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def __init__(self, validator: ConfigurationValidatorBase) -> ConfigurationElementProperty: ...

class ConfigurationErrorsException(ConfigurationException):
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...
    def __init__(self, message: str, inner: System.Exception, filename: str, line: int) -> ConfigurationErrorsException: ...
    def __init__(self, ) -> ConfigurationErrorsException: ...
    def __init__(self, message: str) -> ConfigurationErrorsException: ...
    def __init__(self, message: str, inner: System.Exception) -> ConfigurationErrorsException: ...
    def __init__(self, message: str, filename: str, line: int) -> ConfigurationErrorsException: ...
    def __init__(self, message: str, node: System.Xml.XmlNode) -> ConfigurationErrorsException: ...
    def __init__(self, message: str, inner: System.Exception, node: System.Xml.XmlNode) -> ConfigurationErrorsException: ...
    def __init__(self, message: str, reader: System.Xml.XmlReader) -> ConfigurationErrorsException: ...
    def __init__(self, message: str, inner: System.Exception, reader: System.Xml.XmlReader) -> ConfigurationErrorsException: ...

class ConfigurationException(System.SystemException):
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...
    def __init__(self, ) -> ConfigurationException: ...
    def __init__(self, message: str) -> ConfigurationException: ...
    def __init__(self, message: str, inner: System.Exception) -> ConfigurationException: ...
    def __init__(self, message: str, node: System.Xml.XmlNode) -> ConfigurationException: ...
    def __init__(self, message: str, inner: System.Exception, node: System.Xml.XmlNode) -> ConfigurationException: ...
    def __init__(self, message: str, filename: str, line: int) -> ConfigurationException: ...
    def __init__(self, message: str, inner: System.Exception, filename: str, line: int) -> ConfigurationException: ...

class ConfigurationFileMap:
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...
    def __init__(self, ) -> ConfigurationFileMap: ...
    def __init__(self, machineConfigFilename: str) -> ConfigurationFileMap: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(System.Enum, int):
    LockedAttributes: ConfigurationLockCollectionType = ...
    LockedExceptionList: ConfigurationLockCollectionType = ...
    LockedElements: ConfigurationLockCollectionType = ...
    LockedElementsExceptionList: ConfigurationLockCollectionType = ...

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> typing.Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: typing.Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def __init__(self, name: str, type: System.Type) -> ConfigurationProperty: ...
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any) -> ConfigurationProperty: ...
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any, options: ConfigurationPropertyOptions) -> ConfigurationProperty: ...
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any, typeConverter: System.ComponentModel.TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions) -> ConfigurationProperty: ...
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any, typeConverter: System.ComponentModel.TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions, description: str) -> ConfigurationProperty: ...

class ConfigurationPropertyAttribute(System.Attribute):
    Name: str
    DefaultValue: typing.Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...
    def __init__(self, name: str) -> ConfigurationPropertyAttribute: ...

class ConfigurationPropertyCollection:
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_Item(self, name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...
    def __init__(self, ) -> ConfigurationPropertyCollection: ...

class ConfigurationPropertyOptions(System.Enum, int):
    None: ConfigurationPropertyOptions = ...
    IsDefaultCollection: ConfigurationPropertyOptions = ...
    IsRequired: ConfigurationPropertyOptions = ...
    IsKey: ConfigurationPropertyOptions = ...
    IsTypeStringTransformationRequired: ConfigurationPropertyOptions = ...
    IsAssemblyStringTransformationRequired: ConfigurationPropertyOptions = ...
    IsVersionCheckRequired: ConfigurationPropertyOptions = ...

class ConfigurationSaveMode(System.Enum, int):
    Modified: ConfigurationSaveMode = ...
    Minimal: ConfigurationSaveMode = ...
    Full: ConfigurationSaveMode = ...

class ConfigurationSchemaErrors:
    def __init__(self, ) -> ConfigurationSchemaErrors: ...

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSection: ...
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def __init__(self, ) -> ConfigurationSectionGroup: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> typing.Any: ...

class ConfigurationUserLevel(System.Enum, int):
    None: ConfigurationUserLevel = ...
    PerUserRoaming: ConfigurationUserLevel = ...
    PerUserRoamingAndLocal: ConfigurationUserLevel = ...

class ConfigurationValidatorAttribute(System.Attribute):
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...
    def __init__(self, validator: System.Type) -> ConfigurationValidatorAttribute: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(System.Enum, int):
    Default: ConfigurationValueFlags = ...
    Inherited: ConfigurationValueFlags = ...
    Modified: ConfigurationValueFlags = ...
    Locked: ConfigurationValueFlags = ...
    XmlParentInherited: ConfigurationValueFlags = ...

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...
    def __init__(self, filename: str, line: int, prefix: str, localName: str, namespaceUri: str, doc: System.Xml.XmlDocument) -> ConfigXmlAttribute: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...
    def __init__(self, filename: str, line: int, data: str, doc: System.Xml.XmlDocument) -> ConfigXmlCDataSection: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...
    def __init__(self, filename: str, line: int, comment: str, doc: System.Xml.XmlDocument) -> ConfigXmlComment: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...
    def __init__(self, ) -> ConfigXmlDocument: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...
    def __init__(self, filename: str, line: int, prefix: str, localName: str, namespaceUri: str, doc: System.Xml.XmlDocument) -> ConfigXmlElement: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...
    def __init__(self, filename: str, line: int, strData: str, doc: System.Xml.XmlDocument) -> ConfigXmlSignificantWhitespace: ...

class ConfigXmlText(System.Xml.XmlText):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...
    def __init__(self, filename: str, line: int, strData: str, doc: System.Xml.XmlDocument) -> ConfigXmlText: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...
    def __init__(self, filename: str, line: int, comment: str, doc: System.Xml.XmlDocument) -> ConfigXmlWhitespace: ...

class ConnectionStringSettings(ConfigurationElement):
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...
    def ToString(self) -> str: ...
    def __init__(self, ) -> ConnectionStringSettings: ...
    def __init__(self, name: str, connectionString: str) -> ConnectionStringSettings: ...
    def __init__(self, name: str, connectionString: str, providerName: str) -> ConnectionStringSettings: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> ConnectionStringSettings: ...
    def set_Item(self, index: int, value: ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...
    def __init__(self, ) -> ConnectionStringSettingsCollection: ...

class ConnectionStringsSection(ConfigurationSection):
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...
    def __init__(self, ) -> ConnectionStringsSection: ...

class ContextInformation:
    HostingContext: typing.Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> typing.Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> typing.Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    Item: System.DateTime
    AllKeys: list[typing.Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[typing.Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...
    def __init__(self, ) -> DateTimeConfigurationCollection: ...

class DateTimeConfigurationElement(ConfigurationElement):
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...
    def __init__(self, ) -> DateTimeConfigurationElement: ...
    def __init__(self, value: System.DateTime) -> DateTimeConfigurationElement: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    def __init__(self, ) -> DefaultSection: ...

class DefaultSettingValueAttribute(System.Attribute):
    Value: str
    def get_Value(self) -> str: ...
    def __init__(self, value: str) -> DefaultSettingValueAttribute: ...

class DefaultValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, ) -> DefaultValidator: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def Dispose(self) -> None: ...
    def __init__(self, ) -> EmptyImpersonationContext: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...
    def __init__(self, ) -> ErrorInfoXmlDocument: ...

class ErrorsHelper:
    pass

class ExceptionAction(System.Enum, int):
    NonSpecific: ExceptionAction = ...
    Local: ExceptionAction = ...
    Global: ExceptionAction = ...

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...
    def __init__(self, ) -> ExeConfigurationFileMap: ...
    def __init__(self, machineConfigFileName: str) -> ExeConfigurationFileMap: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, typeEnum: System.Type) -> GenericEnumConverter: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class IgnoreSection(ConfigurationSection):
    def __init__(self, ) -> IgnoreSection: ...

class IgnoreSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...
    def __init__(self, ) -> IgnoreSectionHandler: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> InfiniteIntConverter: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> InfiniteTimeSpanConverter: ...

class IntegerValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, minValue: int, maxValue: int) -> IntegerValidator: ...
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool) -> IntegerValidator: ...
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool, resolution: int) -> IntegerValidator: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...
    def __init__(self, ) -> IntegerValidatorAttribute: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...
    def __init__(self, ) -> IriParsingElement: ...

class ISettingsProviderService:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...
    def __init__(self, ) -> KeyValueConfigurationCollection: ...

class KeyValueConfigurationElement(ConfigurationElement):
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...
    def __init__(self, key: str, value: str) -> KeyValueConfigurationElement: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...
    def __init__(self, root: AppSettingsSection) -> KeyValueInternalCollection: ...

class LocalFileSettingsProvider(SettingsProvider):
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def __init__(self, ) -> LocalFileSettingsProvider: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, minValue: int, maxValue: int) -> LongValidator: ...
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool) -> LongValidator: ...
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool, resolution: int) -> LongValidator: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...
    def __init__(self, ) -> LongValidatorAttribute: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(System.Enum, int):
    None: NamespaceChange = ...
    Add: NamespaceChange = ...
    Remove: NamespaceChange = ...

class NameValueConfigurationCollection(ConfigurationElementCollection):
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def __init__(self, ) -> NameValueConfigurationCollection: ...

class NameValueConfigurationElement(ConfigurationElement):
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...
    def __init__(self, name: str, value: str) -> NameValueConfigurationElement: ...

class NameValueFileSectionHandler:
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...
    def __init__(self, ) -> NameValueFileSectionHandler: ...

class NameValueSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...
    def __init__(self, ) -> NameValueSectionHandler: ...

class OverrideMode(System.Enum, int):
    Inherit: OverrideMode = ...
    Allow: OverrideMode = ...
    Deny: OverrideMode = ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, ) -> PositiveTimeSpanValidator: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def __init__(self, ) -> PositiveTimeSpanValidatorAttribute: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: typing.Any
    DefaultValue: typing.Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def set_Value(self, value: typing.Any) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: str) -> PropertyInformation: ...
    def CopyTo(self, array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(System.Enum, int):
    Default: PropertyValueOrigin = ...
    Inherited: PropertyValueOrigin = ...
    SetHere: PropertyValueOrigin = ...

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: str) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def __init__(self, ) -> ProtectedConfigurationProviderCollection: ...

class ProtectedConfigurationSection(ConfigurationSection):
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...
    def __init__(self, ) -> ProtectedConfigurationSection: ...

class ProtectedProviderSettings(ConfigurationElement):
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def __init__(self, ) -> ProtectedProviderSettings: ...

class ProviderSettings(ConfigurationElement):
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...
    def __init__(self, ) -> ProviderSettings: ...
    def __init__(self, name: str, type: str) -> ProviderSettings: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    Item: ProviderSettings
    Item: ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> ProviderSettings: ...
    def set_Item(self, index: int, value: ProviderSettings) -> None: ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def __init__(self, ) -> ProviderSettingsCollection: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, regex: str) -> RegexStringValidator: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...
    def __init__(self, regex: str) -> RegexStringValidatorAttribute: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...
    def __init__(self, ) -> RsaProtectedConfigurationProvider: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...
    def __init__(self, ) -> SchemeSettingElement: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> int: ...
    def __init__(self, ) -> SchemeSettingElementCollection: ...

class SchemeSettingInternal:
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...
    def __init__(self, name: str, options: System.GenericUriParserOptions) -> SchemeSettingInternal: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    def __init__(self, ) -> SettingAttribute: ...

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    NewValue: typing.Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> typing.Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...
    def __init__(self, settingName: str, settingClass: str, settingKey: str, newValue: typing.Any, cancel: bool) -> SettingChangingEventArgs: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingChangingEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def __init__(self, object: typing.Any, method: System.IntPtr) -> SettingChangingEventHandler: ...

class SettingElement(ConfigurationElement):
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def Equals(self, settings: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> None: ...
    def __init__(self, ) -> SettingElement: ...
    def __init__(self, name: str, serializeAs: SettingsSerializeAs) -> SettingElement: ...

class SettingElementCollection(ConfigurationElementCollection):
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> SettingElement: ...
    def Add(self, element: SettingElement) -> None: ...
    def Remove(self, element: SettingElement) -> None: ...
    def Clear(self) -> None: ...
    def __init__(self, ) -> SettingElementCollection: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    def __init__(self, ) -> SettingsAttributeDictionary: ...
    def __init__(self, attributes: SettingsAttributeDictionary) -> SettingsAttributeDictionary: ...

class SettingsBase:
    Item: typing.Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    def __init__(self, ) -> SettingsContext: ...

class SettingsDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...
    def __init__(self, description: str) -> SettingsDescriptionAttribute: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    Description: str
    def get_Description(self) -> str: ...
    def __init__(self, description: str) -> SettingsGroupDescriptionAttribute: ...

class SettingsGroupNameAttribute(System.Attribute):
    GroupName: str
    def get_GroupName(self) -> str: ...
    def __init__(self, groupName: str) -> SettingsGroupNameAttribute: ...

class SettingsLoadedEventArgs(System.EventArgs):
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...
    def __init__(self, provider: SettingsProvider) -> SettingsLoadedEventArgs: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def __init__(self, object: typing.Any, method: System.IntPtr) -> SettingsLoadedEventHandler: ...

class SettingsManageability(System.Enum, int):
    Roaming: SettingsManageability = ...

class SettingsManageabilityAttribute(System.Attribute):
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...
    def __init__(self, manageability: SettingsManageability) -> SettingsManageabilityAttribute: ...

class SettingsPropertyCollection:
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    def __init__(self, ) -> SettingsPropertyCollection: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    def __init__(self, message: str) -> SettingsPropertyIsReadOnlyException: ...
    def __init__(self, message: str, innerException: System.Exception) -> SettingsPropertyIsReadOnlyException: ...
    def __init__(self, ) -> SettingsPropertyIsReadOnlyException: ...

class SettingsPropertyNotFoundException(System.Exception):
    def __init__(self, message: str) -> SettingsPropertyNotFoundException: ...
    def __init__(self, message: str, innerException: System.Exception) -> SettingsPropertyNotFoundException: ...
    def __init__(self, ) -> SettingsPropertyNotFoundException: ...

class SettingsPropertyValueCollection:
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...
    def __init__(self, ) -> SettingsPropertyValueCollection: ...

class SettingsPropertyWrongTypeException(System.Exception):
    def __init__(self, message: str) -> SettingsPropertyWrongTypeException: ...
    def __init__(self, message: str, innerException: System.Exception) -> SettingsPropertyWrongTypeException: ...
    def __init__(self, ) -> SettingsPropertyWrongTypeException: ...

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...
    def __init__(self, providerTypeName: str) -> SettingsProviderAttribute: ...
    def __init__(self, providerType: System.Type) -> SettingsProviderAttribute: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    Item: SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> SettingsProvider: ...
    def __init__(self, ) -> SettingsProviderCollection: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def Invoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def __init__(self, object: typing.Any, method: System.IntPtr) -> SettingsSavingEventHandler: ...

class SettingsSerializeAsAttribute(System.Attribute):
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def __init__(self, serializeAs: SettingsSerializeAs) -> SettingsSerializeAsAttribute: ...

class SettingValueElement(ConfigurationElement):
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...
    def Equals(self, settingValue: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def __init__(self, ) -> SettingValueElement: ...

class SingleTagSectionHandler:
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...
    def __init__(self, ) -> SingleTagSectionHandler: ...

class SpecialSetting(System.Enum, int):
    ConnectionString: SpecialSetting = ...
    WebServiceUrl: SpecialSetting = ...

class SpecialSettingAttribute(System.Attribute):
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...
    def __init__(self, specialSetting: SpecialSetting) -> SpecialSettingAttribute: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def ToString(self) -> str: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> CommaDelimitedStringCollection: ...
    def __init__(self, ) -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, minLength: int) -> StringValidator: ...
    def __init__(self, minLength: int, maxLength: int) -> StringValidator: ...
    def __init__(self, minLength: int, maxLength: int, invalidCharacters: str) -> StringValidator: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...
    def __init__(self, ) -> StringValidatorAttribute: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, baseClass: System.Type) -> SubclassTypeValidator: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...
    def __init__(self, baseClass: System.Type) -> SubclassTypeValidatorAttribute: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> TimeSpanMinutesConverter: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> TimeSpanMinutesOrInfiniteConverter: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> TimeSpanSecondsConverter: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> TimeSpanSecondsOrInfiniteConverter: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan) -> TimeSpanValidator: ...
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan, rangeIsExclusive: bool) -> TimeSpanValidator: ...
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan, rangeIsExclusive: bool, resolutionInSeconds: int) -> TimeSpanValidator: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...
    def __init__(self, ) -> TimeSpanValidatorAttribute: ...

class TypeNameConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> TypeNameConverter: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...
    def __init__(self, ) -> UriSection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    def __init__(self, ) -> UserScopedSettingAttribute: ...

class UserSettingsGroup(ConfigurationSectionGroup):
    def __init__(self, ) -> UserSettingsGroup: ...

class ValidatorCallback(System.MulticastDelegate):
    def Invoke(self, value: typing.Any) -> None: ...
    def BeginInvoke(self, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...
    def __init__(self, object: typing.Any, method: System.IntPtr) -> ValidatorCallback: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: typing.Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> WhiteSpaceTrimStringConverter: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    Name: str
    IsReadOnly: bool
    DefaultValue: typing.Any
    PropertyType: System.Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...
    def __init__(self, name: str) -> SettingsProperty: ...
    def __init__(self, name: str, propertyType: System.Type, provider: SettingsProvider, isReadOnly: bool, defaultValue: typing.Any, serializeAs: SettingsSerializeAs, attributes: SettingsAttributeDictionary, throwOnErrorDeserializing: bool, throwOnErrorSerializing: bool) -> SettingsProperty: ...
    def __init__(self, propertyToCopy: SettingsProperty) -> SettingsProperty: ...

class SettingsPropertyValue:
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: typing.Any
    SerializedValue: typing.Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> typing.Any: ...
    def set_PropertyValue(self, value: typing.Any) -> None: ...
    def get_SerializedValue(self) -> typing.Any: ...
    def set_SerializedValue(self, value: typing.Any) -> None: ...
    def __init__(self, property: SettingsProperty) -> SettingsPropertyValue: ...

class SettingsSerializeAs(System.Enum, int):
    String: SettingsSerializeAs = ...
    Xml: SettingsSerializeAs = ...
    Binary: SettingsSerializeAs = ...
    ProviderSpecific: SettingsSerializeAs = ...

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    def __init__(self, ) -> NoSettingsVersionUpgradeAttribute: ...

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: typing.Any) -> typing.Any: ...
    def __init__(self, ) -> UriIdnScopeTypeConverter: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def Compare(self, x: SectionInput, y: SectionInput) -> int: ...
    def __init__(self, ) -> IndirectLocationInputComparer: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...

class InheritedType(System.Enum, int):
    InNeither: InheritedType = ...
    InParent: InheritedType = ...
    InSelf: InheritedType = ...
    InBothSame: InheritedType = ...
    InBothDiff: InheritedType = ...
    InBothCopyNoRemove: InheritedType = ...

class EntryType(System.Enum, int):
    Inherited: EntryType = ...
    Replaced: EntryType = ...
    Removed: EntryType = ...
    Added: EntryType = ...

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    value: str
    def __init__(self, ) -> <>c__DisplayClass6_0: ...

class InitState(System.Enum, int):
    NotStarted: InitState = ...
    Started: InitState = ...
    Usable: InitState = ...
    Completed: InitState = ...

class <GetEnumerator>d__15:
    <>4__this: ConfigurationSectionCollection
    def __init__(self, <>1__state: int) -> <GetEnumerator>d__15: ...

class <GetEnumerator>d__14:
    <>4__this: ConfigurationSectionGroupCollection
    def __init__(self, <>1__state: int) -> <GetEnumerator>d__14: ...

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class XmlEscaper:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class <GetEnumerator>d__6:
    <>4__this: PropertyInformationCollection
    def __init__(self, <>1__state: int) -> <GetEnumerator>d__6: ...

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    def __init__(self, ) -> EmptyCollectionEnumerator: ...

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: ConfigurationElementsCollection
    def __init__(self, <>1__state: int) -> <System-Collections-IEnumerable-GetEnumerator>d__2: ...

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    <>4__this: InvalidValuesCollection
    def __init__(self, <>1__state: int) -> <System-Collections-IEnumerable-GetEnumerator>d__2: ...

class DictionarySectionHandler:
    def __init__(self, ) -> None: ...
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class DpapiProtectedConfigurationProvider(ProtectedConfigurationProvider):
    def __init__(self, ) -> None: ...
    UseMachineProtection: bool
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def get_UseMachineProtection(self) -> bool: ...
    def Initialize(self, name: str, configurationValues: System.Collections.Specialized.NameValueCollection) -> None: ...

class IConfigurationSystem:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetConfig(self, configKey: str) -> typing.Any: ...
    def Init(self) -> None: ...

class IdnElement(ConfigurationElement):
    def __init__(self, ) -> None: ...
    Enabled: System.UriIdnScope
    def get_Enabled(self) -> System.UriIdnScope: ...
    def set_Enabled(self, value: System.UriIdnScope) -> None: ...

class IPersistComponentSettings:
    def __init__(self , *args: typing.Any) -> None: ...
    SaveSettings: bool
    SettingsKey: str
    def get_SaveSettings(self) -> bool: ...
    def set_SaveSettings(self, value: bool) -> None: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def LoadComponentSettings(self) -> None: ...
    def SaveComponentSettings(self) -> None: ...
    def ResetComponentSettings(self) -> None: ...

class ApplicationSettingsBase(SettingsBase):
    Context: SettingsContext
    Properties: SettingsPropertyCollection
    PropertyValues: SettingsPropertyValueCollection
    Providers: SettingsProviderCollection
    SettingsKey: str
    Item: typing.Any
    def get_Context(self) -> SettingsContext: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_SettingsKey(self) -> str: ...
    def set_SettingsKey(self, value: str) -> None: ...
    def add_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def remove_PropertyChanged(self, value: System.ComponentModel.PropertyChangedEventHandler) -> None: ...
    def add_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def remove_SettingChanging(self, value: SettingChangingEventHandler) -> None: ...
    def add_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def remove_SettingsLoaded(self, value: SettingsLoadedEventHandler) -> None: ...
    def add_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def remove_SettingsSaving(self, value: SettingsSavingEventHandler) -> None: ...
    def GetPreviousVersion(self, propertyName: str) -> typing.Any: ...
    def Reload(self) -> None: ...
    def Reset(self) -> None: ...
    def Save(self) -> None: ...
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Upgrade(self) -> None: ...

class ApplicationScopedSettingAttribute(SettingAttribute):
    def __init__(self, ) -> None: ...

class ApplicationSettingsGroup(ConfigurationSectionGroup):
    def __init__(self, ) -> None: ...

class AppSettingsReader:
    def __init__(self, ) -> None: ...
    def GetValue(self, key: str, type: System.Type) -> typing.Any: ...

class AppSettingsSection(ConfigurationSection):
    def __init__(self, ) -> None: ...
    Settings: KeyValueConfigurationCollection
    File: str
    def get_Settings(self) -> KeyValueConfigurationCollection: ...
    def get_File(self) -> str: ...
    def set_File(self, value: str) -> None: ...

class BaseConfigurationRecord:
    ConfigPath: str
    StreamName: str
    HasInitErrors: bool
    def get_ConfigPath(self) -> str: ...
    def get_StreamName(self) -> str: ...
    def get_HasInitErrors(self) -> bool: ...
    def ThrowIfInitErrors(self) -> None: ...
    def GetSection(self, configKey: str) -> typing.Any: ...
    def GetLkgSection(self, configKey: str) -> typing.Any: ...
    def RefreshSection(self, configKey: str) -> None: ...
    def Remove(self) -> None: ...

class CallbackValidator(ConfigurationValidatorBase):
    def __init__(self, type: System.Type, callback: ValidatorCallback) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class CallbackValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, ) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    Type: System.Type
    CallbackMethodName: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Type(self) -> System.Type: ...
    def set_Type(self, value: System.Type) -> None: ...
    def get_CallbackMethodName(self) -> str: ...
    def set_CallbackMethodName(self, value: str) -> None: ...

class ClientConfigPaths:
    pass

class ClientConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    HasRoamingConfig: bool
    HasLocalConfig: bool
    IsAppConfigHttp: bool
    SupportsRefresh: bool
    SupportsPath: bool
    SupportsLocation: bool
    def get_HasRoamingConfig(self) -> bool: ...
    def get_HasLocalConfig(self) -> bool: ...
    def get_IsAppConfigHttp(self) -> bool: ...
    def get_SupportsRefresh(self) -> bool: ...
    def get_SupportsPath(self) -> bool: ...
    def get_SupportsLocation(self) -> bool: ...
    def RefreshConfigPaths(self) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def IsInitDelayed(self, configRecord: System.Configuration.Internal.IInternalConfigRecord) -> bool: ...
    def RequireCompleteInit(self, record: System.Configuration.Internal.IInternalConfigRecord) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def GetStreamNameForConfigSource(self, streamName: str, configSource: str) -> str: ...
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition) -> bool: ...
    def VerifyDefinitionAllowed(self, configPath: str, allowDefinition: ConfigurationAllowDefinition, allowExeDefinition: ConfigurationAllowExeDefinition, errorInfo: System.Configuration.Internal.IConfigErrorInfo) -> None: ...
    def PrefetchAll(self, configPath: str, streamName: str) -> bool: ...
    def PrefetchSection(self, sectionGroupName: str, sectionName: str) -> bool: ...
    def CreateDeprecatedConfigContext(self, configPath: str) -> typing.Any: ...
    def CreateConfigurationContext(self, configPath: str, locationSubPath: str) -> typing.Any: ...

class ClientConfigurationSystem:
    pass

class ClientSettingsSection(ConfigurationSection):
    def __init__(self, ) -> None: ...
    Settings: SettingElementCollection
    def get_Settings(self) -> SettingElementCollection: ...

class ClientSettingsStore:
    def __init__(self, ) -> None: ...

class CommaDelimitedStringCollectionConverter(ConfigurationConverterBase):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class CommonConfigurationStrings:
    pass

class ConfigDefinitionUpdates:
    pass

class ConfigPathUtility:
    pass

class Configuration:
    AppSettings: AppSettingsSection
    ConnectionStrings: ConnectionStringsSection
    FilePath: str
    HasFile: bool
    Locations: ConfigurationLocationCollection
    EvaluationContext: ContextInformation
    RootSectionGroup: ConfigurationSectionGroup
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    NamespaceDeclared: bool
    TypeStringTransformer: dict[str, str]
    AssemblyStringTransformer: dict[str, str]
    TargetFramework: System.Runtime.Versioning.FrameworkName
    def get_AppSettings(self) -> AppSettingsSection: ...
    def get_ConnectionStrings(self) -> ConnectionStringsSection: ...
    def get_FilePath(self) -> str: ...
    def get_HasFile(self) -> bool: ...
    def get_Locations(self) -> ConfigurationLocationCollection: ...
    def get_EvaluationContext(self) -> ContextInformation: ...
    def get_RootSectionGroup(self) -> ConfigurationSectionGroup: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    def get_NamespaceDeclared(self) -> bool: ...
    def set_NamespaceDeclared(self, value: bool) -> None: ...
    def get_TypeStringTransformer(self) -> dict[str, str]: ...
    def set_TypeStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_AssemblyStringTransformer(self) -> dict[str, str]: ...
    def set_AssemblyStringTransformer(self, value: dict[str, str]) -> None: ...
    def get_TargetFramework(self) -> System.Runtime.Versioning.FrameworkName: ...
    def set_TargetFramework(self, value: System.Runtime.Versioning.FrameworkName) -> None: ...
    def GetSection(self, sectionName: str) -> ConfigurationSection: ...
    def GetSectionGroup(self, sectionGroupName: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Save(self) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def Save(self, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode) -> None: ...
    @typing.overload
    def SaveAs(self, filename: str, saveMode: ConfigurationSaveMode, forceSaveAll: bool) -> None: ...

class ConfigurationAllowDefinition(System.Enum, int):
    MachineOnly: ConfigurationAllowDefinition = ...
    MachineToWebRoot: ConfigurationAllowDefinition = ...
    MachineToApplication: ConfigurationAllowDefinition = ...
    Everywhere: ConfigurationAllowDefinition = ...

class ConfigurationAllowExeDefinition(System.Enum, int):
    MachineOnly: ConfigurationAllowExeDefinition = ...
    MachineToApplication: ConfigurationAllowExeDefinition = ...
    MachineToRoamingUser: ConfigurationAllowExeDefinition = ...
    MachineToLocalUser: ConfigurationAllowExeDefinition = ...

class ConfigurationCollectionAttribute(System.Attribute):
    def __init__(self, itemType: System.Type) -> None: ...
    ItemType: System.Type
    AddItemName: str
    RemoveItemName: str
    ClearItemsName: str
    CollectionType: ConfigurationElementCollectionType
    def get_ItemType(self) -> System.Type: ...
    def get_AddItemName(self) -> str: ...
    def set_AddItemName(self, value: str) -> None: ...
    def get_RemoveItemName(self) -> str: ...
    def set_RemoveItemName(self, value: str) -> None: ...
    def get_ClearItemsName(self) -> str: ...
    def set_ClearItemsName(self, value: str) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def set_CollectionType(self, value: ConfigurationElementCollectionType) -> None: ...

class ConfigurationConverterBase(System.ComponentModel.TypeConverter):
    def CanConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...
    def CanConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, type: System.Type) -> bool: ...

class ConfigurationElement:
    LockAttributes: ConfigurationLockCollection
    LockAllAttributesExcept: ConfigurationLockCollection
    LockElements: ConfigurationLockCollection
    LockAllElementsExcept: ConfigurationLockCollection
    LockItem: bool
    ElementInformation: ElementInformation
    CurrentConfiguration: Configuration
    def get_LockAttributes(self) -> ConfigurationLockCollection: ...
    def get_LockAllAttributesExcept(self) -> ConfigurationLockCollection: ...
    def get_LockElements(self) -> ConfigurationLockCollection: ...
    def get_LockAllElementsExcept(self) -> ConfigurationLockCollection: ...
    def get_LockItem(self) -> bool: ...
    def set_LockItem(self, value: bool) -> None: ...
    def get_ElementInformation(self) -> ElementInformation: ...
    def get_CurrentConfiguration(self) -> Configuration: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class ConfigurationElementCollection(ConfigurationElement):
    EmitClear: bool
    CollectionType: ConfigurationElementCollectionType
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_EmitClear(self) -> bool: ...
    def set_EmitClear(self, value: bool) -> None: ...
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def IsReadOnly(self) -> bool: ...
    def Equals(self, compareTo: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def CopyTo(self, array: list[ConfigurationElement], index: int) -> None: ...

class ConfigurationElementCollectionType(System.Enum, int):
    BasicMap: ConfigurationElementCollectionType = ...
    AddRemoveClearMap: ConfigurationElementCollectionType = ...
    BasicMapAlternate: ConfigurationElementCollectionType = ...
    AddRemoveClearMapAlternate: ConfigurationElementCollectionType = ...

class ConfigurationElementProperty:
    def __init__(self, validator: ConfigurationValidatorBase) -> None: ...
    Validator: ConfigurationValidatorBase
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationErrorsException(ConfigurationException):
    @typing.overload
    def __init__(self, message: str, inner: System.Exception, filename: str, line: int) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, inner: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, message: str, filename: str, line: int) -> None: ...
    @typing.overload
    def __init__(self, message: str, node: System.Xml.XmlNode) -> None: ...
    @typing.overload
    def __init__(self, message: str, inner: System.Exception, node: System.Xml.XmlNode) -> None: ...
    @typing.overload
    def __init__(self, message: str, reader: System.Xml.XmlReader) -> None: ...
    @typing.overload
    def __init__(self, message: str, inner: System.Exception, reader: System.Xml.XmlReader) -> None: ...
    Message: str
    Filename: str
    Line: int
    Errors: System.Collections.ICollection
    def get_Message(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def get_Errors(self) -> System.Collections.ICollection: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(node: System.Xml.XmlNode) -> int: ...
    @staticmethod
    @typing.overload
    def GetLineNumber(reader: System.Xml.XmlReader) -> int: ...
    @staticmethod
    @typing.overload
    def GetFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    @typing.overload
    def GetFilename(reader: System.Xml.XmlReader) -> str: ...

class ConfigurationException(System.SystemException):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, inner: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, message: str, node: System.Xml.XmlNode) -> None: ...
    @typing.overload
    def __init__(self, message: str, inner: System.Exception, node: System.Xml.XmlNode) -> None: ...
    @typing.overload
    def __init__(self, message: str, filename: str, line: int) -> None: ...
    @typing.overload
    def __init__(self, message: str, inner: System.Exception, filename: str, line: int) -> None: ...
    Message: str
    BareMessage: str
    Filename: str
    Line: int
    def get_Message(self) -> str: ...
    def get_BareMessage(self) -> str: ...
    def get_Filename(self) -> str: ...
    def get_Line(self) -> int: ...
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    @staticmethod
    def GetXmlNodeFilename(node: System.Xml.XmlNode) -> str: ...
    @staticmethod
    def GetXmlNodeLineNumber(node: System.Xml.XmlNode) -> int: ...

class ConfigurationFileMap:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, machineConfigFilename: str) -> None: ...
    MachineConfigFilename: str
    def get_MachineConfigFilename(self) -> str: ...
    def set_MachineConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ConfigurationLocation:
    Path: str
    def get_Path(self) -> str: ...
    def OpenConfiguration(self) -> Configuration: ...

class ConfigurationLocationCollection(System.Collections.ReadOnlyCollectionBase):
    Item: ConfigurationLocation
    def get_Item(self, index: int) -> ConfigurationLocation: ...

class ConfigurationLockCollection:
    IsModified: bool
    AttributeList: str
    HasParentElements: bool
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_IsModified(self) -> bool: ...
    def get_AttributeList(self) -> str: ...
    def get_HasParentElements(self) -> bool: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Add(self, name: str) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def CopyTo(self, array: list[str], index: int) -> None: ...
    def IsReadOnly(self, name: str) -> bool: ...
    def SetFromList(self, attributeList: str) -> None: ...

class ConfigurationLockCollectionType(System.Enum, int):
    LockedAttributes: ConfigurationLockCollectionType = ...
    LockedExceptionList: ConfigurationLockCollectionType = ...
    LockedElements: ConfigurationLockCollectionType = ...
    LockedElementsExceptionList: ConfigurationLockCollectionType = ...

class ConfigurationManager:
    AppSettings: System.Collections.Specialized.NameValueCollection
    ConnectionStrings: ConnectionStringSettingsCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def get_ConnectionStrings() -> ConnectionStringSettingsCollection: ...
    @staticmethod
    def GetSection(sectionName: str) -> typing.Any: ...
    @staticmethod
    def RefreshSection(sectionName: str) -> None: ...
    @staticmethod
    def OpenMachineConfiguration() -> Configuration: ...
    @staticmethod
    def OpenMappedMachineConfiguration(fileMap: ConfigurationFileMap) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenExeConfiguration(exePath: str) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel) -> Configuration: ...
    @staticmethod
    @typing.overload
    def OpenMappedExeConfiguration(fileMap: ExeConfigurationFileMap, userLevel: ConfigurationUserLevel, preLoad: bool) -> Configuration: ...

class ConfigurationManagerInternalFactory:
    pass

class ConfigurationProperty:
    @typing.overload
    def __init__(self, name: str, type: System.Type) -> None: ...
    @typing.overload
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any, options: ConfigurationPropertyOptions) -> None: ...
    @typing.overload
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any, typeConverter: System.ComponentModel.TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions) -> None: ...
    @typing.overload
    def __init__(self, name: str, type: System.Type, defaultValue: typing.Any, typeConverter: System.ComponentModel.TypeConverter, validator: ConfigurationValidatorBase, options: ConfigurationPropertyOptions, description: str) -> None: ...
    Name: str
    Description: str
    Type: System.Type
    DefaultValue: typing.Any
    IsRequired: bool
    IsKey: bool
    IsDefaultCollection: bool
    IsTypeStringTransformationRequired: bool
    IsAssemblyStringTransformationRequired: bool
    IsVersionCheckRequired: bool
    Converter: System.ComponentModel.TypeConverter
    Validator: ConfigurationValidatorBase
    def get_Name(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_Type(self) -> System.Type: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def get_IsTypeStringTransformationRequired(self) -> bool: ...
    def get_IsAssemblyStringTransformationRequired(self) -> bool: ...
    def get_IsVersionCheckRequired(self) -> bool: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...

class ConfigurationPropertyAttribute(System.Attribute):
    def __init__(self, name: str) -> None: ...
    Name: str
    DefaultValue: typing.Any
    Options: ConfigurationPropertyOptions
    IsDefaultCollection: bool
    IsRequired: bool
    IsKey: bool
    def get_Name(self) -> str: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_Options(self) -> ConfigurationPropertyOptions: ...
    def set_Options(self, value: ConfigurationPropertyOptions) -> None: ...
    def get_IsDefaultCollection(self) -> bool: ...
    def set_IsDefaultCollection(self, value: bool) -> None: ...
    def get_IsRequired(self) -> bool: ...
    def set_IsRequired(self, value: bool) -> None: ...
    def get_IsKey(self) -> bool: ...
    def set_IsKey(self, value: bool) -> None: ...

class ConfigurationPropertyCollection:
    def __init__(self, ) -> None: ...
    Item: ConfigurationProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def get_Item(self, name: str) -> ConfigurationProperty: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def CopyTo(self, array: list[ConfigurationProperty], index: int) -> None: ...
    def Contains(self, name: str) -> bool: ...
    def Add(self, property: ConfigurationProperty) -> None: ...
    def Remove(self, name: str) -> bool: ...
    def Clear(self) -> None: ...

class ConfigurationPropertyOptions(System.Enum, int):
    None: ConfigurationPropertyOptions = ...
    IsDefaultCollection: ConfigurationPropertyOptions = ...
    IsRequired: ConfigurationPropertyOptions = ...
    IsKey: ConfigurationPropertyOptions = ...
    IsTypeStringTransformationRequired: ConfigurationPropertyOptions = ...
    IsAssemblyStringTransformationRequired: ConfigurationPropertyOptions = ...
    IsVersionCheckRequired: ConfigurationPropertyOptions = ...

class ConfigurationSaveMode(System.Enum, int):
    Modified: ConfigurationSaveMode = ...
    Minimal: ConfigurationSaveMode = ...
    Full: ConfigurationSaveMode = ...

class ConfigurationSchemaErrors:
    def __init__(self, ) -> None: ...

class ConfigurationSection(ConfigurationElement):
    SectionInformation: SectionInformation
    def get_SectionInformation(self) -> SectionInformation: ...

class ConfigurationSectionCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSection
    Item: ConfigurationSection
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSection: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSection: ...
    def Add(self, name: str, section: ConfigurationSection) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSection], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSection: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSection: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSectionGroup:
    def __init__(self, ) -> None: ...
    IsDeclared: bool
    IsDeclarationRequired: bool
    SectionGroupName: str
    Name: str
    Type: str
    Sections: ConfigurationSectionCollection
    SectionGroups: ConfigurationSectionGroupCollection
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_SectionGroupName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Sections(self) -> ConfigurationSectionCollection: ...
    def get_SectionGroups(self) -> ConfigurationSectionGroupCollection: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...

class ConfigurationSectionGroupCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: ConfigurationSectionGroup
    Item: ConfigurationSectionGroup
    @typing.overload
    def get_Item(self, name: str) -> ConfigurationSectionGroup: ...
    @typing.overload
    def get_Item(self, index: int) -> ConfigurationSectionGroup: ...
    def Add(self, name: str, sectionGroup: ConfigurationSectionGroup) -> None: ...
    def Clear(self) -> None: ...
    def CopyTo(self, array: list[ConfigurationSectionGroup], index: int) -> None: ...
    @typing.overload
    def Get(self, index: int) -> ConfigurationSectionGroup: ...
    @typing.overload
    def Get(self, name: str) -> ConfigurationSectionGroup: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def GetKey(self, index: int) -> str: ...
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...

class ConfigurationSettings:
    AppSettings: System.Collections.Specialized.NameValueCollection
    @staticmethod
    def get_AppSettings() -> System.Collections.Specialized.NameValueCollection: ...
    @staticmethod
    def GetConfig(sectionName: str) -> typing.Any: ...

class ConfigurationUserLevel(System.Enum, int):
    None: ConfigurationUserLevel = ...
    PerUserRoaming: ConfigurationUserLevel = ...
    PerUserRoamingAndLocal: ConfigurationUserLevel = ...

class ConfigurationValidatorAttribute(System.Attribute):
    def __init__(self, validator: System.Type) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    ValidatorType: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_ValidatorType(self) -> System.Type: ...

class ConfigurationValidatorBase:
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class ConfigurationValue:
    pass

class ConfigurationValueFlags(System.Enum, int):
    Default: ConfigurationValueFlags = ...
    Inherited: ConfigurationValueFlags = ...
    Modified: ConfigurationValueFlags = ...
    Locked: ConfigurationValueFlags = ...
    XmlParentInherited: ConfigurationValueFlags = ...

class ConfigurationValues(System.Collections.Specialized.NameObjectCollectionBase):
    pass

class ConfigXmlAttribute(System.Xml.XmlAttribute):
    def __init__(self, filename: str, line: int, prefix: str, localName: str, namespaceUri: str, doc: System.Xml.XmlDocument) -> None: ...
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlCDataSection(System.Xml.XmlCDataSection):
    def __init__(self, filename: str, line: int, data: str, doc: System.Xml.XmlDocument) -> None: ...
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlComment(System.Xml.XmlComment):
    def __init__(self, filename: str, line: int, comment: str, doc: System.Xml.XmlDocument) -> None: ...
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlDocument(System.Xml.XmlDocument):
    def __init__(self, ) -> None: ...
    LineNumber: int
    Filename: str
    def get_LineNumber(self) -> int: ...
    def get_Filename(self) -> str: ...
    def Load(self, filename: str) -> None: ...
    def LoadSingleElement(self, filename: str, sourceReader: System.Xml.XmlTextReader) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ConfigXmlElement(System.Xml.XmlElement):
    def __init__(self, filename: str, line: int, prefix: str, localName: str, namespaceUri: str, doc: System.Xml.XmlDocument) -> None: ...
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlReader(System.Xml.XmlTextReader):
    pass

class ConfigXmlSignificantWhitespace(System.Xml.XmlSignificantWhitespace):
    def __init__(self, filename: str, line: int, strData: str, doc: System.Xml.XmlDocument) -> None: ...
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlText(System.Xml.XmlText):
    def __init__(self, filename: str, line: int, strData: str, doc: System.Xml.XmlDocument) -> None: ...
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConfigXmlWhitespace(System.Xml.XmlWhitespace):
    def __init__(self, filename: str, line: int, comment: str, doc: System.Xml.XmlDocument) -> None: ...
    def CloneNode(self, deep: bool) -> System.Xml.XmlNode: ...

class ConnectionStringSettings(ConfigurationElement):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, name: str, connectionString: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, connectionString: str, providerName: str) -> None: ...
    Name: str
    ConnectionString: str
    ProviderName: str
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_ConnectionString(self) -> str: ...
    def set_ConnectionString(self, value: str) -> None: ...
    def get_ProviderName(self) -> str: ...
    def set_ProviderName(self, value: str) -> None: ...
    def ToString(self) -> str: ...

class ConnectionStringSettingsCollection(ConfigurationElementCollection):
    def __init__(self, ) -> None: ...
    Item: ConnectionStringSettings
    Item: ConnectionStringSettings
    @typing.overload
    def get_Item(self, index: int) -> ConnectionStringSettings: ...
    @typing.overload
    def get_Item(self, name: str) -> ConnectionStringSettings: ...
    def set_Item(self, index: int, value: ConnectionStringSettings) -> None: ...
    def IndexOf(self, settings: ConnectionStringSettings) -> int: ...
    def Add(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, settings: ConnectionStringSettings) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def RemoveAt(self, index: int) -> None: ...
    def Clear(self) -> None: ...

class ConnectionStringsSection(ConfigurationSection):
    def __init__(self, ) -> None: ...
    ConnectionStrings: ConnectionStringSettingsCollection
    def get_ConnectionStrings(self) -> ConnectionStringSettingsCollection: ...

class ContextInformation:
    HostingContext: typing.Any
    IsMachineLevel: bool
    def get_HostingContext(self) -> typing.Any: ...
    def get_IsMachineLevel(self) -> bool: ...
    def GetSection(self, sectionName: str) -> typing.Any: ...

class DateTimeConfigurationCollection(ConfigurationElementCollection):
    def __init__(self, ) -> None: ...
    Item: System.DateTime
    AllKeys: list[typing.Any]
    def get_Item(self, index: int) -> System.DateTime: ...
    def set_Item(self, index: int, value: System.DateTime) -> None: ...
    def get_AllKeys(self) -> list[typing.Any]: ...
    def Add(self, dateTime: System.DateTime) -> None: ...
    def Remove(self, dateTime: System.DateTime) -> None: ...
    def Clear(self) -> None: ...

class DateTimeConfigurationElement(ConfigurationElement):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, value: System.DateTime) -> None: ...
    Value: System.DateTime
    def get_Value(self) -> System.DateTime: ...
    def set_Value(self, value: System.DateTime) -> None: ...

class DeclarationUpdate(Update):
    pass

class DefaultSection(ConfigurationSection):
    def __init__(self, ) -> None: ...

class DefaultSettingValueAttribute(System.Attribute):
    def __init__(self, value: str) -> None: ...
    Value: str
    def get_Value(self) -> str: ...

class DefaultValidator(ConfigurationValidatorBase):
    def __init__(self, ) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class DefinitionUpdate(Update):
    pass

class ElementInformation:
    Properties: PropertyInformationCollection
    IsPresent: bool
    IsLocked: bool
    IsCollection: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Errors: System.Collections.ICollection
    def get_Properties(self) -> PropertyInformationCollection: ...
    def get_IsPresent(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsCollection(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Errors(self) -> System.Collections.ICollection: ...

class EmptyImpersonationContext:
    def __init__(self, ) -> None: ...
    def Dispose(self) -> None: ...

class ErrorInfoXmlDocument(System.Xml.XmlDocument):
    def __init__(self, ) -> None: ...
    def Load(self, filename: str) -> None: ...
    def CreateAttribute(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlAttribute: ...
    def CreateElement(self, prefix: str, localName: str, namespaceUri: str) -> System.Xml.XmlElement: ...
    def CreateTextNode(self, text: str) -> System.Xml.XmlText: ...
    def CreateCDataSection(self, data: str) -> System.Xml.XmlCDataSection: ...
    def CreateComment(self, data: str) -> System.Xml.XmlComment: ...
    def CreateSignificantWhitespace(self, data: str) -> System.Xml.XmlSignificantWhitespace: ...
    def CreateWhitespace(self, data: str) -> System.Xml.XmlWhitespace: ...

class ErrorsHelper:
    pass

class ExceptionAction(System.Enum, int):
    NonSpecific: ExceptionAction = ...
    Local: ExceptionAction = ...
    Global: ExceptionAction = ...

class ExceptionUtil:
    pass

class ExeConfigurationFileMap(ConfigurationFileMap):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, machineConfigFileName: str) -> None: ...
    ExeConfigFilename: str
    RoamingUserConfigFilename: str
    LocalUserConfigFilename: str
    def get_ExeConfigFilename(self) -> str: ...
    def set_ExeConfigFilename(self, value: str) -> None: ...
    def get_RoamingUserConfigFilename(self) -> str: ...
    def set_RoamingUserConfigFilename(self, value: str) -> None: ...
    def get_LocalUserConfigFilename(self) -> str: ...
    def set_LocalUserConfigFilename(self, value: str) -> None: ...
    def Clone(self) -> typing.Any: ...

class ExeContext:
    UserLevel: ConfigurationUserLevel
    ExePath: str
    def get_UserLevel(self) -> ConfigurationUserLevel: ...
    def get_ExePath(self) -> str: ...

class FactoryId:
    pass

class FactoryRecord:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def set_Filename(self, value: str) -> None: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class GenericEnumConverter(ConfigurationConverterBase):
    def __init__(self, typeEnum: System.Type) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class HandlerBase:
    pass

class IApplicationSettingsProvider:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...

class IConfigurationSectionHandler:
    def __init__(self , *args: typing.Any) -> None: ...
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class IgnoreSection(ConfigurationSection):
    def __init__(self, ) -> None: ...

class IgnoreSectionHandler:
    def __init__(self, ) -> None: ...
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class ImplicitMachineConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def GetStreamName(self, configPath: str) -> str: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...

class InfiniteIntConverter(ConfigurationConverterBase):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class InfiniteTimeSpanConverter(ConfigurationConverterBase):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class IntegerValidator(ConfigurationValidatorBase):
    @typing.overload
    def __init__(self, minValue: int, maxValue: int) -> None: ...
    @typing.overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool) -> None: ...
    @typing.overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool, resolution: int) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class IntegerValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, ) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class HResults:
    pass

class InvalidPropValue:
    pass

class IriParsingElement(ConfigurationElement):
    def __init__(self, ) -> None: ...
    Enabled: bool
    def get_Enabled(self) -> bool: ...
    def set_Enabled(self, value: bool) -> None: ...

class ISettingsProviderService:
    def __init__(self , *args: typing.Any) -> None: ...
    def GetSettingsProvider(self, property: SettingsProperty) -> SettingsProvider: ...

class KeyValueConfigurationCollection(ConfigurationElementCollection):
    def __init__(self, ) -> None: ...
    Item: KeyValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, key: str) -> KeyValueConfigurationElement: ...
    def get_AllKeys(self) -> list[str]: ...
    @typing.overload
    def Add(self, keyValue: KeyValueConfigurationElement) -> None: ...
    @typing.overload
    def Add(self, key: str, value: str) -> None: ...
    def Remove(self, key: str) -> None: ...
    def Clear(self) -> None: ...

class KeyValueConfigurationElement(ConfigurationElement):
    def __init__(self, key: str, value: str) -> None: ...
    Key: str
    Value: str
    def get_Key(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class KeyValueInternalCollection(System.Collections.Specialized.NameValueCollection):
    def __init__(self, root: AppSettingsSection) -> None: ...
    def Add(self, key: str, value: str) -> None: ...
    def Clear(self) -> None: ...
    def Remove(self, key: str) -> None: ...

class LocalFileSettingsProvider(SettingsProvider):
    def __init__(self, ) -> None: ...
    ApplicationName: str
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...
    def Initialize(self, name: str, values: System.Collections.Specialized.NameValueCollection) -> None: ...
    def GetPropertyValues(self, context: SettingsContext, properties: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, values: SettingsPropertyValueCollection) -> None: ...
    def Reset(self, context: SettingsContext) -> None: ...
    def Upgrade(self, context: SettingsContext, properties: SettingsPropertyCollection) -> None: ...
    def GetPreviousVersion(self, context: SettingsContext, property: SettingsProperty) -> SettingsPropertyValue: ...

class LocationSectionRecord:
    pass

class LocationUpdates:
    pass

class LongValidator(ConfigurationValidatorBase):
    @typing.overload
    def __init__(self, minValue: int, maxValue: int) -> None: ...
    @typing.overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool) -> None: ...
    @typing.overload
    def __init__(self, minValue: int, maxValue: int, rangeIsExclusive: bool, resolution: int) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class LongValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, ) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: int
    MaxValue: int
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> int: ...
    def set_MinValue(self, value: int) -> None: ...
    def get_MaxValue(self) -> int: ...
    def set_MaxValue(self, value: int) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class MgmtConfigurationRecord(BaseConfigurationRecord):
    pass

class NamespaceChange(System.Enum, int):
    None: NamespaceChange = ...
    Add: NamespaceChange = ...
    Remove: NamespaceChange = ...

class NameValueConfigurationCollection(ConfigurationElementCollection):
    def __init__(self, ) -> None: ...
    Item: NameValueConfigurationElement
    AllKeys: list[str]
    def get_Item(self, name: str) -> NameValueConfigurationElement: ...
    def set_Item(self, name: str, value: NameValueConfigurationElement) -> None: ...
    def get_AllKeys(self) -> list[str]: ...
    def Add(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, nameValue: NameValueConfigurationElement) -> None: ...
    @typing.overload
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class NameValueConfigurationElement(ConfigurationElement):
    def __init__(self, name: str, value: str) -> None: ...
    Name: str
    Value: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> str: ...
    def set_Value(self, value: str) -> None: ...

class NameValueFileSectionHandler:
    def __init__(self, ) -> None: ...
    def Create(self, parent: typing.Any, configContext: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class NameValueSectionHandler:
    def __init__(self, ) -> None: ...
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class OverrideMode(System.Enum, int):
    Inherit: OverrideMode = ...
    Allow: OverrideMode = ...
    Deny: OverrideMode = ...

class PositiveTimeSpanValidator(ConfigurationValidatorBase):
    def __init__(self, ) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class PositiveTimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, ) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...

class PrivilegedConfigurationManager:
    pass

class PropertyInformation:
    Name: str
    Value: typing.Any
    DefaultValue: typing.Any
    ValueOrigin: PropertyValueOrigin
    IsModified: bool
    IsKey: bool
    IsRequired: bool
    IsLocked: bool
    Source: str
    LineNumber: int
    Type: System.Type
    Validator: ConfigurationValidatorBase
    Converter: System.ComponentModel.TypeConverter
    Description: str
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def set_Value(self, value: typing.Any) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def get_ValueOrigin(self) -> PropertyValueOrigin: ...
    def get_IsModified(self) -> bool: ...
    def get_IsKey(self) -> bool: ...
    def get_IsRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_Source(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def get_Type(self) -> System.Type: ...
    def get_Validator(self) -> ConfigurationValidatorBase: ...
    def get_Converter(self) -> System.ComponentModel.TypeConverter: ...
    def get_Description(self) -> str: ...

class PropertyInformationCollection(System.Collections.Specialized.NameObjectCollectionBase):
    Item: PropertyInformation
    def get_Item(self, propertyName: str) -> PropertyInformation: ...
    def CopyTo(self, array: list[PropertyInformation], index: int) -> None: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

class PropertySourceInfo:
    pass

class PropertyValueOrigin(System.Enum, int):
    Default: PropertyValueOrigin = ...
    Inherited: PropertyValueOrigin = ...
    SetHere: PropertyValueOrigin = ...

class ProtectedConfiguration:
    RsaProviderName: str
    DataProtectionProviderName: str
    ProtectedDataSectionName: str
    Providers: ProtectedConfigurationProviderCollection
    DefaultProvider: str
    @staticmethod
    def get_Providers() -> ProtectedConfigurationProviderCollection: ...
    @staticmethod
    def get_DefaultProvider() -> str: ...

class ProtectedConfigurationProvider(System.Configuration.Provider.ProviderBase):
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...

class ProtectedConfigurationProviderCollection(System.Configuration.Provider.ProviderCollection):
    def __init__(self, ) -> None: ...
    Item: ProtectedConfigurationProvider
    def get_Item(self, name: str) -> ProtectedConfigurationProvider: ...
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...

class ProtectedConfigurationSection(ConfigurationSection):
    def __init__(self, ) -> None: ...
    Providers: ProviderSettingsCollection
    DefaultProvider: str
    def get_Providers(self) -> ProviderSettingsCollection: ...
    def get_DefaultProvider(self) -> str: ...
    def set_DefaultProvider(self, value: str) -> None: ...

class ProtectedProviderSettings(ConfigurationElement):
    def __init__(self, ) -> None: ...
    Providers: ProviderSettingsCollection
    def get_Providers(self) -> ProviderSettingsCollection: ...

class ProviderSettings(ConfigurationElement):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, name: str, type: str) -> None: ...
    Name: str
    Type: str
    Parameters: System.Collections.Specialized.NameValueCollection
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_Parameters(self) -> System.Collections.Specialized.NameValueCollection: ...

class ProviderSettingsCollection(ConfigurationElementCollection):
    def __init__(self, ) -> None: ...
    Item: ProviderSettings
    Item: ProviderSettings
    @typing.overload
    def get_Item(self, key: str) -> ProviderSettings: ...
    @typing.overload
    def get_Item(self, index: int) -> ProviderSettings: ...
    def set_Item(self, index: int, value: ProviderSettings) -> None: ...
    def Add(self, provider: ProviderSettings) -> None: ...
    def Remove(self, name: str) -> None: ...
    def Clear(self) -> None: ...

class ReadOnlyNameValueCollection(System.Collections.Specialized.NameValueCollection):
    pass

class RegexStringValidator(ConfigurationValidatorBase):
    def __init__(self, regex: str) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class RegexStringValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, regex: str) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    Regex: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_Regex(self) -> str: ...

class RsaProtectedConfigurationProvider(ProtectedConfigurationProvider):
    def __init__(self, ) -> None: ...
    KeyContainerName: str
    CspProviderName: str
    UseMachineContainer: bool
    UseOAEP: bool
    UseFIPS: bool
    RsaPublicKey: System.Security.Cryptography.RSAParameters
    def Decrypt(self, encryptedNode: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def Encrypt(self, node: System.Xml.XmlNode) -> System.Xml.XmlNode: ...
    def AddKey(self, keySize: int, exportable: bool) -> None: ...
    def DeleteKey(self) -> None: ...
    def ImportKey(self, xmlFileName: str, exportable: bool) -> None: ...
    def ExportKey(self, xmlFileName: str, includePrivateParameters: bool) -> None: ...
    def get_KeyContainerName(self) -> str: ...
    def get_CspProviderName(self) -> str: ...
    def get_UseMachineContainer(self) -> bool: ...
    def get_UseOAEP(self) -> bool: ...
    def get_UseFIPS(self) -> bool: ...
    def get_RsaPublicKey(self) -> System.Security.Cryptography.RSAParameters: ...

class RuntimeConfigurationRecord(BaseConfigurationRecord):
    pass

class SchemeSettingElement(ConfigurationElement):
    def __init__(self, ) -> None: ...
    Name: str
    GenericUriParserOptions: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_GenericUriParserOptions(self) -> System.GenericUriParserOptions: ...

class SchemeSettingElementCollection(ConfigurationElementCollection):
    def __init__(self, ) -> None: ...
    CollectionType: ConfigurationElementCollectionType
    Item: SchemeSettingElement
    Item: SchemeSettingElement
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    @typing.overload
    def get_Item(self, index: int) -> SchemeSettingElement: ...
    @typing.overload
    def get_Item(self, name: str) -> SchemeSettingElement: ...
    def IndexOf(self, element: SchemeSettingElement) -> int: ...

class SchemeSettingInternal:
    def __init__(self, name: str, options: System.GenericUriParserOptions) -> None: ...
    Name: str
    Options: System.GenericUriParserOptions
    def get_Name(self) -> str: ...
    def get_Options(self) -> System.GenericUriParserOptions: ...

class SectionInformation:
    SectionName: str
    Name: str
    AllowDefinition: ConfigurationAllowDefinition
    AllowExeDefinition: ConfigurationAllowExeDefinition
    OverrideModeDefault: OverrideMode
    AllowLocation: bool
    AllowOverride: bool
    OverrideMode: OverrideMode
    OverrideModeEffective: OverrideMode
    ConfigSource: str
    InheritInChildApplications: bool
    IsDeclared: bool
    IsDeclarationRequired: bool
    IsLocked: bool
    IsProtected: bool
    ProtectionProvider: ProtectedConfigurationProvider
    RestartOnExternalChanges: bool
    RequirePermission: bool
    Type: str
    ForceSave: bool
    def get_SectionName(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_AllowDefinition(self) -> ConfigurationAllowDefinition: ...
    def set_AllowDefinition(self, value: ConfigurationAllowDefinition) -> None: ...
    def get_AllowExeDefinition(self) -> ConfigurationAllowExeDefinition: ...
    def set_AllowExeDefinition(self, value: ConfigurationAllowExeDefinition) -> None: ...
    def get_OverrideModeDefault(self) -> OverrideMode: ...
    def set_OverrideModeDefault(self, value: OverrideMode) -> None: ...
    def get_AllowLocation(self) -> bool: ...
    def set_AllowLocation(self, value: bool) -> None: ...
    def get_AllowOverride(self) -> bool: ...
    def set_AllowOverride(self, value: bool) -> None: ...
    def get_OverrideMode(self) -> OverrideMode: ...
    def set_OverrideMode(self, value: OverrideMode) -> None: ...
    def get_OverrideModeEffective(self) -> OverrideMode: ...
    def get_ConfigSource(self) -> str: ...
    def set_ConfigSource(self, value: str) -> None: ...
    def get_InheritInChildApplications(self) -> bool: ...
    def set_InheritInChildApplications(self, value: bool) -> None: ...
    def get_IsDeclared(self) -> bool: ...
    def get_IsDeclarationRequired(self) -> bool: ...
    def get_IsLocked(self) -> bool: ...
    def get_IsProtected(self) -> bool: ...
    def get_ProtectionProvider(self) -> ProtectedConfigurationProvider: ...
    def get_RestartOnExternalChanges(self) -> bool: ...
    def set_RestartOnExternalChanges(self, value: bool) -> None: ...
    def get_RequirePermission(self) -> bool: ...
    def set_RequirePermission(self, value: bool) -> None: ...
    def get_Type(self) -> str: ...
    def set_Type(self, value: str) -> None: ...
    def get_ForceSave(self) -> bool: ...
    def set_ForceSave(self, value: bool) -> None: ...
    @typing.overload
    def ForceDeclaration(self) -> None: ...
    @typing.overload
    def ForceDeclaration(self, force: bool) -> None: ...
    def ProtectSection(self, protectionProvider: str) -> None: ...
    def UnprotectSection(self) -> None: ...
    def GetParentSection(self) -> ConfigurationSection: ...
    def GetRawXml(self) -> str: ...
    def SetRawXml(self, rawXml: str) -> None: ...
    def RevertToParent(self) -> None: ...

class SectionInput:
    pass

class SectionRecord:
    pass

class SectionUpdates:
    pass

class SectionXmlInfo:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def set_LineNumber(self, value: int) -> None: ...

class SettingAttribute(System.Attribute):
    def __init__(self, ) -> None: ...

class SettingChangingEventArgs(System.ComponentModel.CancelEventArgs):
    def __init__(self, settingName: str, settingClass: str, settingKey: str, newValue: typing.Any, cancel: bool) -> None: ...
    NewValue: typing.Any
    SettingClass: str
    SettingName: str
    SettingKey: str
    def get_NewValue(self) -> typing.Any: ...
    def get_SettingClass(self) -> str: ...
    def get_SettingName(self) -> str: ...
    def get_SettingKey(self) -> str: ...

class SettingChangingEventHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: SettingChangingEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingChangingEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingElement(ConfigurationElement):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, name: str, serializeAs: SettingsSerializeAs) -> None: ...
    Name: str
    SerializeAs: SettingsSerializeAs
    Value: SettingValueElement
    def Equals(self, settings: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Value(self) -> SettingValueElement: ...
    def set_Value(self, value: SettingValueElement) -> None: ...

class SettingElementCollection(ConfigurationElementCollection):
    def __init__(self, ) -> None: ...
    CollectionType: ConfigurationElementCollectionType
    def get_CollectionType(self) -> ConfigurationElementCollectionType: ...
    def Get(self, elementKey: str) -> SettingElement: ...
    def Add(self, element: SettingElement) -> None: ...
    def Remove(self, element: SettingElement) -> None: ...
    def Clear(self) -> None: ...

class SettingsAttributeDictionary(System.Collections.Hashtable):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, attributes: SettingsAttributeDictionary) -> None: ...

class SettingsBase:
    Item: typing.Any
    Properties: SettingsPropertyCollection
    Providers: SettingsProviderCollection
    PropertyValues: SettingsPropertyValueCollection
    Context: SettingsContext
    IsSynchronized: bool
    def get_Item(self, propertyName: str) -> typing.Any: ...
    def set_Item(self, propertyName: str, value: typing.Any) -> None: ...
    def Initialize(self, context: SettingsContext, properties: SettingsPropertyCollection, providers: SettingsProviderCollection) -> None: ...
    def Save(self) -> None: ...
    def get_Properties(self) -> SettingsPropertyCollection: ...
    def get_Providers(self) -> SettingsProviderCollection: ...
    def get_PropertyValues(self) -> SettingsPropertyValueCollection: ...
    def get_Context(self) -> SettingsContext: ...
    @staticmethod
    def Synchronized(settingsBase: SettingsBase) -> SettingsBase: ...
    def get_IsSynchronized(self) -> bool: ...

class SettingsContext(System.Collections.Hashtable):
    def __init__(self, ) -> None: ...

class SettingsDescriptionAttribute(System.Attribute):
    def __init__(self, description: str) -> None: ...
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupDescriptionAttribute(System.Attribute):
    def __init__(self, description: str) -> None: ...
    Description: str
    def get_Description(self) -> str: ...

class SettingsGroupNameAttribute(System.Attribute):
    def __init__(self, groupName: str) -> None: ...
    GroupName: str
    def get_GroupName(self) -> str: ...

class SettingsLoadedEventArgs(System.EventArgs):
    def __init__(self, provider: SettingsProvider) -> None: ...
    Provider: SettingsProvider
    def get_Provider(self) -> SettingsProvider: ...

class SettingsLoadedEventHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: SettingsLoadedEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: SettingsLoadedEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsManageability(System.Enum, int):
    Roaming: SettingsManageability = ...

class SettingsManageabilityAttribute(System.Attribute):
    def __init__(self, manageability: SettingsManageability) -> None: ...
    Manageability: SettingsManageability
    def get_Manageability(self) -> SettingsManageability: ...

class SettingsPropertyCollection:
    def __init__(self, ) -> None: ...
    Item: SettingsProperty
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsProperty) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsProperty: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyIsReadOnlyException(System.Exception):
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...

class SettingsPropertyNotFoundException(System.Exception):
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...

class SettingsPropertyValueCollection:
    def __init__(self, ) -> None: ...
    Item: SettingsPropertyValue
    Count: int
    IsSynchronized: bool
    SyncRoot: typing.Any
    def Add(self, property: SettingsPropertyValue) -> None: ...
    def Remove(self, name: str) -> None: ...
    def get_Item(self, name: str) -> SettingsPropertyValue: ...
    def GetEnumerator(self) -> System.Collections.IEnumerator: ...
    def Clone(self) -> typing.Any: ...
    def SetReadOnly(self) -> None: ...
    def Clear(self) -> None: ...
    def get_Count(self) -> int: ...
    def get_IsSynchronized(self) -> bool: ...
    def get_SyncRoot(self) -> typing.Any: ...
    def CopyTo(self, array: System.Array, index: int) -> None: ...

class SettingsPropertyWrongTypeException(System.Exception):
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str, innerException: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...

class SettingsProvider(System.Configuration.Provider.ProviderBase):
    ApplicationName: str
    def GetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyCollection) -> SettingsPropertyValueCollection: ...
    def SetPropertyValues(self, context: SettingsContext, collection: SettingsPropertyValueCollection) -> None: ...
    def get_ApplicationName(self) -> str: ...
    def set_ApplicationName(self, value: str) -> None: ...

class SettingsProviderAttribute(System.Attribute):
    @typing.overload
    def __init__(self, providerTypeName: str) -> None: ...
    @typing.overload
    def __init__(self, providerType: System.Type) -> None: ...
    ProviderTypeName: str
    def get_ProviderTypeName(self) -> str: ...

class SettingsProviderCollection(System.Configuration.Provider.ProviderCollection):
    def __init__(self, ) -> None: ...
    Item: SettingsProvider
    def Add(self, provider: System.Configuration.Provider.ProviderBase) -> None: ...
    def get_Item(self, name: str) -> SettingsProvider: ...

class SettingsSavingEventHandler(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs) -> None: ...
    def BeginInvoke(self, sender: typing.Any, e: System.ComponentModel.CancelEventArgs, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class SettingsSerializeAsAttribute(System.Attribute):
    def __init__(self, serializeAs: SettingsSerializeAs) -> None: ...
    SerializeAs: SettingsSerializeAs
    def get_SerializeAs(self) -> SettingsSerializeAs: ...

class SettingValueElement(ConfigurationElement):
    def __init__(self, ) -> None: ...
    ValueXml: System.Xml.XmlNode
    def get_ValueXml(self) -> System.Xml.XmlNode: ...
    def set_ValueXml(self, value: System.Xml.XmlNode) -> None: ...
    def Equals(self, settingValue: typing.Any) -> bool: ...
    def GetHashCode(self) -> int: ...

class SingleTagSectionHandler:
    def __init__(self, ) -> None: ...
    def Create(self, parent: typing.Any, context: typing.Any, section: System.Xml.XmlNode) -> typing.Any: ...

class SpecialSetting(System.Enum, int):
    ConnectionString: SpecialSetting = ...
    WebServiceUrl: SpecialSetting = ...

class SpecialSettingAttribute(System.Attribute):
    def __init__(self, specialSetting: SpecialSetting) -> None: ...
    SpecialSetting: SpecialSetting
    def get_SpecialSetting(self) -> SpecialSetting: ...

class StreamInfo:
    pass

class StreamUpdate:
    pass

class CommaDelimitedStringCollection(System.Collections.Specialized.StringCollection):
    def __init__(self, ) -> None: ...
    IsModified: bool
    IsReadOnly: bool
    Item: str
    def get_IsModified(self) -> bool: ...
    def get_IsReadOnly(self) -> bool: ...
    def get_Item(self, index: int) -> str: ...
    def set_Item(self, index: int, value: str) -> None: ...
    def ToString(self) -> str: ...
    def SetReadOnly(self) -> None: ...
    def Add(self, value: str) -> None: ...
    def AddRange(self, range: list[str]) -> None: ...
    def Clear(self) -> None: ...
    def Insert(self, index: int, value: str) -> None: ...
    def Remove(self, value: str) -> None: ...
    @staticmethod
    def Clone() -> CommaDelimitedStringCollection: ...

class StringUtil:
    pass

class StringValidator(ConfigurationValidatorBase):
    @typing.overload
    def __init__(self, minLength: int) -> None: ...
    @typing.overload
    def __init__(self, minLength: int, maxLength: int) -> None: ...
    @typing.overload
    def __init__(self, minLength: int, maxLength: int, invalidCharacters: str) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class StringValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, ) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    MinLength: int
    MaxLength: int
    InvalidCharacters: str
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinLength(self) -> int: ...
    def set_MinLength(self, value: int) -> None: ...
    def get_MaxLength(self) -> int: ...
    def set_MaxLength(self, value: int) -> None: ...
    def get_InvalidCharacters(self) -> str: ...
    def set_InvalidCharacters(self, value: str) -> None: ...

class SubclassTypeValidator(ConfigurationValidatorBase):
    def __init__(self, baseClass: System.Type) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class SubclassTypeValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, baseClass: System.Type) -> None: ...
    ValidatorInstance: ConfigurationValidatorBase
    BaseClass: System.Type
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_BaseClass(self) -> System.Type: ...

class TimeSpanMinutesConverter(ConfigurationConverterBase):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanMinutesOrInfiniteConverter(TimeSpanMinutesConverter):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsConverter(ConfigurationConverterBase):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanSecondsOrInfiniteConverter(TimeSpanSecondsConverter):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TimeSpanValidator(ConfigurationValidatorBase):
    @typing.overload
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan) -> None: ...
    @typing.overload
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan, rangeIsExclusive: bool) -> None: ...
    @typing.overload
    def __init__(self, minValue: System.TimeSpan, maxValue: System.TimeSpan, rangeIsExclusive: bool, resolutionInSeconds: int) -> None: ...
    def CanValidate(self, type: System.Type) -> bool: ...
    def Validate(self, value: typing.Any) -> None: ...

class TimeSpanValidatorAttribute(ConfigurationValidatorAttribute):
    def __init__(self, ) -> None: ...
    TimeSpanMinValue: str
    TimeSpanMaxValue: str
    ValidatorInstance: ConfigurationValidatorBase
    MinValue: System.TimeSpan
    MaxValue: System.TimeSpan
    MinValueString: str
    MaxValueString: str
    ExcludeRange: bool
    def get_ValidatorInstance(self) -> ConfigurationValidatorBase: ...
    def get_MinValue(self) -> System.TimeSpan: ...
    def get_MaxValue(self) -> System.TimeSpan: ...
    def get_MinValueString(self) -> str: ...
    def set_MinValueString(self, value: str) -> None: ...
    def get_MaxValueString(self) -> str: ...
    def set_MaxValueString(self, value: str) -> None: ...
    def get_ExcludeRange(self) -> bool: ...
    def set_ExcludeRange(self, value: bool) -> None: ...

class TypeNameConverter(ConfigurationConverterBase):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class TypeUtil:
    pass

class Update:
    pass

class UpdateConfigHost(System.Configuration.Internal.DelegatingConfigHost):
    def GetStreamVersion(self, streamName: str) -> typing.Any: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...
    def IsConfigRecordRequired(self, configPath: str) -> bool: ...
    def DeleteStream(self, streamName: str) -> None: ...
    def IsFile(self, streamName: str) -> bool: ...

class UriSection(ConfigurationSection):
    def __init__(self, ) -> None: ...
    Idn: IdnElement
    IriParsing: IriParsingElement
    SchemeSettings: SchemeSettingElementCollection
    def get_Idn(self) -> IdnElement: ...
    def get_IriParsing(self) -> IriParsingElement: ...
    def get_SchemeSettings(self) -> SchemeSettingElementCollection: ...

class UrlPath:
    pass

class UserScopedSettingAttribute(SettingAttribute):
    def __init__(self, ) -> None: ...

class UserSettingsGroup(ConfigurationSectionGroup):
    def __init__(self, ) -> None: ...

class ValidatorCallback(System.MulticastDelegate):
    def __init__(self, object: typing.Any, method: System.IntPtr) -> None: ...
    def Invoke(self, value: typing.Any) -> None: ...
    def BeginInvoke(self, value: typing.Any, callback: System.AsyncCallback, object: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> None: ...

class ValidatorUtils:
    @staticmethod
    def HelperParamValidation(value: typing.Any, allowedType: System.Type) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: T, min: T, max: T, resolution: T, exclusiveRange: bool) -> None: ...
    @staticmethod
    @typing.overload
    def ValidateScalar(value: System.TimeSpan, min: System.TimeSpan, max: System.TimeSpan, resolutionInSeconds: int, exclusiveRange: bool) -> None: ...

class WhiteSpaceTrimStringConverter(ConfigurationConverterBase):
    def __init__(self, ) -> None: ...
    def ConvertTo(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, value: typing.Any, type: System.Type) -> typing.Any: ...
    def ConvertFrom(self, ctx: System.ComponentModel.ITypeDescriptorContext, ci: System.Globalization.CultureInfo, data: typing.Any) -> typing.Any: ...

class XmlUtil:
    Filename: str
    LineNumber: int
    def get_Filename(self) -> str: ...
    def get_LineNumber(self) -> int: ...
    def Dispose(self) -> None: ...

class XmlUtilWriter:
    pass

class SettingsProperty:
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, name: str, propertyType: System.Type, provider: SettingsProvider, isReadOnly: bool, defaultValue: typing.Any, serializeAs: SettingsSerializeAs, attributes: SettingsAttributeDictionary, throwOnErrorDeserializing: bool, throwOnErrorSerializing: bool) -> None: ...
    @typing.overload
    def __init__(self, propertyToCopy: SettingsProperty) -> None: ...
    Name: str
    IsReadOnly: bool
    DefaultValue: typing.Any
    PropertyType: System.Type
    SerializeAs: SettingsSerializeAs
    Provider: SettingsProvider
    Attributes: SettingsAttributeDictionary
    ThrowOnErrorDeserializing: bool
    ThrowOnErrorSerializing: bool
    def get_Name(self) -> str: ...
    def set_Name(self, value: str) -> None: ...
    def get_IsReadOnly(self) -> bool: ...
    def set_IsReadOnly(self, value: bool) -> None: ...
    def get_DefaultValue(self) -> typing.Any: ...
    def set_DefaultValue(self, value: typing.Any) -> None: ...
    def get_PropertyType(self) -> System.Type: ...
    def set_PropertyType(self, value: System.Type) -> None: ...
    def get_SerializeAs(self) -> SettingsSerializeAs: ...
    def set_SerializeAs(self, value: SettingsSerializeAs) -> None: ...
    def get_Provider(self) -> SettingsProvider: ...
    def set_Provider(self, value: SettingsProvider) -> None: ...
    def get_Attributes(self) -> SettingsAttributeDictionary: ...
    def get_ThrowOnErrorDeserializing(self) -> bool: ...
    def set_ThrowOnErrorDeserializing(self, value: bool) -> None: ...
    def get_ThrowOnErrorSerializing(self) -> bool: ...
    def set_ThrowOnErrorSerializing(self, value: bool) -> None: ...

class SettingsPropertyValue:
    def __init__(self, property: SettingsProperty) -> None: ...
    Name: str
    IsDirty: bool
    Property: SettingsProperty
    UsingDefaultValue: bool
    Deserialized: bool
    PropertyValue: typing.Any
    SerializedValue: typing.Any
    def get_Name(self) -> str: ...
    def get_IsDirty(self) -> bool: ...
    def set_IsDirty(self, value: bool) -> None: ...
    def get_Property(self) -> SettingsProperty: ...
    def get_UsingDefaultValue(self) -> bool: ...
    def get_Deserialized(self) -> bool: ...
    def set_Deserialized(self, value: bool) -> None: ...
    def get_PropertyValue(self) -> typing.Any: ...
    def set_PropertyValue(self, value: typing.Any) -> None: ...
    def get_SerializedValue(self) -> typing.Any: ...
    def set_SerializedValue(self, value: typing.Any) -> None: ...

class SettingsSerializeAs(System.Enum, int):
    String: SettingsSerializeAs = ...
    Xml: SettingsSerializeAs = ...
    Binary: SettingsSerializeAs = ...
    ProviderSpecific: SettingsSerializeAs = ...

class NoSettingsVersionUpgradeAttribute(System.Attribute):
    def __init__(self, ) -> None: ...

class UriIdnScopeTypeConverter(System.ComponentModel.TypeConverter):
    def __init__(self, ) -> None: ...
    def CanConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, sourceType: System.Type) -> bool: ...
    def ConvertFrom(self, context: System.ComponentModel.ITypeDescriptorContext, culture: System.Globalization.CultureInfo, value: typing.Any) -> typing.Any: ...

class ConfigRecordStreamInfo:
    pass

class IndirectLocationInputComparer:
    def __init__(self, ) -> None: ...
    def Compare(self, x: SectionInput, y: SectionInput) -> int: ...

class ClientSettingsConfigurationHost(System.Configuration.Internal.DelegatingConfigHost):
    def Init(self, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitParams: list[typing.Any]) -> None: ...
    def InitForConfiguration(self, locationSubPath: System.String&, configPath: System.String&, locationConfigPath: System.String&, configRoot: System.Configuration.Internal.IInternalConfigRoot, hostInitConfigurationParams: list[typing.Any]) -> None: ...
    def OpenStreamForRead(self, streamName: str) -> System.IO.Stream: ...
    def OpenStreamForWrite(self, streamName: str, templateStreamName: str, writeContext: System.Object&) -> System.IO.Stream: ...
    def WriteCompleted(self, streamName: str, success: bool, writeContext: typing.Any) -> None: ...

class InheritedType(System.Enum, int):
    InNeither: InheritedType = ...
    InParent: InheritedType = ...
    InSelf: InheritedType = ...
    InBothSame: InheritedType = ...
    InBothDiff: InheritedType = ...
    InBothCopyNoRemove: InheritedType = ...

class EntryType(System.Enum, int):
    Inherited: EntryType = ...
    Replaced: EntryType = ...
    Removed: EntryType = ...
    Added: EntryType = ...

class Entry:
    pass

class Enumerator:
    pass

class <>O:
    <0>__GetFilenameFromMachineConfigFilePath: list[str]

class <>c__DisplayClass6_0:
    def __init__(self, ) -> None: ...
    value: str

class InitState(System.Enum, int):
    NotStarted: InitState = ...
    Started: InitState = ...
    Usable: InitState = ...
    Completed: InitState = ...

class <GetEnumerator>d__15:
    def __init__(self, <>1__state: int) -> None: ...
    <>4__this: ConfigurationSectionCollection

class <GetEnumerator>d__14:
    def __init__(self, <>1__state: int) -> None: ...
    <>4__this: ConfigurationSectionGroupCollection

class EmptyCollection:
    pass

class ConfigurationElementsCollection:
    pass

class InvalidValuesCollection:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class XmlEscaper:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class <GetEnumerator>d__6:
    def __init__(self, <>1__state: int) -> None: ...
    <>4__this: PropertyInformationCollection

class RuntimeConfigurationFactory:
    pass

class ValidationFlags(System.Enum, int):
    None: ValidationFlags = ...
    ExclusiveRange: ValidationFlags = ...

class StreamWriterCheckpoint:
    pass

class EmptyCollectionEnumerator:
    def __init__(self, ) -> None: ...

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>4__this: ConfigurationElementsCollection

class <System-Collections-IEnumerable-GetEnumerator>d__2:
    def __init__(self, <>1__state: int) -> None: ...
    <>4__this: InvalidValuesCollection

