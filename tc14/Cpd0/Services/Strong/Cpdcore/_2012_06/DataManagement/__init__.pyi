import Cpd0.Services.Strong.Cpdcore._2011_06.DataManagement
import System
import System.Collections
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Client.Model.Strong
import typing

class CreateOrUpdateDesignControlElementOutput:
    """
    Design control element output data structure
    """
    def __init__(self, ) -> None: ...
    DesignControlElement: Teamcenter.Soa.Client.Model.Strong.Cpd0DesignControlElement
    """Design control element created"""
    ShapeDesign: Cpd0.Services.Strong.Cpdcore._2011_06.DataManagement.NewShapeDesignData
    """New ShapeDesignRevision data of the DesignControlElement."""
    CsIdMap: System.Collections.Hashtable
    """
            map of added controlled elements to their copy-stable ID
            
csIdMap is object of BoToStringMap2.
            
BoToStringMap2 parameter : Map of(Teamcenter::BusinessObject, std::string )
            """

class CreateOrUpdateDesignControlElementsResponse2:
    """
    
            Response to <tt>createOrUpdateDesignControlElements2</tt>. It contains <tt>ClientIDToDesignControlElementOutputMap</tt>
            which is a map of input client ID to <tt>CreateOrUpdateDesignControlElementOutput</tt>.
            The service data contains a list of added, updated, or deleted objects and it also
            contains a list of any errors which occurred within the call.
            
    """
    def __init__(self, ) -> None: ...
    ClientIdToDCEOutputMap: System.Collections.Hashtable
    """
            Map of client ID to corresponding CreateOrUpdateDesignControlElementOutput.
            
clientIdToDCEOutputMap

            parameter: Map of  (std::string, CreateOrUpdateDesignControlElementOutput
            )
            """
    ServiceData: Teamcenter.Soa.Client.Model.ServiceData
    """
            Contains list of added, updated, or deleted objects.  Also contains list of any errors
            which occurred within the call.
            """

class SubstituteAsReuseDesignElementResponse:
    """
    Response from substituteAsReuseDesignElement operation
    """
    def __init__(self, ) -> None: ...
    ClientIDMap: System.Collections.Hashtable
    """
            This is a map of client id to corresponding object (Cpd0DesignElement) that was substituted.
            
clientIDMap is object of StringToBoMap2.
            
clientIDMap parameter : Map of (std:string,Teamcenter:BusinessObject)
            """
    SubordinateElements: System.Collections.Hashtable
    """
            Map for returned subordinates. Key is reuse design component and value is vector
            of subordinates design components returned for the reuse design component. Number
            of subordinates returned is goverened by the levelsOfSubordinatesToReturn value specified
            on input for each reuse design component.
            
subordibateElements object of BoToBoMap2

subordibateElements parameters : Map of (Teamcenter:Business Object,Teamcenter:Business Object[])
            """
    ServiceData: Teamcenter.Soa.Client.Model.ServiceData
    """This contains added and updated objects. It also contains partial errors, if any."""

class DataManagement:
    """
    Interface DataManagement
    """
    def __init__(self , *args: typing.Any) -> None: ...
    def CreateOrUpdateDesignControlElements2(self, ElementInfos: list[Cpd0.Services.Strong.Cpdcore._2011_06.DataManagement.DesignControlElementsInfo]) -> CreateOrUpdateDesignControlElementsResponse2:
        """    
             Creates or updates a set of design control element (Cpd0DesignControlElement)
             objects and their relations to the design components and design features that they
             conntrol.  Design control elements are used to represent welds seams (made up of
             multiple individual welds), and mechanical routings (such as piping system) which
             follow a path and are manifested by multiple design components and design features
             (welds) that make up the physical implementation of the routing.   Design control
             elements are related to the design components and design features they control via
             a relation (Cpd0ControlModel).     Using this API, applications can create
             and update design control element (and relation) information in bulk, giving better
             through put that might otherwise be achieved using standard object create and update
             API. Cpd0ControlModel relationships have a copy-stable ID which is unique
             within the scope of the design feature.  The copy-stable ID can be specified on create;
             if not specified, they will be automatically generated by Teamcenter.  As their name
             suggests, when a design feature is copied the connected element relationships are
             also copied and the copy-stable ID of the copied relations remains the same.  The
             copy-stable ID is used by external applications, like CAD, to correlate internal
             data to the related objects.@param elementInfos The input set of information describing
             the design control elements to be created or updated.@return response containing
             maps of input information to the created/updated objects (see description of CreateOrUpdateDesignControlElementsResponse
             for more details).
             

Use Cases:

             This API supports the design control element authoring use cases. Design control
             elements (weld seams, mechanical routings, etc.) are authored by users in a CAD application
             (versus being authored in Teamcenter RAC UI).  When the user directs the CAD system
             to save their session data, the CAD tool will invoke this API to populate or update
             the design control element information in the Teamcenter database.
             
             Note: standard delete API are used to destroy or obsolete design control elements
             that are no longer required.
             
             Use Case 1: Creation of new design control element
             
             The following operation can be used for creating design control element (e.g. weld
             seams and mechanical routings) in a product design.
             
             Design control elements are created always in the context of a product design (Cpd0CollaborativeDesign).
             Generally, in a production environment, a product design will be created ahead of
             time by an authorized user using the Collaborative Product Development application
             in Teamcenter RAC UI.  Applications will generally find an existing product design,
             using the Product Design saved query (provided OOTB in Teamcenter) or through a custom
             query.
             
             However, for testing purposes, an application may wish to create a product design
             programmatically. To do this the createObjects operation should be used.
             
             New design control elements can be created using operation createOrUpdateDesignControlElements.
             The application specifies the business object type for each new design control element,
             and sets the product design (found or created previously) as its modelObject.  Additional
             property and controlled element information is given and the operation invoked.
             
             Design control elements have a ID which is unique within the system.  Applications
             can assign their own value using the cpd0design_control_element_id property. If this
             value is not specified in the input to createOrUpdateDeisgnControlElements, then
             Teamcenter will automatically assign an ID when it creates a new design control element.
             
             During the operation, the server creates and saves the new design control elements
             in context of the product design.  It also creates and saves the relationship(Cpd0ControlModel)
             between the design control element and the design components and design features
             it controls. The operation returns the new objects to the caller.
             

             Use Case 2: Update of existing design control element
             
             The following operation can be used for updating existing design control element
             (e.g. weld seams and mechanical routings) in a product design.
             
             Design control elements are found by the application through search or by navigating
             from a design component (Cpd0DesignElement) or design feature (Cpd0DesignFeature)
             via the control model (Cpd0ControlModel) relation.  Note: the design control element
             is always the primary object of the Cpd0ConnectedElement relation and the design
             component or design feature is always the secondary object.
             
             Existing design control elements can be updated using operation createOrUpdateDesignControlElements.
             The application specifies which design control elements are to be updated.  Note:
             the business object type and product design (modelObject) are not set on the input
             because they are already known to the design control element and cannot be changed.
             The application sets changed property values and specifies connected element information
             for the feature.
             
             During the operation, the server updates and saves the design control elements and
             adds or removes Cpd0ConnectedElement relations to be consistent with the input.
             

Dependencies:

             autoAssignValues, getCreateDesc
             

Teamcenter Component:

             Collaborative Product Development - Defines data management of 4GD application objects
             (Design Components,Design Features,Design Control Elements),defines operations to
             create and manage Subsets from Product Design and navigation operations for Workset
             and Subset content.
             
        :param ElementInfos: 
                         The input set of information describing the design control elements to be created
                         or updated.
             
        :return: The response contains a map of input caller specified client ID values and the corresponding
             <tt>CreateOrUpdateDesignControlElementOutput</tt>. The service data contains
             a list of added, updated, or deleted objects and it also contains a list of any errors
             which occurred within the call.  See the description of <tt>CreateOrUpdateDesignControlElementsResponse2</tt>
             for additional details.
        """
        ...
    def SubstituteAsReuseDesignElement2(self, SubstituteInfos: list[Cpd0.Services.Strong.Cpdcore._2011_06.DataManagement.ReuseDesignElementInfo]) -> SubstituteAsReuseDesignElementResponse:
        """    
             Transforms an existing reuse or promissory design components ( Cpd0DesignElement
             or its subtypes) to shape design components ( Cpd0DesignElement or its subtypes)
             .Substitute operation doesnt replace the existing design component with a new one.
             The existing design component gets morphed. The category is changed from reuse (or
             promissory) to shape. In other words, the object identity (UID) and the cpd0design_element_id
             property value on Design Component remain the same after the substitution.
             

Use Cases:

             Use Case 1: This operation can be used when a promissory Design Component is to be
             transformed into a shape Design Component.
             
             Use Case 2: This operation can be used when a reuse Design Component is to be transformed
             into a shape Design Component. In this case any of its subordinate Design Components
             are discarded as part of the substitution.
             


Dependencies:

             createOrUpdateDesignControlElements2
             

Teamcenter Component:

             Collaborative Product Development - Defines data management of 4GD application objects
             (Design Components,Design Features,Design Control Elements),defines operations to
             create and manage Subsets from Product Design and navigation operations for Workset
             and Subset content.
             
        :param SubstituteInfos: 
                         A vector of ReuseDesignElementInfo structures. Each structure specifies the Design
                         Component to be substituted. Each would have inputs on Item Revision to be realized
                         for substitution.
             
        :return: SubstituteAsShapeDesignElementResponse contains a map of client id (provided in input)
             to the Shape Design Component. It has a map of Shape Design Components to the corresponding
             Shape Design and Shape Design Revision objects. It has Service Data with created/updated/deleted
             objects along with any partial errors.
        """
        ...

