import Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement
import Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement
import Cfg0.Services.Internal.Strong.Configurator._2015_03.ConfiguratorManagement
import Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement
import Cfg0.Services.Internal.Strong.Configurator._2016_09.ConfiguratorManagement
import Cfg0.Services.Internal.Strong.Configurator._2017_11.ConfiguratorManagement
import Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement
import Cfg0.Services.Internal.Strong.Configurator._2018_11.ConfiguratorManagement
import Cfg0.Services.Strong.Configurator._2014_12.ConfiguratorManagement
import System
import Teamcenter.Soa.Client
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Client.Model.Strong
import typing

class ConfiguratorManagementRestBindingStub(ConfiguratorManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def CreateUpdateVariantRules(self, Rules: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.VariantRuleInput], RevRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.CreateUpdateVariantRulesResponse: ...
    def ExecuteSearch(self, SearchRecipe: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchRecipe, SearchOptions: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchOptions) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchResponse: ...
    def FetchNextSearchResults(self, SearchCursor: Teamcenter.Soa.Client.Model.Strong.Cfg0SearchCursor, LoadCount: int) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchResponse: ...
    def GetDefaultRules(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, FilterCriteria: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.FilterCriteria) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetExcludeRules(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, FilterCriteria: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.FilterCriteria, Severities: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetFamilyGroups(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetFamilyGroupResponse: ...
    def GetIncludeRules(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, FilterCriteria: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.FilterCriteria, Severities: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetModelsForProduct(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, LeafLevelOnly: bool) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetOptionFamilies(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, Groups: list[Teamcenter.Soa.Client.Model.Strong.Cfg0AbsFamilyGroup], OtherFamilies: bool, UnavailableFamilies: bool) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetOptionFamiliesResponse: ...
    def GetOptionValues(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, Groups: list[Teamcenter.Soa.Client.Model.Strong.Cfg0AbsFamilyGroup], Families: list[Teamcenter.Soa.Client.Model.Strong.Cfg0AbsOptionFamily], UnavailableValues: bool) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetOptionValuesResponse: ...
    @typing.overload
    def GetProductDefaults(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ProductDefaultsInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetProductDefaultsResponse: ...
    @typing.overload
    def GetProductDefaults(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ProductDefaultsInput]) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.GetProductDefaultsResponse: ...
    def GetVariantCache(self, ProductItem: Teamcenter.Soa.Client.Model.Strong.ItemRevision, RevRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule, ProductModelUID: str, ProductItemUID: str) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetVariantCacheInfoResponse: ...
    def GetVariantExpressionDisplayStrings(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ConfigExpressionDisplayStringInput], RevRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetDisplayStringResponse: ...
    def StopSearch(self, SearchCursor: Teamcenter.Soa.Client.Model.Strong.Cfg0SearchCursor) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    @typing.overload
    def ValidateProductConfiguration(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ValidateProductConfigInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ValidateProductConfigurationResponse: ...
    @typing.overload
    def ValidateProductConfiguration(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ValidateProductConfigInput]) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ValidateProductConfigurationResponse: ...
    def GetModelAndOptionConditions(self, OperationConfigPerspective: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, InputStructs: list[Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.GetModelOptionCondInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.GetModelOptionCondResponse: ...
    def GetOverlapStates(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, OverlapStateInputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.OverlapStateInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.OverlapStateResponse: ...
    def UpdateAdmissibility(self, UpdateAdmissibilityInputList: list[Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.UpdateAdmissibilityInputList]) -> Cfg0.Services.Strong.Configurator._2014_12.ConfiguratorManagement.GetAdmissibilityResponse: ...
    @typing.overload
    def GetAvailableProductVariability(self, Input: Cfg0.Services.Internal.Strong.Configurator._2015_03.ConfiguratorManagement.AvailableProductVariabilityInput) -> Cfg0.Services.Internal.Strong.Configurator._2015_03.ConfiguratorManagement.AvailableProductVariabilityOutput: ...
    @typing.overload
    def GetAvailableProductVariability(self, Input: Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.AvailableProductVariabilityInput) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.AvailableProductVariabilityOutput: ...
    def ConvertVariantExpressions(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ConvertVariantExpressionInput]) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ConvertVariantExpressionsResponse: ...
    def GetRevRulesForConfiguratorContext(self) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.GetRevisionRulesResponse: ...
    def GetVariantExpressions(self, TargetObjects: list[Teamcenter.Soa.Client.Model.ModelObject], RevisionRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.GetVariantExpressionsResponse: ...
    def SetVariantExpressions(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.SetVariantExpressionInput], RevisionRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetOptionValueAvailability(self, Input: Cfg0.Services.Internal.Strong.Configurator._2016_09.ConfiguratorManagement.AvailabilityInput) -> Cfg0.Services.Internal.Strong.Configurator._2016_09.ConfiguratorManagement.AvailabilityOutput: ...
    def GetContextBasedVariantExpressions(self, TargetObjects: list[Teamcenter.Soa.Client.Model.ModelObject], Perspective: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective) -> Cfg0.Services.Internal.Strong.Configurator._2017_11.ConfiguratorManagement.GetContextBasedVariantExprsResponse: ...
    def SetConfigurationSessionInfo(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2017_11.ConfiguratorManagement.ConfigurationSessionInfoInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetConfigurationSessionInfo(self, SessionConfigObjs: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.GetConfigurationSessionInfoResponse: ...
    def GetVariability(self, ConfiguratorPerspectives: list[Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective]) -> Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.GetVariabilityResponse: ...
    def ValidateProductConditions(self, SessionConfigObj: Teamcenter.Soa.Client.Model.ModelObject, ExpressionMatrix: Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.ExpressionMatrix, MatrixSubset: list[Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.MatrixCell]) -> Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.ValidateProductConditionResponse: ...
    def GetConfigurationRosterCoverage(self, ConfigurationRoster: Cfg0.Services.Internal.Strong.Configurator._2018_11.ConfiguratorManagement.ConfigurationRosterInput) -> Cfg0.Services.Internal.Strong.Configurator._2018_11.ConfiguratorManagement.ConfigurationRosterCoverage: ...

class ConfiguratorManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> ConfiguratorManagementService: ...
    def CreateUpdateVariantRules(self, Rules: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.VariantRuleInput], RevRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.CreateUpdateVariantRulesResponse: ...
    def ExecuteSearch(self, SearchRecipe: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchRecipe, SearchOptions: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchOptions) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchResponse: ...
    def FetchNextSearchResults(self, SearchCursor: Teamcenter.Soa.Client.Model.Strong.Cfg0SearchCursor, LoadCount: int) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.SearchResponse: ...
    def GetDefaultRules(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, FilterCriteria: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.FilterCriteria) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetExcludeRules(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, FilterCriteria: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.FilterCriteria, Severities: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetFamilyGroups(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetFamilyGroupResponse: ...
    def GetIncludeRules(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, FilterCriteria: Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.FilterCriteria, Severities: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetModelsForProduct(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, LeafLevelOnly: bool) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetOptionFamilies(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, Groups: list[Teamcenter.Soa.Client.Model.Strong.Cfg0AbsFamilyGroup], OtherFamilies: bool, UnavailableFamilies: bool) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetOptionFamiliesResponse: ...
    def GetOptionValues(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, Groups: list[Teamcenter.Soa.Client.Model.Strong.Cfg0AbsFamilyGroup], Families: list[Teamcenter.Soa.Client.Model.Strong.Cfg0AbsOptionFamily], UnavailableValues: bool) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetOptionValuesResponse: ...
    @typing.overload
    def GetProductDefaults(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ProductDefaultsInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetProductDefaultsResponse: ...
    @typing.overload
    def GetProductDefaults(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ProductDefaultsInput]) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.GetProductDefaultsResponse: ...
    def GetVariantCache(self, ProductItem: Teamcenter.Soa.Client.Model.Strong.ItemRevision, RevRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule, ProductModelUID: str, ProductItemUID: str) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetVariantCacheInfoResponse: ...
    def GetVariantExpressionDisplayStrings(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ConfigExpressionDisplayStringInput], RevRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.GetDisplayStringResponse: ...
    def StopSearch(self, SearchCursor: Teamcenter.Soa.Client.Model.Strong.Cfg0SearchCursor) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    @typing.overload
    def ValidateProductConfiguration(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ValidateProductConfigInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_06.ConfiguratorManagement.ValidateProductConfigurationResponse: ...
    @typing.overload
    def ValidateProductConfiguration(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ValidateProductConfigInput]) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ValidateProductConfigurationResponse: ...
    def GetModelAndOptionConditions(self, OperationConfigPerspective: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, InputStructs: list[Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.GetModelOptionCondInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.GetModelOptionCondResponse: ...
    def GetOverlapStates(self, Context: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective, OverlapStateInputs: list[Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.OverlapStateInput]) -> Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.OverlapStateResponse: ...
    def UpdateAdmissibility(self, UpdateAdmissibilityInputList: list[Cfg0.Services.Internal.Strong.Configurator._2014_12.ConfiguratorManagement.UpdateAdmissibilityInputList]) -> Cfg0.Services.Strong.Configurator._2014_12.ConfiguratorManagement.GetAdmissibilityResponse: ...
    @typing.overload
    def GetAvailableProductVariability(self, Input: Cfg0.Services.Internal.Strong.Configurator._2015_03.ConfiguratorManagement.AvailableProductVariabilityInput) -> Cfg0.Services.Internal.Strong.Configurator._2015_03.ConfiguratorManagement.AvailableProductVariabilityOutput: ...
    @typing.overload
    def GetAvailableProductVariability(self, Input: Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.AvailableProductVariabilityInput) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.AvailableProductVariabilityOutput: ...
    def ConvertVariantExpressions(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ConvertVariantExpressionInput]) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.ConvertVariantExpressionsResponse: ...
    def GetRevRulesForConfiguratorContext(self) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.GetRevisionRulesResponse: ...
    def GetVariantExpressions(self, TargetObjects: list[Teamcenter.Soa.Client.Model.ModelObject], RevisionRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.GetVariantExpressionsResponse: ...
    def SetVariantExpressions(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2015_10.ConfiguratorManagement.SetVariantExpressionInput], RevisionRule: Teamcenter.Soa.Client.Model.Strong.RevisionRule) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetOptionValueAvailability(self, Input: Cfg0.Services.Internal.Strong.Configurator._2016_09.ConfiguratorManagement.AvailabilityInput) -> Cfg0.Services.Internal.Strong.Configurator._2016_09.ConfiguratorManagement.AvailabilityOutput: ...
    def GetContextBasedVariantExpressions(self, TargetObjects: list[Teamcenter.Soa.Client.Model.ModelObject], Perspective: Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective) -> Cfg0.Services.Internal.Strong.Configurator._2017_11.ConfiguratorManagement.GetContextBasedVariantExprsResponse: ...
    def SetConfigurationSessionInfo(self, Inputs: list[Cfg0.Services.Internal.Strong.Configurator._2017_11.ConfiguratorManagement.ConfigurationSessionInfoInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetConfigurationSessionInfo(self, SessionConfigObjs: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.GetConfigurationSessionInfoResponse: ...
    def GetVariability(self, ConfiguratorPerspectives: list[Teamcenter.Soa.Client.Model.Strong.Cfg0ConfiguratorPerspective]) -> Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.GetVariabilityResponse: ...
    def ValidateProductConditions(self, SessionConfigObj: Teamcenter.Soa.Client.Model.ModelObject, ExpressionMatrix: Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.ExpressionMatrix, MatrixSubset: list[Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.MatrixCell]) -> Cfg0.Services.Internal.Strong.Configurator._2018_06.ConfiguratorManagement.ValidateProductConditionResponse: ...
    def GetConfigurationRosterCoverage(self, ConfigurationRoster: Cfg0.Services.Internal.Strong.Configurator._2018_11.ConfiguratorManagement.ConfigurationRosterInput) -> Cfg0.Services.Internal.Strong.Configurator._2018_11.ConfiguratorManagement.ConfigurationRosterCoverage: ...

