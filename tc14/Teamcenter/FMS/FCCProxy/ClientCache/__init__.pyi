import System
import typing

class FCCException(System.Exception):
    @typing.overload
    def __init__(self, errorNum: int, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...
    ErrCode: int
    def GetErrorCode(self) -> int: ...
    def get_ErrCode(self) -> int: ...

class C_CallBack(System.MulticastDelegate):
    def __init__(self, A_0: typing.Any, A_1: System.IntPtr) -> None: ...
    def Invoke(self, UID: str, clientObj: typing.Any, bytesDownloaded: int, bytesFileSize: int, continueDownload: bool) -> int: ...
    def BeginInvoke(self, UID: str, clientObj: typing.Any, bytesDownloaded: int, bytesFileSize: int, continueDownload: bool, callback: System.AsyncCallback, obj: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, __unnamed000: bool, result: System.IAsyncResult) -> int: ...

class CallBackArgs:
    def __init__(self, ) -> None: ...
    managedCB: C_CallBack
    managedClientObject: typing.Any

class FMS_CallBack(System.MulticastDelegate):
    def __init__(self, A_0: typing.Any, A_1: System.IntPtr) -> None: ...
    def Invoke(self, UID: System.SByte*, clientObj: System.Void*, bytesDownloaded: int, bytesFileSize: int, continueDownload: System.Int32*) -> int: ...
    def BeginInvoke(self, UID: System.SByte*, clientObj: System.Void*, bytesDownloaded: int, bytesFileSize: int, continueDownload: System.Int32*, callback: System.AsyncCallback, obj: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> int: ...

class FileCacheProxy:
    def __init__(self, ) -> None: ...
    @staticmethod
    def IsFCCEnabled() -> bool: ...
    def Init(self) -> int: ...
    def Term(self) -> int: ...
    def SetEnvironment(self, environmentUnicode: str) -> int: ...
    def SetLocale(self, locale: str) -> int: ...
    def Echo(self) -> int: ...
    def GetLastError(self, localizedmessage: System.SByte**) -> int: ...
    def GetLastErrorUTF(self, localizedmessageUTF8: System.SByte**) -> int: ...
    def GetLastErrorWide(self, localizedmessageWide: System.Char**) -> int: ...
    def RegisterTicket(self, ticket: System.SByte*, UID: System.SByte**) -> int: ...
    def RegisterTickets(self, count: int, ticketArray: System.SByte**, UIDArray: System.SByte**, ifails: System.Int32*) -> int: ...
    def UnRegisterTicket(self, uid: System.SByte*) -> int: ...
    def UnRegisterTickets(self, count: int, UIDArray: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFileToLocation(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, directory: System.SByte*, filePathName: System.SByte*) -> int: ...
    def DownloadFileToLocationUTF(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, directoryUTF: System.SByte*, filePathNameUTF: System.SByte*) -> int: ...
    def DownloadFileToLocationWide(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, directoryWide: System.Char*, filePathNameWide: System.Char*) -> int: ...
    def DownloadFilesToLocation(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, directory: System.SByte*, filepaths: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesToLocationUTF(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, directoryUTF: System.SByte*, filepathsUTF: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesToLocationWide(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, directoryWide: System.Char*, filepathsWide: System.Char**, ifails: System.Int32*) -> int: ...
    def DownloadFileFromPLM(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepath: System.SByte**) -> int: ...
    def DownloadFileFromPLM_UTF(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathUTF: System.SByte**) -> int: ...
    def DownloadFileFromPLMWide(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathWide: System.Char**) -> int: ...
    def DownloadFilesFromPLM(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepaths: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesFromPLM_UTF(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsUTF: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesFromPLMWide(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsWide: System.Char**, ifails: System.Int32*) -> int: ...
    def UploadFileToPLM(self, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepath: System.SByte*, volumeID: System.SByte**) -> int: ...
    def UploadFileToPLM_UTF(self, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathUTF: System.SByte*, volumeID: System.SByte**) -> int: ...
    def UploadFileToPLMWide(self, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathWide: System.Char*, volumeID: System.SByte**) -> int: ...
    def UploadFilesToPLM(self, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepaths: System.SByte**, continueOnFail: int, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def UploadFilesToPLM_UTF(self, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsUTF: System.SByte**, continueOnFail: int, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def UploadFilesToPLMWide(self, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsWide: System.Char**, continueOnFail: int, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def RollbackFileUploadedToPLM(self, UID: System.SByte*, volumeID: System.SByte*) -> int: ...
    def RollbackFilesUploadedToPLM(self, count: int, UIDArray: System.SByte**, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def GenerateFCCException(self, errorCode: int) -> FCCException: ...

class NetFileCacheProxy:
    def __init__(self, ) -> None: ...
    @staticmethod
    def IsFCCEnabled() -> bool: ...
    def SetLocale(self, locale: str) -> None: ...
    def Echo(self) -> None: ...
    def RegisterTicket(self, ticket: str) -> str: ...
    def RegisterTickets(self, ticketArray: list[str], UIDArray: System.String[]&, ifails: System.Int32[]&) -> None: ...
    def UnRegisterTicket(self, Uid: str) -> None: ...
    def UnRegisterTickets(self, UIDArray: list[str], ifails: System.Int32[]&) -> None: ...
    def DownloadFileFromPLM(self, policy: str, UID: str, cb: C_CallBack, clientObject: typing.Any) -> str: ...
    def DownloadFilesFromPLM(self, policy: str, UIDArray: list[str], cb: C_CallBack, clientObject: typing.Any, filepaths: System.String[]&, ifails: System.Int32[]&) -> int: ...
    def DownloadFileToLocation(self, policy: str, UID: str, cb: C_CallBack, clientObject: typing.Any, directory: str, filePathName: str) -> None: ...
    def DownloadFilesToLocation(self, policy: str, UIDArray: list[str], cb: C_CallBack, clientObject: typing.Any, directory: str, filepaths: list[str], ifails: System.Int32[]&) -> int: ...
    def UploadFileToPLM(self, UID: str, cb: C_CallBack, clientObject: typing.Any, filepath: str) -> str: ...
    def UploadFilesToPLM(self, UIDArray: list[str], cb: C_CallBack, clientObject: typing.Any, filepaths: list[str], continueOnFail: bool, volumeIDs: System.String[]&, ifails: System.Int32[]&) -> int: ...
    def RollbackFileUploadedToPLM(self, UID: str, volumeID: str) -> None: ...
    def RollbackFilesUploadedToPLM(self, UIDArray: list[str], volumeIDs: list[str], ifails: System.Int32[]&) -> int: ...
    def Dispose(self) -> None: ...

class FCCException(System.Exception):
    @typing.overload
    def __init__(self, errorNum: int, message: str) -> None: ...
    @typing.overload
    def __init__(self, message: str) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...
    ErrCode: int
    def GetErrorCode(self) -> int: ...
    def get_ErrCode(self) -> int: ...

class C_CallBack(System.MulticastDelegate):
    def __init__(self, A_0: typing.Any, A_1: System.IntPtr) -> None: ...
    def Invoke(self, UID: str, clientObj: typing.Any, bytesDownloaded: int, bytesFileSize: int, continueDownload: bool) -> int: ...
    def BeginInvoke(self, UID: str, clientObj: typing.Any, bytesDownloaded: int, bytesFileSize: int, continueDownload: bool, callback: System.AsyncCallback, obj: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, __unnamed000: bool, result: System.IAsyncResult) -> int: ...

class CallBackArgs:
    def __init__(self, ) -> None: ...
    managedCB: C_CallBack
    managedClientObject: typing.Any

class FMS_CallBack(System.MulticastDelegate):
    def __init__(self, A_0: typing.Any, A_1: System.IntPtr) -> None: ...
    def Invoke(self, UID: System.SByte*, clientObj: System.Void*, bytesDownloaded: int, bytesFileSize: int, continueDownload: System.Int32*) -> int: ...
    def BeginInvoke(self, UID: System.SByte*, clientObj: System.Void*, bytesDownloaded: int, bytesFileSize: int, continueDownload: System.Int32*, callback: System.AsyncCallback, obj: typing.Any) -> System.IAsyncResult: ...
    def EndInvoke(self, result: System.IAsyncResult) -> int: ...

class FileCacheProxy:
    def __init__(self, ) -> None: ...
    @staticmethod
    def IsFCCEnabled() -> bool: ...
    def Init(self) -> int: ...
    def Term(self) -> int: ...
    def SetEnvironment(self, environmentUnicode: str) -> int: ...
    def SetLocale(self, locale: str) -> int: ...
    def Echo(self) -> int: ...
    def GetLastError(self, localizedmessage: System.SByte**) -> int: ...
    def GetLastErrorUTF(self, localizedmessageUTF8: System.SByte**) -> int: ...
    def GetLastErrorWide(self, localizedmessageWide: System.Char**) -> int: ...
    def RegisterTicket(self, ticket: System.SByte*, UID: System.SByte**) -> int: ...
    def RegisterTickets(self, count: int, ticketArray: System.SByte**, UIDArray: System.SByte**, ifails: System.Int32*) -> int: ...
    def UnRegisterTicket(self, uid: System.SByte*) -> int: ...
    def UnRegisterTickets(self, count: int, UIDArray: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFileToLocation(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, directory: System.SByte*, filePathName: System.SByte*) -> int: ...
    def DownloadFileToLocationUTF(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, directoryUTF: System.SByte*, filePathNameUTF: System.SByte*) -> int: ...
    def DownloadFileToLocationWide(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, directoryWide: System.Char*, filePathNameWide: System.Char*) -> int: ...
    def DownloadFilesToLocation(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, directory: System.SByte*, filepaths: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesToLocationUTF(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, directoryUTF: System.SByte*, filepathsUTF: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesToLocationWide(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, directoryWide: System.Char*, filepathsWide: System.Char**, ifails: System.Int32*) -> int: ...
    def DownloadFileFromPLM(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepath: System.SByte**) -> int: ...
    def DownloadFileFromPLM_UTF(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathUTF: System.SByte**) -> int: ...
    def DownloadFileFromPLMWide(self, policy: System.SByte*, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathWide: System.Char**) -> int: ...
    def DownloadFilesFromPLM(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepaths: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesFromPLM_UTF(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsUTF: System.SByte**, ifails: System.Int32*) -> int: ...
    def DownloadFilesFromPLMWide(self, policy: System.SByte*, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsWide: System.Char**, ifails: System.Int32*) -> int: ...
    def UploadFileToPLM(self, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepath: System.SByte*, volumeID: System.SByte**) -> int: ...
    def UploadFileToPLM_UTF(self, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathUTF: System.SByte*, volumeID: System.SByte**) -> int: ...
    def UploadFileToPLMWide(self, UID: System.SByte*, cb: C_CallBack, clientObject: typing.Any, filepathWide: System.Char*, volumeID: System.SByte**) -> int: ...
    def UploadFilesToPLM(self, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepaths: System.SByte**, continueOnFail: int, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def UploadFilesToPLM_UTF(self, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsUTF: System.SByte**, continueOnFail: int, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def UploadFilesToPLMWide(self, count: int, UIDArray: System.SByte**, cb: C_CallBack, clientObject: typing.Any, filepathsWide: System.Char**, continueOnFail: int, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def RollbackFileUploadedToPLM(self, UID: System.SByte*, volumeID: System.SByte*) -> int: ...
    def RollbackFilesUploadedToPLM(self, count: int, UIDArray: System.SByte**, volumeIDs: System.SByte**, ifails: System.Int32*) -> int: ...
    def GenerateFCCException(self, errorCode: int) -> FCCException: ...

class NetFileCacheProxy:
    def __init__(self, ) -> None: ...
    @staticmethod
    def IsFCCEnabled() -> bool: ...
    def SetLocale(self, locale: str) -> None: ...
    def Echo(self) -> None: ...
    def RegisterTicket(self, ticket: str) -> str: ...
    def RegisterTickets(self, ticketArray: list[str], UIDArray: System.String[]&, ifails: System.Int32[]&) -> None: ...
    def UnRegisterTicket(self, Uid: str) -> None: ...
    def UnRegisterTickets(self, UIDArray: list[str], ifails: System.Int32[]&) -> None: ...
    def DownloadFileFromPLM(self, policy: str, UID: str, cb: C_CallBack, clientObject: typing.Any) -> str: ...
    def DownloadFilesFromPLM(self, policy: str, UIDArray: list[str], cb: C_CallBack, clientObject: typing.Any, filepaths: System.String[]&, ifails: System.Int32[]&) -> int: ...
    def DownloadFileToLocation(self, policy: str, UID: str, cb: C_CallBack, clientObject: typing.Any, directory: str, filePathName: str) -> None: ...
    def DownloadFilesToLocation(self, policy: str, UIDArray: list[str], cb: C_CallBack, clientObject: typing.Any, directory: str, filepaths: list[str], ifails: System.Int32[]&) -> int: ...
    def UploadFileToPLM(self, UID: str, cb: C_CallBack, clientObject: typing.Any, filepath: str) -> str: ...
    def UploadFilesToPLM(self, UIDArray: list[str], cb: C_CallBack, clientObject: typing.Any, filepaths: list[str], continueOnFail: bool, volumeIDs: System.String[]&, ifails: System.Int32[]&) -> int: ...
    def RollbackFileUploadedToPLM(self, UID: str, volumeID: str) -> None: ...
    def RollbackFilesUploadedToPLM(self, UIDArray: list[str], volumeIDs: list[str], ifails: System.Int32[]&) -> int: ...
    def Dispose(self) -> None: ...

