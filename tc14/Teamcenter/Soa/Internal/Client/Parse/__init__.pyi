import System
import System.Collections
import System.Collections.Generic
import System.IO
import System.Reflection
import System.Xml
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Internal.Client.Model
import typing

class ModelObjectNode(Node):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class ModelObjectArrayNode(Node):
    def __init__(self, type: System.Type, name: str, field: System.Reflection.FieldInfo, allNodes: System.Collections.Hashtable) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class MapArrayNode(MapNode):
    def __init__(self, type: System.Type, name: str, field: System.Reflection.FieldInfo, allNodes: System.Collections.Hashtable) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class StructArrayNode(Node):
    def __init__(self, type: System.Type, name: str, field: System.Reflection.FieldInfo, allNodes: System.Collections.Hashtable) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class PrimitiveArrayNode(Node):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class PrimitiveRootNode(Node):
    def __init__(self, type: System.Type) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class PrimitiveNode(Node):
    def __init__(self, type: System.Type, name: str) -> None: ...
    @staticmethod
    def IsPrimitiveType(targetType: System.Type) -> bool: ...
    @staticmethod
    def Builder(type: System.Type, name: str) -> PrimitiveNode: ...
    @staticmethod
    def ListToArray(arrayClass: System.Type, list: list[typing.Any]) -> typing.Any: ...
    def Parse(self, context: Context) -> typing.Any: ...

class StringNode(PrimitiveNode):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class BooleanNode(PrimitiveNode):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class IntegerNode(PrimitiveNode):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class FloatNode(PrimitiveNode):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class DoubleNode(PrimitiveNode):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class DateNode(PrimitiveNode):
    def __init__(self, type: System.Type, name: str) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class CDMRootNode(CDMStructNode):
    def __init__(self, type: System.Type, intermediateType: System.Type, allNodes: System.Collections.Hashtable) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class CDMStructNode(StructNode):
    def __init__(self, type: System.Type, intermediateType: System.Type, allNodes: System.Collections.Hashtable) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class MapNode(Node):
    def __init__(self, type: System.Type, name: str, field: System.Reflection.FieldInfo, allNodes: System.Collections.Hashtable) -> None: ...
    def ToString(self) -> str: ...
    def Parse(self, context: Context) -> typing.Any: ...

class PolicyNode(Node):
    def __init__(self, type: System.Type, name: str, allNodes: System.Collections.Hashtable) -> None: ...
    def ToString(self) -> str: ...
    def Parse(self, context: Context) -> typing.Any: ...

class StructRootNode(StructNode):
    def __init__(self, type: System.Type, allNodes: System.Collections.Hashtable) -> None: ...
    def Parse(self, context: Context) -> typing.Any: ...

class FieldNode:
    def __init__(self, field: System.Reflection.FieldInfo, node: Node) -> None: ...
    mField: System.Reflection.FieldInfo
    mNode: Node

class StructNode(Node):
    @typing.overload
    def __init__(self, type: System.Type, allNodes: System.Collections.Hashtable) -> None: ...
    @typing.overload
    def __init__(self, type: System.Type, name: str, field: System.Reflection.FieldInfo, allNodes: System.Collections.Hashtable) -> None: ...
    @typing.overload
    def __init__(self, duplicateNode: StructNode, name: str) -> None: ...
    def ToString(self) -> str: ...
    def Parse(self, context: Context) -> typing.Any: ...

class StubNode:
    def __init__(self, ) -> None: ...
    @typing.overload
    def AddStub(self, parent: typing.Any, targetField: System.Reflection.MemberInfo, moStub: MOStub) -> None: ...
    @typing.overload
    def AddStub(self, parent: typing.Any, mapKey: typing.Any, targetField: System.Reflection.MemberInfo, index: int, moStub: MOStub) -> None: ...
    @typing.overload
    def AddStub(self, pendingMap: MapStub, keyOrValueName: str, keyOrValue: typing.Any) -> None: ...
    def Resolve(self, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> None: ...

class NamespaceMapper:
    @typing.overload
    def __init__(self, serviceOperation: System.Reflection.MethodInfo) -> None: ...
    @typing.overload
    def __init__(self, type: System.Type) -> None: ...
    RootNamespace: str
    def get_RootNamespace(self) -> str: ...
    def GetTypePrefix(self, type: System.Type) -> str: ...
    def WriteNamespaces(self, writter: System.Xml.XmlWriter) -> None: ...
    def GetNamespace(self, prefix: str) -> str: ...

class NamedValue:
    def __init__(self, name: str, value: typing.Any, valueType: System.Type) -> None: ...
    Name: str
    Value: typing.Any
    ValueType: System.Type
    @staticmethod
    @typing.overload
    def Builder(instance: typing.Any) -> list[NamedValue]: ...
    @staticmethod
    @typing.overload
    def Builder(serviceOperation: System.Reflection.MethodInfo, inputObjs: list[typing.Any]) -> list[NamedValue]: ...
    def get_Name(self) -> str: ...
    def get_Value(self) -> typing.Any: ...
    def get_ValueType(self) -> System.Type: ...

class Node:
    def __init__(self, type: System.Type) -> None: ...
    NodeType: System.Type
    LocalName: str
    CapitalizedLocalName: str
    @staticmethod
    def Builder(type: System.Type) -> Node: ...
    def get_NodeType(self) -> System.Type: ...
    def get_LocalName(self) -> str: ...
    def get_CapitalizedLocalName(self) -> str: ...
    def Parse(self, context: Context) -> typing.Any: ...
    def ToString(self) -> str: ...
    def ReadToNextElement(self, reader: System.Xml.XmlReader) -> None: ...

class XMLNamespace(System.Attribute):
    def __init__(self, ns: str) -> None: ...
    Namespace: str
    def get_Namespace(self) -> str: ...

class ParameterTypes(System.Attribute):
    def __init__(self, ) -> None: ...
    ElementType: System.Type
    KeyType: System.Type
    ValueType: System.Type
    def get_ElementType(self) -> System.Type: ...
    def set_ElementType(self, value: System.Type) -> None: ...
    def get_KeyType(self) -> System.Type: ...
    def set_KeyType(self, value: System.Type) -> None: ...
    def get_ValueType(self) -> System.Type: ...
    def set_ValueType(self, value: System.Type) -> None: ...

class Primitives:
    def __init__(self, ) -> None: ...
    @staticmethod
    def ObjectToArray(obj: typing.Any) -> list[typing.Any]: ...
    @staticmethod
    def IsPrimitiveType(targetClass: System.Type) -> bool: ...
    @staticmethod
    def Write(targetClass: System.Type, value: typing.Any) -> str: ...

class ReflectionWriter:
    def __init__(self, ) -> None: ...
    @typing.overload
    def Write(self, instance: typing.Any) -> str: ...
    @typing.overload
    def Write(self, serviceInterface: System.Type, methodName: str, inputObjs: list[typing.Any]) -> str: ...
    @staticmethod
    def UnCapitalize(name: str) -> str: ...

class ReflectionParser:
    def __init__(self, ) -> None: ...
    @typing.overload
    def ParseResponse(self, serviceInterface: System.Type, methodName: str, modelManager: Teamcenter.Soa.Internal.Client.Model.PopulateModel, xmlResponse: str) -> typing.Any: ...
    @typing.overload
    def ParseResponse(self, serviceInterface: System.Type, methodName: str, modelManager: Teamcenter.Soa.Internal.Client.Model.PopulateModel, xmlStream: System.IO.Stream) -> typing.Any: ...

class KeyOrValue:
    def __init__(self, name: str, type: System.Type, field: System.Reflection.FieldInfo, allNodes: System.Collections.Hashtable) -> None: ...
    Name: str
    IsPrimitive: bool
    Node: Node
    Instance: typing.Any
    def ParseAsAttribute(self, context: Context, pendingMap: MapStub) -> None: ...
    def ParseAsChild(self, context: Context, pendingMap: MapStub) -> None: ...
    def ToString(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_IsPrimitive(self) -> bool: ...
    def get_Node(self) -> Node: ...
    def get_Instance(self) -> typing.Any: ...
    def set_Instance(self, value: typing.Any) -> None: ...

class MOStub:
    def __init__(self, uid: str, type: str) -> None: ...
    UID: str
    TypeName: str
    def get_UID(self) -> str: ...
    def get_TypeName(self) -> str: ...

class AnyStub:
    def __init__(self, uid: str, typeName: str) -> None: ...
    def resolveModelObject(self, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def Resolve(self, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> None: ...

class FieldStub(AnyStub):
    def __init__(self, uid: str, typeName: str, parentObject: typing.Any, field: System.Reflection.MemberInfo) -> None: ...
    def Resolve(self, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> None: ...

class ArrayStub(AnyStub):
    def __init__(self, uid: str, typeName: str, parentObject: typing.Any, mapKey: typing.Any, field: System.Reflection.MemberInfo, index: int) -> None: ...
    def Resolve(self, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> None: ...
    def GetFieldValue(self, childField: System.Reflection.MemberInfo, parent: typing.Any) -> typing.Any: ...

class KeyValueStub(AnyStub):
    def __init__(self, uid: str, typeName: str, keyOrValue: typing.Any) -> None: ...
    mKeyOrValue: typing.Any
    IsUnresolved: bool
    def get_IsUnresolved(self) -> bool: ...
    def Resolve(self, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> None: ...

class MapStub(AnyStub):
    def __init__(self, map: System.Collections.Hashtable) -> None: ...
    IsUnresolved: bool
    def AddKeyOrValue(self, uid: str, typeName: str, keyOrValueName: str, keyOrValue: typing.Any) -> None: ...
    def get_IsUnresolved(self) -> bool: ...
    def Resolve(self, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> None: ...

class Context:
    def __init__(self, xmlReader: System.Xml.XmlReader, modelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl) -> None: ...
    Reader: System.Xml.XmlReader
    ModelManager: Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl
    Stubs: StubNode
    Parent: typing.Any
    MapKey: typing.Any
    def get_Reader(self) -> System.Xml.XmlReader: ...
    def get_ModelManager(self) -> Teamcenter.Soa.Internal.Client.Model.ModelManagerImpl: ...
    def get_Stubs(self) -> StubNode: ...
    def set_Stubs(self, value: StubNode) -> None: ...
    def get_Parent(self) -> typing.Any: ...
    def set_Parent(self, value: typing.Any) -> None: ...
    def get_MapKey(self) -> typing.Any: ...
    def set_MapKey(self, value: typing.Any) -> None: ...
    def ToString(self) -> str: ...

