import Serilog
import System
import System.Collections
import System.Collections.Generic
import System.IO
import Teamcenter.Schemas.Soa._2006_03.Base
import Teamcenter.Soa.Client
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Common
import typing

class BasedOnImpl:
    def __init__(self, sourceType: str, sourceProperty: str) -> None: ...
    SourceType: str
    SourceProperty: str
    def get_SourceType(self) -> str: ...
    def get_SourceProperty(self) -> str: ...

class CachedClientMetaModel(CachelessClientMetaModel):
    def __init__(self, ) -> None: ...
    def IsCacheAvailable(self) -> bool: ...
    def Initialize(self, dsFolderMap: dict[str, System.IO.FileInfo], connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def IsTypeValid(self, typeName: str, connection: Teamcenter.Soa.Client.Connection) -> bool: ...

class CachelessClientMetaModel(DefaultClientMetaModel):
    def __init__(self, ) -> None: ...
    def IsTypeValid(self, typeName: str, connection: Teamcenter.Soa.Client.Connection) -> bool: ...

CT = typing.TypeVar('CT')

class Choice[CT]:
    def __init__(self, lCondition: str, lElement: CT) -> None: ...
    condition: str
    element: CT

class ConditionResolver(Teamcenter.Soa.Client.SessionHandler):
    def __init__(self, ) -> None: ...
    IS_TRUE: str
    def LocalSessionChange(self, userSession: Teamcenter.Soa.Client.Model.ModelObject) -> None: ...
    def SharedSessionChange(self, userSession: Teamcenter.Soa.Client.Model.ModelObject) -> None: ...
    def IsATrueCondition(self, condition: str) -> bool: ...
    @staticmethod
    def GetResolver(connection: Teamcenter.Soa.Client.Connection) -> ConditionResolver: ...

class DatasetTypeImpl(SoaTypeImpl):
    def __init__(self, uid: str, typeUid: str, name: str, displayName: str, className: str, classNameHierarchy: list[str], parent: Teamcenter.Soa.Client.Model.SoaType, owningType: str, properties: dict[str, Teamcenter.Soa.Client.Model.PropertyDescription], constants: dict[str, str], revRules: list[Teamcenter.Soa.Client.Model.RevNameRule], ruleCategory: Teamcenter.Soa.Client.Model.RevisionRuleCategory, childTypeNames: list[str], isPrimary: bool, isAbstract: bool, viewTools: list[Teamcenter.Soa.Client.Model.Tool], editTools: list[Teamcenter.Soa.Client.Model.Tool], references: list[Teamcenter.Soa.Client.Model.Reference]) -> None: ...
    ViewTools: list[Teamcenter.Soa.Client.Model.Tool]
    EditTools: list[Teamcenter.Soa.Client.Model.Tool]
    References: list[Teamcenter.Soa.Client.Model.Reference]
    ReferenceNames: list[str]
    def get_ViewTools(self) -> list[Teamcenter.Soa.Client.Model.Tool]: ...
    def get_EditTools(self) -> list[Teamcenter.Soa.Client.Model.Tool]: ...
    def GetViewTool(self, name: str) -> Teamcenter.Soa.Client.Model.Tool: ...
    def GetEditTool(self, name: str) -> Teamcenter.Soa.Client.Model.Tool: ...
    def get_References(self) -> list[Teamcenter.Soa.Client.Model.Reference]: ...
    def get_ReferenceNames(self) -> list[str]: ...
    def GetReference(self, name: str) -> Teamcenter.Soa.Client.Model.Reference: ...

class DefaultClientDataModel(Teamcenter.Soa.Client.Model.ClientDataModel):
    def __init__(self, ) -> None: ...

class DefaultClientMetaModel(Teamcenter.Soa.Client.Model.ClientMetaModel):
    def __init__(self, ) -> None: ...
    UnknownType: Teamcenter.Soa.Client.Model.SoaType
    @staticmethod
    def get_UnknownType() -> Teamcenter.Soa.Client.Model.SoaType: ...
    @staticmethod
    def GetLovValueType(lovType: Teamcenter.Soa.Client.Model.SoaType) -> int: ...
    def IsTypeValid(self, typeName: str, connection: Teamcenter.Soa.Client.Connection) -> bool: ...
    def AddDynamicLovInfo(self, lovInfo: Teamcenter.Soa.Client.Model.LovInfo) -> None: ...
    @staticmethod
    def GetClassHierarchy(typeName: str, className: str, parentTypeName: str, owningType: str, connection: Teamcenter.Soa.Client.Connection) -> list[str]: ...
    @staticmethod
    def GetTypeHierarchy(typeName: str, parentTypeName: str, connection: Teamcenter.Soa.Client.Connection) -> list[str]: ...
    @staticmethod
    def ParseLovValue(valueType: int, sValue: str, connection: Teamcenter.Soa.Client.Connection) -> typing.Any: ...
    @staticmethod
    def ParseUsage(s: str) -> Teamcenter.Soa.Client.Model.Usage: ...
    @staticmethod
    def ParseRuleCase(s: str) -> Teamcenter.Soa.Client.Model.RuleCase: ...
    @staticmethod
    def ParseStyle(s: str) -> Teamcenter.Soa.Client.Model.Style: ...

class DefaultObjectFactory(Teamcenter.Soa.Client.Model.ObjectFactory):
    def __init__(self, ) -> None: ...
    @staticmethod
    def RegisterModelObjectFactory(factory: Teamcenter.Soa.Client.Model.ModelObjectFactory) -> None: ...
    def ConstructType(self, uid: str, typeUid: str, name: str, displayName: str, className: str, classNameHierarchy: list[str], parent: Teamcenter.Soa.Client.Model.SoaType, owningType: str, properties: dict[str, Teamcenter.Soa.Client.Model.PropertyDescription], constants: dict[str, str], revRules: list[Teamcenter.Soa.Client.Model.RevNameRule], ruleCategory: Teamcenter.Soa.Client.Model.RevisionRuleCategory, childTypeNames: list[str], isPrimary: bool, isAbstract: bool) -> Teamcenter.Soa.Client.Model.SoaType: ...
    def ConstructRevNameRule(self, name: str, initStart: str, initDescription: str, initType: Teamcenter.Soa.Client.Model.RuleType, secondStart: str, secondDescription: str, secondType: Teamcenter.Soa.Client.Model.RuleType, excludeLetters: bool, skipLetters: str, alphaCase: Teamcenter.Soa.Client.Model.AlphabeticCase, suppRuleType: Teamcenter.Soa.Client.Model.SupplementalRuleType) -> Teamcenter.Soa.Client.Model.RevNameRule: ...
    def ConstructPropertyDescription(self, typeUid: str, name: str, displayName: str, valueType: int, propertyType: int, maxLength: int, isArray: bool, maxArraySize: int, fieldType: int, compoundObjType: str, lovCategory: int, constants: dict[str, str], lovs: list[Teamcenter.Soa.Client.Model.Lov], namingRules: list[Teamcenter.Soa.Client.Model.NamingRule], renderers: list[str], ruleCategory: Teamcenter.Soa.Client.Model.RuleCategory, minValue: str, maxValue: str, basedOn: Teamcenter.Soa.Client.Model.BasedOn) -> Teamcenter.Soa.Client.Model.PropertyDescription: ...
    def ConstructNamingRule(self, pattern: str, caze: Teamcenter.Soa.Client.Model.RuleCase, patterns: list[Teamcenter.Soa.Client.Model.RulePattern]) -> Teamcenter.Soa.Client.Model.NamingRule: ...
    def ConstructeRulePattern(self, pattern: str, autoGen: bool, initVal: int, maxVal: int) -> Teamcenter.Soa.Client.Model.RulePattern: ...
    def ConstructBasedOn(self, sourceType: str, sourceProperty: str) -> Teamcenter.Soa.Client.Model.BasedOn: ...
    def ConstructLovValue(self, value: typing.Any, dislayValue: str, description: str, displayDescription: str, childLovChoices: list[Teamcenter.Soa.Client.Model.LovInfo]) -> Teamcenter.Soa.Client.Model.LovValue: ...
    def ConstructLovInfo(self, uid: str, name: str, displayName: str, description: str, displayDescription: str, type: Teamcenter.Soa.Client.Model.SoaType, lovValueType: int, usage: Teamcenter.Soa.Client.Model.Usage, typeNames: list[str], propNames: list[str], specifiers: list[int], values: list[Teamcenter.Soa.Client.Model.LovValue]) -> Teamcenter.Soa.Client.Model.LovInfo: ...
    def ConstructLov(self, style: Teamcenter.Soa.Client.Model.Style, dependProps: list[str], dependStyles: list[Teamcenter.Soa.Client.Model.Style], uid: str, specifier: int, info: Teamcenter.Soa.Client.Model.LovInfo) -> Teamcenter.Soa.Client.Model.Lov: ...
    def ConstructModelObject(self, type: Teamcenter.Soa.Client.Model.SoaType, uid: str) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    @typing.overload
    def AddProperty(self, modelObj: Teamcenter.Soa.Client.Model.ModelObject, propertyDescription: Teamcenter.Soa.Client.Model.PropertyDescription, xmlProperty: Teamcenter.Schemas.Soa._2006_03.Base.Property, clientDataModel: Teamcenter.Soa.Client.Model.ClientDataModel) -> Teamcenter.Soa.Client.Model.Property: ...
    @typing.overload
    def AddProperty(self, modelObj: Teamcenter.Soa.Client.Model.ModelObject, name: str, values: list[str]) -> None: ...
    def UpdateVersion(self, modelObj: Teamcenter.Soa.Client.Model.ModelObject, objectID: str, cParamID: str, isHistorical: bool, isObsolete: bool) -> None: ...
    def RefineType(self, obj: Teamcenter.Soa.Client.Model.ModelObject, newType: Teamcenter.Soa.Client.Model.SoaType) -> bool: ...
    def ConstructPartialError(self, clientDataModel: Teamcenter.Soa.Client.Model.ClientDataModel, xmlPartialError: Teamcenter.Schemas.Soa._2006_03.Base.ErrorStack) -> Teamcenter.Soa.Client.Model.ErrorStack: ...
    def ConstructPartialErrors(self, partialErrors: list[Teamcenter.Soa.Client.Model.ErrorStack]) -> Teamcenter.Soa.Client.Model.PartialErrors: ...
    def ConstructPreferences(self, xmlPreferences: Teamcenter.Schemas.Soa._2006_03.Base.Preferences) -> Teamcenter.Soa.Client.Model.Preferences: ...
    def ConstructServiceData(self, clientDataModel: Teamcenter.Soa.Client.Model.ClientDataModel, wireServiceData: Teamcenter.Schemas.Soa._2006_03.Base.ServiceData, partialErrors: list[Teamcenter.Soa.Client.Model.ErrorStack]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def ConstructDatasetType(self, uid: str, typeUid: str, name: str, displayName: str, className: str, classNameHierarchy: list[str], parent: Teamcenter.Soa.Client.Model.SoaType, owningType: str, properties: dict[str, Teamcenter.Soa.Client.Model.PropertyDescription], constants: dict[str, str], revRules: list[Teamcenter.Soa.Client.Model.RevNameRule], ruleCategory: Teamcenter.Soa.Client.Model.RevisionRuleCategory, childTypeNames: list[str], isPrimary: bool, isAbstract: bool, viewTools: list[Teamcenter.Soa.Client.Model.Tool], editTools: list[Teamcenter.Soa.Client.Model.Tool], references: list[Teamcenter.Soa.Client.Model.Reference]) -> Teamcenter.Soa.Client.Model.DatasetType: ...
    def ConstructTool(self, name: str, description: str, inputFormats: list[str], outputFormats: list[str], launchCommandMac: str, mimeType: str, packageName: str, releaseDate: str, symbol: str, vendorName: str, version: str, callbackEnabled: bool, digitalSignatureCapable: bool, downloadRequired: bool, embedApplication: bool, markupCapable: bool, viewCapable: bool, vviRequired: bool, actions: list[Teamcenter.Soa.Client.Model.ToolAction]) -> Teamcenter.Soa.Client.Model.Tool: ...
    def ConstructToolAction(self, name: str, references: dict[str, Teamcenter.Soa.Client.Model.ActionReference]) -> Teamcenter.Soa.Client.Model.ToolAction: ...
    def ConstructActionReference(self, name: str, export: bool, reference: Teamcenter.Soa.Client.Model.Reference) -> Teamcenter.Soa.Client.Model.ActionReference: ...
    def ConstructReference(self, name: str, templates: list[str], formats: list[str]) -> Teamcenter.Soa.Client.Model.Reference: ...

class DynamicLov:
    def __init__(self, uid: str, type: Teamcenter.Soa.Client.Model.SoaType, specifier: int, dependProps: list[str], dependStyles: list[Teamcenter.Soa.Client.Model.Style], owningTypeName: str, owningProperty: str, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    DependantProperties: list[str]
    Uid: str
    Specifier: int
    Style: Teamcenter.Soa.Client.Model.Style
    LovInfo: Teamcenter.Soa.Client.Model.LovInfo
    DependantStyles: list[Teamcenter.Soa.Client.Model.Style]
    def Resolve(self) -> Teamcenter.Soa.Client.Model.Lov: ...
    def get_DependantProperties(self) -> list[str]: ...
    def get_Uid(self) -> str: ...
    def get_Specifier(self) -> int: ...
    def get_Style(self) -> Teamcenter.Soa.Client.Model.Style: ...
    def get_LovInfo(self) -> Teamcenter.Soa.Client.Model.LovInfo: ...
    def get_DependantStyles(self) -> list[Teamcenter.Soa.Client.Model.Style]: ...

class DynamicLovInfo:
    def __init__(self, uid: str, type: Teamcenter.Soa.Client.Model.SoaType, connection: Teamcenter.Soa.Client.Connection, owningType: str, owningProp: str) -> None: ...
    Uid: str
    Name: str
    DisplayName: str
    Description: str
    DisplayDescription: str
    Type: Teamcenter.Soa.Client.Model.SoaType
    ValueType: int
    Usage: Teamcenter.Soa.Client.Model.Usage
    Values: list[Teamcenter.Soa.Client.Model.LovValue]
    def Resolve(self) -> Teamcenter.Soa.Client.Model.LovInfo: ...
    @staticmethod
    def CreateLovInfoPolicy(policy: Teamcenter.Soa.Common.ObjectPropertyPolicy) -> Teamcenter.Soa.Common.ObjectPropertyPolicy: ...
    def get_Uid(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_DisplayName(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_DisplayDescription(self) -> str: ...
    def get_Type(self) -> Teamcenter.Soa.Client.Model.SoaType: ...
    def get_ValueType(self) -> int: ...
    def get_Usage(self) -> Teamcenter.Soa.Client.Model.Usage: ...
    def get_Values(self) -> list[Teamcenter.Soa.Client.Model.LovValue]: ...

class DynamicLovValues:
    def __init__(self, uid: str, lovName: str, type: Teamcenter.Soa.Client.Model.SoaType, useage: Teamcenter.Soa.Client.Model.Usage, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    Value: typing.Any
    DisplayValue: str
    HasDescription: bool
    Description: str
    DisplayDescription: str
    ChildLov: Teamcenter.Soa.Client.Model.LovInfo
    CharacterValue: System.Char
    DateTimeValue: System.DateTime
    DoubleValue: float
    IntegerValue: int
    StringValue: str
    ModelObjectValue: Teamcenter.Soa.Client.Model.ModelObject
    def Resolve(self) -> list[Teamcenter.Soa.Client.Model.LovValue]: ...
    @staticmethod
    def CreateLovValuePolicy(policy: Teamcenter.Soa.Common.ObjectPropertyPolicy) -> Teamcenter.Soa.Common.ObjectPropertyPolicy: ...
    def get_Value(self) -> typing.Any: ...
    def get_DisplayValue(self) -> str: ...
    def GetFullDisplayValue(self, delimiter: str) -> str: ...
    def get_HasDescription(self) -> bool: ...
    def get_Description(self) -> str: ...
    def get_DisplayDescription(self) -> str: ...
    def get_ChildLov(self) -> Teamcenter.Soa.Client.Model.LovInfo: ...
    def get_CharacterValue(self) -> System.Char: ...
    def get_DateTimeValue(self) -> System.DateTime: ...
    def get_DoubleValue(self) -> float: ...
    def get_IntegerValue(self) -> int: ...
    def get_StringValue(self) -> str: ...
    def get_ModelObjectValue(self) -> Teamcenter.Soa.Client.Model.ModelObject: ...

class JavaStyleStringCompare:
    def __init__(self, ) -> None: ...

class LovImpl:
    def __init__(self, style: Teamcenter.Soa.Client.Model.Style, dependProps: list[str], dependStyles: list[Teamcenter.Soa.Client.Model.Style], uid: str, specifier: int, lovinfo: Teamcenter.Soa.Client.Model.LovInfo) -> None: ...
    Style: Teamcenter.Soa.Client.Model.Style
    DependantProperties: list[str]
    DependantStyles: list[Teamcenter.Soa.Client.Model.Style]
    Uid: str
    Specifier: int
    LovInfo: Teamcenter.Soa.Client.Model.LovInfo
    def get_Style(self) -> Teamcenter.Soa.Client.Model.Style: ...
    def get_DependantProperties(self) -> list[str]: ...
    def get_DependantStyles(self) -> list[Teamcenter.Soa.Client.Model.Style]: ...
    def get_Uid(self) -> str: ...
    def get_Specifier(self) -> int: ...
    def get_LovInfo(self) -> Teamcenter.Soa.Client.Model.LovInfo: ...

class LovInfoImpl:
    def __init__(self, uid: str, name: str, displayName: str, description: str, displayDescription: str, type: Teamcenter.Soa.Client.Model.SoaType, valueType: int, usage: Teamcenter.Soa.Client.Model.Usage, values: list[Teamcenter.Soa.Client.Model.LovValue]) -> None: ...
    Uid: str
    Name: str
    DisplayName: str
    Description: str
    DisplayDescription: str
    Type: Teamcenter.Soa.Client.Model.SoaType
    ValueType: int
    Usage: Teamcenter.Soa.Client.Model.Usage
    Values: list[Teamcenter.Soa.Client.Model.LovValue]
    def get_Uid(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_DisplayName(self) -> str: ...
    def get_Description(self) -> str: ...
    def get_DisplayDescription(self) -> str: ...
    def get_Type(self) -> Teamcenter.Soa.Client.Model.SoaType: ...
    def get_ValueType(self) -> int: ...
    def get_Usage(self) -> Teamcenter.Soa.Client.Model.Usage: ...
    def get_Values(self) -> list[Teamcenter.Soa.Client.Model.LovValue]: ...

class LovValueImpl:
    def __init__(self, value: typing.Any, displayValue: str, description: str, dipslayDescription: str, childLovChoices: list[Teamcenter.Soa.Client.Model.LovInfo]) -> None: ...
    Value: typing.Any
    CharacterValue: System.Char
    DateTimeValue: System.DateTime
    DoubleValue: float
    IntegerValue: int
    StringValue: str
    ModelObjectValue: Teamcenter.Soa.Client.Model.ModelObject
    DisplayValue: str
    HasDescription: bool
    Description: str
    DisplayDescription: str
    ChildLov: Teamcenter.Soa.Client.Model.LovInfo
    def get_Value(self) -> typing.Any: ...
    def get_CharacterValue(self) -> System.Char: ...
    def get_DateTimeValue(self) -> System.DateTime: ...
    def get_DoubleValue(self) -> float: ...
    def get_IntegerValue(self) -> int: ...
    def get_StringValue(self) -> str: ...
    def get_ModelObjectValue(self) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def get_DisplayValue(self) -> str: ...
    def GetFullDisplayValue(self, delimiter: str) -> str: ...
    def get_HasDescription(self) -> bool: ...
    def get_Description(self) -> str: ...
    def get_DisplayDescription(self) -> str: ...
    def get_ChildLov(self) -> Teamcenter.Soa.Client.Model.LovInfo: ...

class NamingRuleImpl:
    def __init__(self, pattern: str, caze: Teamcenter.Soa.Client.Model.RuleCase, patterns: list[Teamcenter.Soa.Client.Model.RulePattern]) -> None: ...
    Pattern: str
    Case: Teamcenter.Soa.Client.Model.RuleCase
    Patterns: list[Teamcenter.Soa.Client.Model.RulePattern]
    def get_Pattern(self) -> str: ...
    def get_Case(self) -> Teamcenter.Soa.Client.Model.RuleCase: ...
    def get_Patterns(self) -> list[Teamcenter.Soa.Client.Model.RulePattern]: ...

T = typing.TypeVar('T')

class PropertyArrayValue[T]:
    @typing.overload
    def __init__(self, values: list[T]) -> None: ...
    @typing.overload
    def __init__(self, ) -> None: ...
    Values: list[T]
    Item: T
    Length: int
    def CopyFrom(self, right: list[T]) -> None: ...
    def get_Values(self) -> list[T]: ...
    def get_Item(self, index: int) -> T: ...
    def get_Length(self) -> int: ...
    def AreValuesEqual(self, obj: typing.Any) -> bool: ...

class ReferenceImpl:
    def __init__(self, name: str, templates: list[str], formats: list[str]) -> None: ...
    Name: str
    Templates: list[str]
    Formats: list[str]
    def get_Name(self) -> str: ...
    def get_Templates(self) -> list[str]: ...
    def get_Formats(self) -> list[str]: ...

class RevNameRuleImpl:
    def __init__(self, name: str, initStart: str, initDescription: str, initType: Teamcenter.Soa.Client.Model.RuleType, secondStart: str, secondDescription: str, secondType: Teamcenter.Soa.Client.Model.RuleType, excludeLetters: bool, skipLetters: str, alphaCase: Teamcenter.Soa.Client.Model.AlphabeticCase, suppRuleType: Teamcenter.Soa.Client.Model.SupplementalRuleType) -> None: ...
    Name: str
    StartingRevision: str
    Type: Teamcenter.Soa.Client.Model.RuleType
    ExludeSkipLetters: bool
    Description: str
    SecondaryStartingRevision: str
    SecondaryDescription: str
    SecondaryType: Teamcenter.Soa.Client.Model.RuleType
    SkipLetters: str
    AlphabeticCase: Teamcenter.Soa.Client.Model.AlphabeticCase
    SupplementalType: Teamcenter.Soa.Client.Model.SupplementalRuleType
    @staticmethod
    def ConstructRuleType(value: int) -> Teamcenter.Soa.Client.Model.RuleType: ...
    @staticmethod
    def ConstructSuppRuleType(value: int) -> Teamcenter.Soa.Client.Model.SupplementalRuleType: ...
    @staticmethod
    def ConstructAlphaCase(value: int) -> Teamcenter.Soa.Client.Model.AlphabeticCase: ...
    def get_Name(self) -> str: ...
    def get_StartingRevision(self) -> str: ...
    def get_Type(self) -> Teamcenter.Soa.Client.Model.RuleType: ...
    def get_ExludeSkipLetters(self) -> bool: ...
    def get_Description(self) -> str: ...
    def get_SecondaryStartingRevision(self) -> str: ...
    def get_SecondaryDescription(self) -> str: ...
    def get_SecondaryType(self) -> Teamcenter.Soa.Client.Model.RuleType: ...
    def get_SkipLetters(self) -> str: ...
    def get_AlphabeticCase(self) -> Teamcenter.Soa.Client.Model.AlphabeticCase: ...
    def get_SupplementalType(self) -> Teamcenter.Soa.Client.Model.SupplementalRuleType: ...

class RulePatternImpl:
    def __init__(self, pattern: str, autoGen: bool, initVal: int, maxVal: int) -> None: ...
    Pattern: str
    Autogenerated: bool
    InitialValue: int
    MaximumValue: int
    def get_Pattern(self) -> str: ...
    def get_Autogenerated(self) -> bool: ...
    def get_InitialValue(self) -> int: ...
    def get_MaximumValue(self) -> int: ...

class ToolActionImpl:
    def __init__(self, name: str, references: dict[str, Teamcenter.Soa.Client.Model.ActionReference]) -> None: ...
    Name: str
    ActionReferences: list[Teamcenter.Soa.Client.Model.ActionReference]
    ActionReferenceNames: list[str]
    def get_Name(self) -> str: ...
    def get_ActionReferences(self) -> list[Teamcenter.Soa.Client.Model.ActionReference]: ...
    def get_ActionReferenceNames(self) -> list[str]: ...
    def GetActionReference(self, name: str) -> Teamcenter.Soa.Client.Model.ActionReference: ...

class ToolImpl:
    def __init__(self, name: str, description: str, inputFormats: list[str], outputFormats: list[str], launchCommandMac: str, mimeType: str, packageName: str, releaseDate: str, symbol: str, vendorName: str, version: str, callbackEnabled: bool, digitalSignatureCapable: bool, downloadRequired: bool, embedApplication: bool, markupCapable: bool, viewCapable: bool, vviRequired: bool, actions: list[Teamcenter.Soa.Client.Model.ToolAction]) -> None: ...
    Name: str
    Actions: list[Teamcenter.Soa.Client.Model.ToolAction]
    Description: str
    InputFormats: list[str]
    OutputFormats: list[str]
    LaunchCommandMac: str
    MimeType: str
    PackageName: str
    ReleaseDate: str
    Symbol: str
    VendorName: str
    Version: str
    IsCallbackEnabled: bool
    IsDigitalSignatureCapable: bool
    IsDownloadRequired: bool
    IsEmbedApplication: bool
    IsMarkupCapable: bool
    IsViewCapable: bool
    IsVviRequired: bool
    def get_Name(self) -> str: ...
    def get_Actions(self) -> list[Teamcenter.Soa.Client.Model.ToolAction]: ...
    def GetAction(self, name: str) -> Teamcenter.Soa.Client.Model.ToolAction: ...
    def get_Description(self) -> str: ...
    def get_InputFormats(self) -> list[str]: ...
    def get_OutputFormats(self) -> list[str]: ...
    def get_LaunchCommandMac(self) -> str: ...
    def get_MimeType(self) -> str: ...
    def get_PackageName(self) -> str: ...
    def get_ReleaseDate(self) -> str: ...
    def get_Symbol(self) -> str: ...
    def get_VendorName(self) -> str: ...
    def get_Version(self) -> str: ...
    def get_IsCallbackEnabled(self) -> bool: ...
    def get_IsDigitalSignatureCapable(self) -> bool: ...
    def get_IsDownloadRequired(self) -> bool: ...
    def get_IsEmbedApplication(self) -> bool: ...
    def get_IsMarkupCapable(self) -> bool: ...
    def get_IsViewCapable(self) -> bool: ...
    def get_IsVviRequired(self) -> bool: ...

class ActionReferenceImpl:
    def __init__(self, name: str, export: bool, reference: Teamcenter.Soa.Client.Model.Reference) -> None: ...
    Name: str
    Reference: Teamcenter.Soa.Client.Model.Reference
    IsExport: bool
    def get_Name(self) -> str: ...
    def get_Reference(self) -> Teamcenter.Soa.Client.Model.Reference: ...
    def get_IsExport(self) -> bool: ...

class ErrorStackImpl:
    def __init__(self, wireError: Teamcenter.Schemas.Soa._2006_03.Base.ErrorStack, clientDataModel: Teamcenter.Soa.Client.Model.ClientDataModel) -> None: ...
    ClientId: str
    ClientIndex: int
    AssociatedObject: Teamcenter.Soa.Client.Model.ModelObject
    Messages: list[str]
    Codes: list[int]
    Levels: list[int]
    ErrorValues: list[Teamcenter.Soa.Client.Model.ErrorValue]
    def HasClientId(self) -> bool: ...
    def get_ClientId(self) -> str: ...
    def HasClientIndex(self) -> bool: ...
    def get_ClientIndex(self) -> int: ...
    def HasAssociatedObject(self) -> bool: ...
    def get_AssociatedObject(self) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def get_Messages(self) -> list[str]: ...
    def get_Codes(self) -> list[int]: ...
    def get_Levels(self) -> list[int]: ...
    def get_ErrorValues(self) -> list[Teamcenter.Soa.Client.Model.ErrorValue]: ...

class ErrorValueImpl:
    def __init__(self, wireError: Teamcenter.Schemas.Soa._2006_03.Base.ErrorValue) -> None: ...
    Code: int
    Level: int
    Message: str
    def get_Code(self) -> int: ...
    def get_Level(self) -> int: ...
    def get_Message(self) -> str: ...

class FmsErrorStackImpl:
    def __init__(self, message: str, clientId: str) -> None: ...
    ClientId: str
    ClientIndex: int
    AssociatedObject: Teamcenter.Soa.Client.Model.ModelObject
    Messages: list[str]
    Codes: list[int]
    Levels: list[int]
    ErrorValues: list[Teamcenter.Soa.Client.Model.ErrorValue]
    def get_ClientId(self) -> str: ...
    def get_ClientIndex(self) -> int: ...
    def get_AssociatedObject(self) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def get_Messages(self) -> list[str]: ...
    def get_Codes(self) -> list[int]: ...
    def get_Levels(self) -> list[int]: ...
    def get_ErrorValues(self) -> list[Teamcenter.Soa.Client.Model.ErrorValue]: ...
    def HasClientId(self) -> bool: ...
    def HasClientIndex(self) -> bool: ...
    def HasAssociatedObject(self) -> bool: ...

class LooseObjectFactory:
    def __init__(self, ) -> None: ...
    def ConstructObject(self, type: Teamcenter.Soa.Client.Model.SoaType, uid: str) -> Teamcenter.Soa.Client.Model.ModelObject: ...

class ModelLock:
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def Lock(self) -> None: ...
    def Unlock(self) -> None: ...

class ClassNames(System.Enum, int):
    ModelMangerImpl: ClassNames = ...
    DefaultClientDataModel: ClassNames = ...
    DefaultClientMetaModel: ClassNames = ...
    CachelessClientMetaModel: ClassNames = ...
    CachedClientMetaModel: ClassNames = ...
    DynamicLov: ClassNames = ...

class ModelManagerImpl:
    def __init__(self, connection: Teamcenter.Soa.Client.Connection, userSession: Teamcenter.Soa.Client.Model.ModelObject) -> None: ...
    USER_SESSION: str
    USER_SESSION_GROUP: str
    USER_SESSION_ROLE: str
    USER_SESSION_PROJECT: str
    USER_SESSION_WORKCTX: str
    USER_SESSION_VOLUME: str
    USER_SESSION_LOCAL_VOLUME: str
    SharedSessionHandlers: dict[Teamcenter.Soa.Client.SessionHandler, Teamcenter.Soa.Client.SessionHandler]
    ClientMetaModel: Teamcenter.Soa.Client.Model.ClientMetaModel
    ClientDataModel: Teamcenter.Soa.Client.Model.ClientDataModel
    LOVPolicy: str
    @staticmethod
    def RegisterModelObjectFactory(factory: Teamcenter.Soa.Client.Model.ModelObjectFactory) -> None: ...
    def LoadModelSchema(self, wireModelSchema: Teamcenter.Schemas.Soa._2006_03.Base.ModelSchema) -> None: ...
    def GetObject(self, uid: str) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def GetAllObjectsFromStore(self) -> list[Teamcenter.Soa.Client.Model.ModelObject]: ...
    def GetSoaType(self, typeName: str) -> Teamcenter.Soa.Client.Model.SoaType: ...
    def GetSoaTypes(self, typeNames: list[str]) -> list[Teamcenter.Soa.Client.Model.SoaType]: ...
    def GetTypes(self, typeNames: list[str]) -> list[Teamcenter.Soa.Client.Model.SoaType]: ...
    @typing.overload
    def ConstructObject(self, typeStr: str, uid: str) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    @typing.overload
    def ConstructObject(self, uid: str) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    @typing.overload
    def RemoveObjectsFromStore(self, objects: list[Teamcenter.Soa.Client.Model.ModelObject]) -> None: ...
    @typing.overload
    def RemoveObjectsFromStore(self, uids: list[str]) -> None: ...
    def RemoveAllObjectsFromStore(self) -> None: ...
    def AddModelEventListener(self, listener: Teamcenter.Soa.Client.Model.ModelEventListener) -> None: ...
    def RemoveModelEventListener(self, listener: Teamcenter.Soa.Client.Model.ModelEventListener) -> None: ...
    def AddChangeListener(self, listener: Teamcenter.Soa.Client.Model.ChangeListener) -> None: ...
    def RemoveChangeListener(self, listener: Teamcenter.Soa.Client.Model.ChangeListener) -> None: ...
    def AddCreateListener(self, listener: Teamcenter.Soa.Client.Model.CreateListener) -> None: ...
    def RemoveCreateListener(self, listener: Teamcenter.Soa.Client.Model.CreateListener) -> None: ...
    def AddDeleteListener(self, listener: Teamcenter.Soa.Client.Model.DeleteListener) -> None: ...
    def RemoveDeleteListener(self, listener: Teamcenter.Soa.Client.Model.DeleteListener) -> None: ...
    def AddPartialErrorListener(self, listener: Teamcenter.Soa.Client.Model.PartialErrorListener) -> None: ...
    def RemovePartialErrorListener(self, listener: Teamcenter.Soa.Client.Model.PartialErrorListener) -> None: ...
    def AddSharedSessionHandler(self, handler: Teamcenter.Soa.Client.SessionHandler) -> None: ...
    def get_SharedSessionHandlers(self) -> dict[Teamcenter.Soa.Client.SessionHandler, Teamcenter.Soa.Client.SessionHandler]: ...
    def RemoveSharedSessionHandler(self, handler: Teamcenter.Soa.Client.SessionHandler) -> None: ...
    def LockModel(self) -> None: ...
    def UnlockModel(self) -> None: ...
    def LoadServiceData(self, localXmlSD: Teamcenter.Schemas.Soa._2006_03.Base.ServiceData) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    @staticmethod
    @typing.overload
    def RemoveUnreferencedObjects(wireSD: Teamcenter.Schemas.Soa._2006_03.Base.ServiceData) -> None: ...
    @typing.overload
    def RemoveUnreferencedObjects(self, objects: System.Collections.ArrayList, eventObjs: list[str]) -> None: ...
    def ProcessSharedEvents(self, sharedWireSD: Teamcenter.Schemas.Soa._2006_03.Base.ServiceData) -> None: ...
    def LoadPartialErrors(self, xmlPartialErrors: Teamcenter.Schemas.Soa._2006_03.Base.PartialErrors) -> Teamcenter.Soa.Client.Model.PartialErrors: ...
    @typing.overload
    def LoadObjectData(self, xmlObject: Teamcenter.Schemas.Soa._2006_03.Base.ModelObject) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    @typing.overload
    def LoadObjectData(self, wireObjs: System.Collections.ArrayList) -> list[Teamcenter.Soa.Client.Model.ModelObject]: ...
    def LoadPreferences(self, xmlPreferences: Teamcenter.Schemas.Soa._2006_03.Base.Preferences) -> Teamcenter.Soa.Client.Model.Preferences: ...
    def RemoveObjectsRecursivelyFromStore(self, objects: list[Teamcenter.Soa.Client.Model.ModelObject]) -> None: ...
    def get_ClientMetaModel(self) -> Teamcenter.Soa.Client.Model.ClientMetaModel: ...
    def get_ClientDataModel(self) -> Teamcenter.Soa.Client.Model.ClientDataModel: ...
    def GetUserSessionObject(self) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    @staticmethod
    def LogDebug(className: ClassNames, theLogger: Serilog.ILogger, label: str, arg: str) -> None: ...
    def get_LOVPolicy(self) -> str: ...
    def set_LOVPolicy(self, value: str) -> None: ...

class ModelObjectImpl:
    def __init__(self, type: Teamcenter.Soa.Client.Model.SoaType, uid: str) -> None: ...
    Uid: str
    SoaType: Teamcenter.Soa.Client.Model.SoaType
    IsHistorical: bool
    IsObsolete: bool
    PropertyNames: list[str]
    def UpdateVersion(self, objectID: str, cParamID: str, isHistorical: bool, isObsolete: bool) -> None: ...
    @typing.overload
    def CopyProperties(self, source: ModelObjectImpl) -> None: ...
    @typing.overload
    def CopyProperties(self) -> System.Collections.Hashtable: ...
    def Equals(self, right: typing.Any) -> bool: ...
    @typing.overload
    def CompareTo(self, right: typing.Any) -> int: ...
    @typing.overload
    def CompareTo(self, right: ModelObjectImpl) -> int: ...
    def RefineType(self, newType: Teamcenter.Soa.Client.Model.SoaType) -> bool: ...
    def GetProperty(self, name: str) -> Teamcenter.Soa.Client.Model.Property: ...
    def GetPropertyDisplayableValue(self, name: str) -> str: ...
    def GetPropertyDisplayableValues(self, name: str) -> list[str]: ...
    def get_Uid(self) -> str: ...
    def get_SoaType(self) -> Teamcenter.Soa.Client.Model.SoaType: ...
    def HasSameObjectID(self, targetObject: Teamcenter.Soa.Client.Model.ModelObject) -> bool: ...
    def HasSameCParam(self, targetObject: Teamcenter.Soa.Client.Model.ModelObject) -> bool: ...
    def get_IsHistorical(self) -> bool: ...
    def get_IsObsolete(self) -> bool: ...
    def get_PropertyNames(self) -> list[str]: ...
    def PutProperty(self, clientDataModel: Teamcenter.Soa.Client.Model.ClientDataModel, wireProp: Teamcenter.Schemas.Soa._2006_03.Base.Property, checkForChange: bool) -> bool: ...

class PartialErrorsImpl:
    def __init__(self, ) -> None: ...
    def sizeOfPartialErrors(self) -> int: ...
    def GetPartialError(self, index: int) -> Teamcenter.Soa.Client.Model.ErrorStack: ...
    def SetPartialErrors(self, errors: list[Teamcenter.Soa.Client.Model.ErrorStack]) -> None: ...

class PopulateModel:
    def __init__(self , *args: typing.Any) -> None: ...
    def LoadModelSchema(self, wireModelSchema: Teamcenter.Schemas.Soa._2006_03.Base.ModelSchema) -> None: ...
    def LoadServiceData(self, wireServiceData: Teamcenter.Schemas.Soa._2006_03.Base.ServiceData) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def LoadPartialErrors(self, wirePartial: Teamcenter.Schemas.Soa._2006_03.Base.PartialErrors) -> Teamcenter.Soa.Client.Model.PartialErrors: ...
    @typing.overload
    def LoadObjectData(self, wireObj: Teamcenter.Schemas.Soa._2006_03.Base.ModelObject) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    @typing.overload
    def LoadObjectData(self, wireObjs: System.Collections.ArrayList) -> list[Teamcenter.Soa.Client.Model.ModelObject]: ...
    def LoadPreferences(self, wireObj: Teamcenter.Schemas.Soa._2006_03.Base.Preferences) -> Teamcenter.Soa.Client.Model.Preferences: ...
    def LockModel(self) -> None: ...
    def UnlockModel(self) -> None: ...

class PreferencesImpl:
    def __init__(self, wirePreferences: Teamcenter.Schemas.Soa._2006_03.Base.Preferences) -> None: ...
    def DoesExist(self, preference: str) -> bool: ...
    def GetPreference(self, preference: str) -> System.Collections.ArrayList: ...

class PropertyBoolArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    BoolArrayValue: list[bool]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_BoolArrayValue(self) -> list[bool]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyBoolImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    BoolValue: bool
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_BoolValue(self) -> bool: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyCharArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    CharArrayValue: list[System.Char]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_CharArrayValue(self) -> list[System.Char]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyCharImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    CharValue: System.Char
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_CharValue(self) -> System.Char: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyDateArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    DateArrayValue: list[System.DateTime]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_DateArrayValue(self) -> list[System.DateTime]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyDateImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    DateValue: System.DateTime
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_DateValue(self) -> System.DateTime: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyDescriptionImpl:
    def __init__(self, typeUid: str, name: str, displayName: str, valueType: int, propertyType: int, maxLength: int, isArray: bool, maxArraySize: int, fieldType: int, compoundObjType: str, lovCategory: int, ruleCategory: Teamcenter.Soa.Client.Model.RuleCategory, constants: dict[str, str], lovs: list[Teamcenter.Soa.Client.Model.Lov], namingRules: list[Teamcenter.Soa.Client.Model.NamingRule], renderers: list[str], minValue: str, maxValue: str, basedOn: Teamcenter.Soa.Client.Model.BasedOn) -> None: ...
    Name: str
    Type: int
    Array: bool
    UiName: str
    TypeUid: str
    MaxLength: int
    ServerType: int
    ServerPropertyType: int
    MaxArraySize: int
    CompoundObjectType: str
    FieldType: Teamcenter.Soa.Client.Model.PropertyFieldType
    LovCategory: Teamcenter.Soa.Client.Model.LovCategory
    LovReference: Teamcenter.Soa.Client.Model.Lov
    RootLovPropertyName: str
    NamingRule: Teamcenter.Soa.Client.Model.NamingRule
    NamingRuleCategory: Teamcenter.Soa.Client.Model.RuleCategory
    Renderer: str
    Modifiable: bool
    Displayable: bool
    Required: bool
    Enabled: bool
    InitialValue: str
    Localizable: bool
    AttachedSpecifier: int
    LovTypeUid: str
    PropDependants: list[str]
    LovUid: str
    MaxValue: str
    MinValue: str
    BasedOn: Teamcenter.Soa.Client.Model.BasedOn
    @staticmethod
    def serverTypeToClientType(serverType: int) -> int: ...
    def get_Name(self) -> str: ...
    def get_Type(self) -> int: ...
    def get_Array(self) -> bool: ...
    def get_UiName(self) -> str: ...
    def get_TypeUid(self) -> str: ...
    def get_MaxLength(self) -> int: ...
    def get_ServerType(self) -> int: ...
    def get_ServerPropertyType(self) -> int: ...
    def get_MaxArraySize(self) -> int: ...
    def get_CompoundObjectType(self) -> str: ...
    def get_FieldType(self) -> Teamcenter.Soa.Client.Model.PropertyFieldType: ...
    def get_LovCategory(self) -> Teamcenter.Soa.Client.Model.LovCategory: ...
    def get_LovReference(self) -> Teamcenter.Soa.Client.Model.Lov: ...
    def get_RootLovPropertyName(self) -> str: ...
    def get_NamingRule(self) -> Teamcenter.Soa.Client.Model.NamingRule: ...
    def get_NamingRuleCategory(self) -> Teamcenter.Soa.Client.Model.RuleCategory: ...
    def get_Renderer(self) -> str: ...
    def GetConstant(self, name: str) -> str: ...
    def get_Modifiable(self) -> bool: ...
    def get_Displayable(self) -> bool: ...
    def get_Required(self) -> bool: ...
    def get_Enabled(self) -> bool: ...
    def get_InitialValue(self) -> str: ...
    def get_Localizable(self) -> bool: ...
    def get_AttachedSpecifier(self) -> int: ...
    def get_LovTypeUid(self) -> str: ...
    def get_PropDependants(self) -> list[str]: ...
    def get_LovUid(self) -> str: ...
    def get_MaxValue(self) -> str: ...
    def get_MinValue(self) -> str: ...
    def get_BasedOn(self) -> Teamcenter.Soa.Client.Model.BasedOn: ...

class PropertyDoubleArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    DoubleArrayValue: list[float]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_DoubleArrayValue(self) -> list[float]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyDoubleImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    DoubleValue: float
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_DoubleValue(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyFloatArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    FloatArrayValue: list[float]
    FloatArrayValueAsDoubles: list[float]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_FloatArrayValue(self) -> list[float]: ...
    def get_FloatArrayValueAsDoubles(self) -> list[float]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyFloatImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    FloatValue: float
    FloatValueAsDouble: float
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_FloatValue(self) -> float: ...
    def get_FloatValueAsDouble(self) -> float: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyImpl(Teamcenter.Soa.Client.Model.Property):
    DisplayValue: str
    DisplayableValue: str
    DisplayableValues: list[str]
    PropertyDescription: Teamcenter.Soa.Client.Model.PropertyDescription
    IsNull: bool
    HasReadAccess: bool
    Modifiable: bool
    CharValue: System.Char
    CharArrayValue: list[System.Char]
    DateValue: System.DateTime
    DateArrayValue: list[System.DateTime]
    DoubleValue: float
    DoubleArrayValue: list[float]
    FloatValue: float
    FloatValueAsDouble: float
    FloatArrayValue: list[float]
    FloatArrayValueAsDoubles: list[float]
    IntValue: int
    IntArrayValue: list[int]
    BoolValue: bool
    BoolArrayValue: list[bool]
    ShortValue: int
    ShortArrayValue: list[int]
    StringValue: str
    StringArrayValue: list[str]
    ModelObjectValue: Teamcenter.Soa.Client.Model.ModelObject
    ModelObjectArrayValue: list[Teamcenter.Soa.Client.Model.ModelObject]
    ModelObjectListValue: System.Collections.IList
    def CopyFrom(self, right: PropertyImpl) -> None: ...
    def typeMismatch(self, type: int, bArray: bool, nValues: int) -> None: ...
    def get_DisplayValue(self) -> str: ...
    def get_DisplayableValue(self) -> str: ...
    def get_DisplayableValues(self) -> list[str]: ...
    def get_PropertyDescription(self) -> Teamcenter.Soa.Client.Model.PropertyDescription: ...
    def get_IsNull(self) -> bool: ...
    def get_HasReadAccess(self) -> bool: ...
    def get_Modifiable(self) -> bool: ...
    def get_CharValue(self) -> System.Char: ...
    def get_CharArrayValue(self) -> list[System.Char]: ...
    def get_DateValue(self) -> System.DateTime: ...
    def get_DateArrayValue(self) -> list[System.DateTime]: ...
    def get_DoubleValue(self) -> float: ...
    def get_DoubleArrayValue(self) -> list[float]: ...
    def get_FloatValue(self) -> float: ...
    def get_FloatValueAsDouble(self) -> float: ...
    def get_FloatArrayValue(self) -> list[float]: ...
    def get_FloatArrayValueAsDoubles(self) -> list[float]: ...
    def get_IntValue(self) -> int: ...
    def get_IntArrayValue(self) -> list[int]: ...
    def get_BoolValue(self) -> bool: ...
    def get_BoolArrayValue(self) -> list[bool]: ...
    def get_ShortValue(self) -> int: ...
    def get_ShortArrayValue(self) -> list[int]: ...
    def get_StringValue(self) -> str: ...
    def get_StringArrayValue(self) -> list[str]: ...
    def get_ModelObjectValue(self) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def get_ModelObjectArrayValue(self) -> list[Teamcenter.Soa.Client.Model.ModelObject]: ...
    def get_ModelObjectListValue(self) -> System.Collections.IList: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, obj: typing.Any) -> bool: ...
    @staticmethod
    def createPropertyObject(displayValues: list[str], displayValue: str, modifiable: bool, hasReadAccess: bool, desc: PropertyDescriptionImpl) -> PropertyImpl: ...
    @staticmethod
    def RetrievePropertyValue(property: Teamcenter.Soa.Client.Model.Property) -> str: ...

class PropertyIntArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    IntArrayValue: list[int]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_IntArrayValue(self) -> list[int]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyIntImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    IntValue: int
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_IntValue(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyModelObjectArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    ModelObjectArrayValue: list[Teamcenter.Soa.Client.Model.ModelObject]
    ModelObjectListValue: System.Collections.IList
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_ModelObjectArrayValue(self) -> list[Teamcenter.Soa.Client.Model.ModelObject]: ...
    def get_ModelObjectListValue(self) -> System.Collections.IList: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyModelObjectImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    ModelObjectValue: Teamcenter.Soa.Client.Model.ModelObject
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_ModelObjectValue(self) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyShortArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    ShortArrayValue: list[int]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_ShortArrayValue(self) -> list[int]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyShortImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    ShortValue: int
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_ShortValue(self) -> int: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyStringArrayImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    StringArrayValue: list[str]
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_StringArrayValue(self) -> list[str]: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class PropertyStringImpl(PropertyImpl):
    def __init__(self, ) -> None: ...
    StringValue: str
    def CopyFrom(self, obj: PropertyImpl) -> None: ...
    def get_StringValue(self) -> str: ...
    def GetHashCode(self) -> int: ...
    def Equals(self, right: typing.Any) -> bool: ...

class ServiceDataImpl:
    def __init__(self, manager: Teamcenter.Soa.Client.Model.ClientDataModel, createdUids: System.Collections.ArrayList, deletedUids: System.Collections.ArrayList, updatedUids: System.Collections.ArrayList, childUids: System.Collections.ArrayList, plainUids: System.Collections.ArrayList, errorStacks: list[Teamcenter.Soa.Client.Model.ErrorStack]) -> None: ...
    def sizeOfCreatedObjects(self) -> int: ...
    def sizeOfDeletedObjects(self) -> int: ...
    def sizeOfUpdatedObjects(self) -> int: ...
    def sizeOfPlainObjects(self) -> int: ...
    def sizeOfPartialErrors(self) -> int: ...
    def GetCreatedObject(self, index: int) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def GetDeletedObject(self, index: int) -> str: ...
    def GetUpdatedObject(self, index: int) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def GetPlainObject(self, index: int) -> Teamcenter.Soa.Client.Model.ModelObject: ...
    def GetPartialError(self, index: int) -> Teamcenter.Soa.Client.Model.ErrorStack: ...

class SoaTypeImpl:
    def __init__(self, uid: str, typeUid: str, name: str, displayName: str, className: str, classNameHierarchy: list[str], parent: Teamcenter.Soa.Client.Model.SoaType, owningType: str, properties: dict[str, Teamcenter.Soa.Client.Model.PropertyDescription], constants: dict[str, str], revRules: list[Teamcenter.Soa.Client.Model.RevNameRule], ruleCategory: Teamcenter.Soa.Client.Model.RevisionRuleCategory, childTypeNames: list[str], isPrimary: bool, isAbstract: bool) -> None: ...
    UNKNOWN_TYPE_UID: str
    UNKNOWN_TYPE_NAME: str
    UNKNOWN_TYPE_CLASS: str
    Uid: str
    Name: str
    Parent: Teamcenter.Soa.Client.Model.SoaType
    UIFValue: str
    MatchType: bool
    ClassName: str
    TypeUid: str
    PropDescs: System.Collections.Hashtable
    OwningType: str
    Constants: dict[str, str]
    RevisionNamingRule: Teamcenter.Soa.Client.Model.RevNameRule
    RevisionNamingRuleCategory: Teamcenter.Soa.Client.Model.RevisionRuleCategory
    ChildTypeNames: list[str]
    IsPrimary: bool
    IsAbstract: bool
    def GetPropDesc(self, propName: str) -> Teamcenter.Soa.Client.Model.PropertyDescription: ...
    def get_Uid(self) -> str: ...
    def get_Name(self) -> str: ...
    def get_Parent(self) -> Teamcenter.Soa.Client.Model.SoaType: ...
    def get_UIFValue(self) -> str: ...
    def get_MatchType(self) -> bool: ...
    def get_ClassName(self) -> str: ...
    def get_TypeUid(self) -> str: ...
    def get_PropDescs(self) -> System.Collections.Hashtable: ...
    def GetClassNameHierarchy(self) -> list[str]: ...
    def IsInstanceOf(self, className: str) -> bool: ...
    def GetConstant(self, name: str) -> str: ...
    def get_OwningType(self) -> str: ...
    def get_Constants(self) -> dict[str, str]: ...
    def get_RevisionNamingRule(self) -> Teamcenter.Soa.Client.Model.RevNameRule: ...
    def get_RevisionNamingRuleCategory(self) -> Teamcenter.Soa.Client.Model.RevisionRuleCategory: ...
    def get_ChildTypeNames(self) -> list[str]: ...
    def GetChildTypes(self, conn: Teamcenter.Soa.Client.Connection) -> list[Teamcenter.Soa.Client.Model.SoaType]: ...
    def get_IsPrimary(self) -> bool: ...
    def get_IsAbstract(self) -> bool: ...
    def IsPropertyInherited(self, propName: str) -> bool: ...

class TypeCache:
    def __init__(self, ) -> None: ...
    def AddType(self, currType: typing.Any) -> None: ...
    def GetType(self, typeKey: str) -> Teamcenter.Soa.Client.Model.SoaType: ...
    def RemoveType(self, typeKey: str) -> None: ...

class TcServerDate:
    def __init__(self, ) -> None: ...
    @staticmethod
    def ToWire(local: System.DateTime) -> System.DateTime: ...
    @staticmethod
    def ToLocal(wire: System.DateTime) -> System.DateTime: ...
    @staticmethod
    def Parse(wireString: str) -> System.DateTime: ...
    @staticmethod
    def ToString(local: System.DateTime) -> str: ...

class FmsErrorValue:
    def __init__(self, level: int, code: int, message: str) -> None: ...
    Code: int
    Level: int
    Message: str
    def get_Code(self) -> int: ...
    def get_Level(self) -> int: ...
    def get_Message(self) -> str: ...

