import Serilog
import System
import System.Collections
import System.Collections.Generic
import System.Diagnostics
import System.IO
import System.Net
import System.Runtime.Serialization
import System.Text
import Teamcenter.Schemas.Soa._2006_03.Base
import Teamcenter.Schemas.Soa._2006_03.Exceptions
import Teamcenter.Soa.Client
import Teamcenter.Soa.Common
import Teamcenter.Soa.Exceptions
import Teamcenter.Soa.Internal.Utils
import typing

class ClientManager:
    @staticmethod
    def GetActiveClientFile() -> str: ...
    @staticmethod
    def ReserveClientId() -> ClientInfo: ...
    @staticmethod
    def RegisterClient(clientId: str) -> None: ...
    @staticmethod
    def UnregisterClient(clientId: str) -> None: ...
    @staticmethod
    def ClearClientList() -> None: ...
    @staticmethod
    def GetActiveClients() -> dict[str, str]: ...
    @staticmethod
    def GetClientInfo() -> ClientInfo: ...

class DigitalSignature:
    def __init__(self, algorithm: Algorithm) -> None: ...
    SupportedAlgorithms: str
    PreferedAlgorithm: Algorithm
    PreferedAlgorithmName: str
    SignatureLength: int
    @staticmethod
    def get_SupportedAlgorithms() -> str: ...
    @staticmethod
    def get_PreferedAlgorithm() -> Algorithm: ...
    @staticmethod
    def get_PreferedAlgorithmName() -> str: ...
    @staticmethod
    def GetPreferedAlgorithm(choiceOfAlgorithms: str) -> Algorithm: ...
    @staticmethod
    def GetPreferedAlgorithmName(choiceOfAlgorithms: str) -> str: ...
    @staticmethod
    def GetAlgorithmName(algorithm: Algorithm) -> str: ...
    def get_SignatureLength(self) -> int: ...
    def Update(self, source: list[System.Byte], offset: int, length: int) -> None: ...
    @typing.overload
    def Validate(self, expectedSignature: str) -> None: ...
    @typing.overload
    def Validate(self, source: str, expectedSignature: str) -> None: ...
    @typing.overload
    def Sign(self) -> str: ...
    @typing.overload
    def Sign(self, source: str) -> str: ...

class DigitalSignatureIStream(ServiceResponseIStream):
    def __init__(self, iStream: System.IO.Stream) -> None: ...
    RECORD_SEPARATOR: System.Char
    def ReadToEnd(self) -> str: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...

class HttpTransport:
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def ExecuteRequest(self, service: str, operation: str, requestBytes: list[System.Byte], servletURI: str) -> System.IO.Stream: ...
    def UpdateWebSealCookies(self, httpClient: Teamcenter.Soa.Internal.Utils.HttpClient) -> None: ...

class JsonTunnelSender:
    def __init__(self, connection: Teamcenter.Soa.Client.Connection, sm: SessionManager, transport: Transport, notifier: NotifyRequestListeners) -> None: ...
    TheTransport: Transport
    def getTransport(self) -> Transport: ...
    def get_TheTransport(self) -> Transport: ...
    def Invoke(self, service: str, operation: str, requestObject: typing.Any, type: System.Type, extraTypes: list[System.Type]) -> typing.Any: ...
    def Invoke2(self, service: str, operation: str, serviceInterface: System.Type, inputArgs: list[typing.Any]) -> typing.Any: ...
    def PushRequestId(self) -> None: ...
    def PopRequestId(self) -> None: ...

class Log4NetRequestListener:
    def __init__(self, connectionLogger: Serilog.ILogger) -> None: ...
    def ServiceRequest(self, info: Teamcenter.Soa.Client.ServiceInfo) -> None: ...
    def ServiceResponse(self, info: Teamcenter.Soa.Client.ServiceInfo) -> None: ...

class NotifyRequestListeners:
    def __init__(self , *args: typing.Any) -> None: ...
    def NotifyRequestListeners(self, requestInfo: Teamcenter.Soa.Client.ServiceInfo) -> None: ...
    def NotifyResponseListeners(self, responseInfo: Teamcenter.Soa.Client.ServiceInfo) -> None: ...

class Sender:
    def __init__(self , *args: typing.Any) -> None: ...
    TheTransport: Transport
    def getTransport(self) -> Transport: ...
    def get_TheTransport(self) -> Transport: ...
    def Invoke(self, service: str, operation: str, requestObject: typing.Any, type: System.Type, extraTypes: list[System.Type]) -> typing.Any: ...
    def Invoke2(self, service: str, operation: str, serviceInterface: System.Type, inputArgs: list[typing.Any]) -> typing.Any: ...
    def PushRequestId(self) -> None: ...
    def PopRequestId(self) -> None: ...

class EventSharerImpl:
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def IsEventSharingFunctioning(self) -> bool: ...
    def RegisterWithTcMEM(self, user: str, discr: str, clientId: str, locale: str) -> None: ...
    def UnregisterTcMEM(self) -> None: ...
    def GetSharedEvents(self) -> Teamcenter.Schemas.Soa._2006_03.Base.ServiceData: ...
    def PushSharedEvents(self, wireServiceData: Teamcenter.Schemas.Soa._2006_03.Base.ServiceData) -> bool: ...
    def IsServerSharedCached(self) -> bool: ...
    def IsServerShared(self) -> bool: ...
    def ProcessSharedEvents(self) -> None: ...
    def AddSharedSessionHandler(self, handler: Teamcenter.Soa.Client.SessionHandler) -> None: ...
    def RemoveSharedSessionHandler(self, handler: Teamcenter.Soa.Client.SessionHandler) -> None: ...
    def Info(self, msg: str) -> None: ...
    def Debug(self, msg: str) -> None: ...

class FMSWrapper:
    def __init__(self , *args: typing.Any) -> None: ...
    def Init(self) -> None: ...
    def Term(self) -> None: ...
    def RegisterTicket(self, ticket: str) -> str: ...
    def RegisterTickets(self, tickets: list[str]) -> list[str]: ...
    def DownLoadFileFromPLM(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str) -> str: ...
    def DownLoadFilesFromPLM(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, Uids: list[str]) -> list[str]: ...
    def UploadFileToPlm(self, fileUid: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, filePath: str) -> str: ...
    def UploadFilesToPlm(self, fileUids: list[str], cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, filePaths: list[str]) -> list[str]: ...
    def RollBackFileUploadedToPLM(self, Uid: str, volumeID: str) -> None: ...
    def RollBackFilesUploadedToPLM(self, Uids: list[str], volumeIDs: list[str]) -> None: ...
    @typing.overload
    def DownLoadTransientFile(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str, filePathName: str) -> System.IO.FileInfo: ...
    @typing.overload
    def DownLoadTransientFile(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str, directory: str, fileName: str) -> System.IO.FileInfo: ...
    def UnRegisterTickets(self, tickets: list[str]) -> None: ...
    def UnRegisterTicket(self, ticket: str) -> None: ...
    def StreamUpload(self, UID: str, uploadStream: System.IO.Stream, streamLength: int) -> str: ...
    def StreamDownload(self, UID: str, downloadStream: System.IO.Stream) -> None: ...

class FMSException(System.Exception):
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, s: str) -> None: ...
    @typing.overload
    def __init__(self, s: str, inner: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, code: int, s: str, inner: System.Exception) -> None: ...
    @typing.overload
    def __init__(self, code: int, s: str) -> None: ...
    ErrorCode: int
    def GetObjectData(self, info: System.Runtime.Serialization.SerializationInfo, context: System.Runtime.Serialization.StreamingContext) -> None: ...
    def get_ErrorCode(self) -> int: ...
    def set_ErrorCode(self, value: int) -> None: ...

class FMSLoader:
    def __init__(self, ) -> None: ...
    @staticmethod
    def GetFCCInstance() -> FMSWrapper: ...
    @staticmethod
    def GetFSCInstance(clientIPAddress: str, assignedFSCURIs: list[str], bootstrapFSCURIs: list[str], cacheDir: str) -> FMSWrapper: ...

class DynamicPolicy:
    def __init__(self, policyName: str, policy: Teamcenter.Soa.Common.ObjectPropertyPolicy, useRefCounting: bool) -> None: ...
    mPolicyName: str
    mUseRefCounting: bool
    mThePolicy: Teamcenter.Soa.Common.ObjectPropertyPolicy
    mPendingAdds: dict[str, Teamcenter.Soa.Common.PolicyType]
    mPendingRemoves: dict[str, Teamcenter.Soa.Common.PolicyType]
    mPropRefCounts: dict[str, int]
    def RemoveProperties(self, policyType: Teamcenter.Soa.Common.PolicyType, colllectUpdates: bool) -> None: ...
    def AddProperties(self, policyType: Teamcenter.Soa.Common.PolicyType, collectUpdates: bool) -> None: ...

class PolicyManager:
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    AvailablePolices: list[str]
    PreviousPolicy: str
    CurrentPolicy: str
    Active: str
    def Initialize(self, current: str, previous: str) -> None: ...
    @typing.overload
    def AddPolicy(self, policyName: str, style: Teamcenter.Soa.Client.PolicyStyle) -> str: ...
    @typing.overload
    def AddPolicy(self, policy: Teamcenter.Soa.Common.ObjectPropertyPolicy, useRefCounting: bool) -> str: ...
    @typing.overload
    def AddPolicies(self, policyNames: list[str]) -> list[str]: ...
    @typing.overload
    def AddPolicies(self, policies: list[Teamcenter.Soa.Common.ObjectPropertyPolicy]) -> list[str]: ...
    @typing.overload
    def AddPolicies(self, policyNames: list[str], policies: list[Teamcenter.Soa.Common.ObjectPropertyPolicy]) -> list[str]: ...
    def SetPolicy(self, policyName: str) -> None: ...
    def SetPolicyPerThread(self, policyName: str) -> None: ...
    def ClearPolicyPerThread(self) -> None: ...
    def UpdatePolicy(self, policyName: str, applyToRootTypes: bool, addProperties: list[Teamcenter.Soa.Common.PolicyType], removeProperties: list[Teamcenter.Soa.Common.PolicyType]) -> None: ...
    def get_AvailablePolices(self) -> list[str]: ...
    def get_PreviousPolicy(self) -> str: ...
    def get_CurrentPolicy(self) -> str: ...
    def GetPolicy(self, policyName: str) -> Teamcenter.Soa.Common.ObjectPropertyPolicy: ...
    def get_Active(self) -> str: ...
    def SendPendingUpdate(self) -> None: ...
    def GetRealId(self, policyId: str) -> str: ...
    def RestoreServerPolicies(self) -> None: ...
    def CacheStateInformation(self, service: str, operation: str, inputArgs: list[typing.Any], responseObject: typing.Any) -> None: ...

class ServiceRequestEnvelope:
    def __init__(self, ) -> None: ...
    def AddServiceRequest(self, requestXMLDocument: str) -> None: ...
    @typing.overload
    def AddSessionHeader(self, key: str, value: str) -> None: ...
    @typing.overload
    def AddSessionHeader(self, key: str, value: bool) -> None: ...
    @typing.overload
    def AddSessionHeader(self, key: str, value: int) -> None: ...
    def ToXMLString(self) -> str: ...

class ServiceResponseIStream(System.IO.Stream):
    def __init__(self, iStream: System.IO.Stream) -> None: ...
    HEADER_DECLARATION: str
    NEWLINE: System.Char
    CanRead: bool
    CanSeek: bool
    CanWrite: bool
    Length: int
    Position: int
    def HasHeaders(self) -> bool: ...
    def ContainsHeader(self, key: str) -> bool: ...
    def GetHeader(self, key: str) -> str: ...
    def get_CanRead(self) -> bool: ...
    def get_CanSeek(self) -> bool: ...
    def get_CanWrite(self) -> bool: ...
    def Flush(self) -> None: ...
    def get_Length(self) -> int: ...
    def get_Position(self) -> int: ...
    def set_Position(self, value: int) -> None: ...
    def Seek(self, offset: int, origin: System.IO.SeekOrigin) -> int: ...
    def SetLength(self, value: int) -> None: ...
    def Write(self, buffer: list[System.Byte], offset: int, count: int) -> None: ...
    def ReadByte(self) -> int: ...
    def Read(self, buffer: list[System.Byte], offset: int, count: int) -> int: ...
    def Close(self) -> None: ...

class SessionManager:
    def __init__(self, cm: Teamcenter.Soa.Client.CredentialManager, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    connectionCount: int
    STATE_LOCALE: str
    STATE_TIMEZONE: str
    STATE_ALLOW_PAGING: str
    STATE_BASE_SCHEMA_VERSION: str
    STATE_LOGCORRELATION_ID: str
    STATE_BYPASS_FLAG: str
    STATE_ROLE: str
    STATE_GROUP: str
    STATE_GROUPMEMBER: str
    STATE_CURRENT_PROJECT: str
    STATE_WORK_CONTEXT: str
    STATE_VOLUME: str
    STATE_LOCAL_VOLUME: str
    STATE_REFRESH_POM: str
    STATE_OBJ_PROP_POLICY: str
    STATE_CURRENT_DISPLAY_RULE: str
    STATE_SERVER_ID: str
    STATE_CLIENT_ID: str
    STATE_CLIENT_VERSION: str
    STATE_CLIENT_IP_ADDRESS: str
    STATE_LOCATION: str
    STATE_ACCEPT_SIGNATURE: str
    STATE_CONTENT_SIGNATURE: str
    STATE_CONTENT_SIGNED: str
    USER_SESSION_GROUP: str
    USER_SESSION_ROLE: str
    USER_SESSION_PROJECT: str
    USER_SESSION_WORKCTX: str
    USER_SESSION_VOLUME: str
    USER_SESSION_LOCAL_VOLUME: str
    USER_SESSION_GROUPMEMBER: str
    USER_SESSION_DISPLAYRULE: str
    USER_SESSION_BYPASSFLAG: str
    USER_SESSION_ORGANIZATION: str
    USER_SESSION_LOCALE: str
    USER_SESSION_LOCATION: str
    CredentialManager: Teamcenter.Soa.Client.CredentialManager
    PolicyManager: PolicyManager
    ClientID: str
    ServerVersion: str
    Locale: str
    SiteLocale: str
    def get_CredentialManager(self) -> Teamcenter.Soa.Client.CredentialManager: ...
    def set_CredentialManager(self, value: Teamcenter.Soa.Client.CredentialManager) -> None: ...
    def get_PolicyManager(self) -> PolicyManager: ...
    def get_ClientID(self) -> str: ...
    def Login(self, exception: System.Exception) -> None: ...
    def InitializeContext(self) -> None: ...
    def GetStateMap(self) -> System.Collections.Hashtable: ...
    @typing.overload
    def SetState(self, name: str, flag: bool) -> None: ...
    @typing.overload
    def SetState(self, name: str, value: str) -> None: ...
    @typing.overload
    def SetState(self, name: str, value: int) -> None: ...
    def GetStringState(self, name: str) -> str: ...
    def GetUserID(self) -> str: ...
    def SetSerializedUserName(self, userId: str) -> None: ...
    def ValidateUser(self, service: str, operation: str, inputArgs: list[typing.Any]) -> None: ...
    def ConstructRequestEnvelope(self, requestString: str) -> str: ...
    def CacheStateInformation(self, service: str, operation: str, inputArgs: list[typing.Any], responseObject: typing.Any) -> None: ...
    def get_ServerVersion(self) -> str: ...
    def get_Locale(self) -> str: ...
    def get_SiteLocale(self) -> str: ...
    def ResetServer(self) -> None: ...
    @typing.overload
    def HandleException(self, ise: Teamcenter.Schemas.Soa._2006_03.Exceptions.InternalServerException) -> None: ...
    @typing.overload
    def HandleException(self, coe: Teamcenter.Soa.Exceptions.CanceledOperationException) -> None: ...
    def ModifyInput(self, service: str, operation: str, inputArgs: list[typing.Any]) -> list[typing.Any]: ...

class OldServerException(System.Exception):
    def __init__(self, ) -> None: ...

class TccsTransport:
    def __init__(self, conn: Teamcenter.Soa.Client.Connection, sessionMgr: SessionManager) -> None: ...
    def ExecuteRequest(self, service: str, operation: str, requestBytes: list[System.Byte], servletURI: str) -> System.IO.Stream: ...

class Transport:
    def __init__(self , *args: typing.Any) -> None: ...
    def ExecuteRequest(self, service: str, operation: str, requestBytes: list[System.Byte], servletURI: str) -> System.IO.Stream: ...

class XmlRestSender:
    def __init__(self, connection: Teamcenter.Soa.Client.Connection, sessionManager: SessionManager, transport: Transport, notifier: NotifyRequestListeners) -> None: ...
    TheTransport: Transport
    def getTransport(self) -> Transport: ...
    def get_TheTransport(self) -> Transport: ...
    def Invoke(self, service: str, operation: str, requestObject: typing.Any, type: System.Type, extraTypes: list[System.Type]) -> typing.Any: ...
    def Invoke2(self, service: str, operation: str, serviceInterface: System.Type, inputArgs: list[typing.Any]) -> typing.Any: ...
    def PushRequestId(self) -> None: ...
    def PopRequestId(self) -> None: ...

class HttpConfiguration:
    def __init__(self, ) -> None: ...
    PROXY_SERVER: str
    PROXY_PORT: int
    USER_NAME: str
    USER_PASSWD: str
    USER_AGENT: str
    TIMEOUT: int
    READWRITE_TIMEOUT: int
    USE_COMPRESSION: bool
    LOG_CORRELATIONID: str
    HTTP_HEADER_REQUEST_ID: str
    HTTP_HEADER_USER_ACTION: str
    HTTP_HEADER_SESSION_ID: str
    CACHING: bool
    REQUEST_ENCODING: System.Text.Encoding
    RESPONSE_ENCODING: System.Text.Encoding
    KEEP_ALIVE: bool
    def get_PROXY_SERVER(self) -> str: ...
    def set_PROXY_SERVER(self, value: str) -> None: ...
    def get_PROXY_PORT(self) -> int: ...
    def set_PROXY_PORT(self, value: int) -> None: ...
    def get_USER_NAME(self) -> str: ...
    def set_USER_NAME(self, value: str) -> None: ...
    def get_USER_PASSWD(self) -> str: ...
    def set_USER_PASSWD(self, value: str) -> None: ...
    def get_USER_AGENT(self) -> str: ...
    def set_USER_AGENT(self, value: str) -> None: ...
    def get_TIMEOUT(self) -> int: ...
    def set_TIMEOUT(self, value: int) -> None: ...
    def get_READWRITE_TIMEOUT(self) -> int: ...
    def set_READWRITE_TIMEOUT(self, value: int) -> None: ...
    def get_USE_COMPRESSION(self) -> bool: ...
    def set_USE_COMPRESSION(self, value: bool) -> None: ...
    def get_LOG_CORRELATIONID(self) -> str: ...
    def set_LOG_CORRELATIONID(self, value: str) -> None: ...
    def get_HTTP_HEADER_REQUEST_ID(self) -> str: ...
    def set_HTTP_HEADER_REQUEST_ID(self, value: str) -> None: ...
    def get_HTTP_HEADER_USER_ACTION(self) -> str: ...
    def set_HTTP_HEADER_USER_ACTION(self, value: str) -> None: ...
    def get_HTTP_HEADER_SESSION_ID(self) -> str: ...
    def set_HTTP_HEADER_SESSION_ID(self, value: str) -> None: ...
    def get_CACHING(self) -> bool: ...
    def set_CACHING(self, value: bool) -> None: ...
    def get_REQUEST_ENCODING(self) -> System.Text.Encoding: ...
    def set_REQUEST_ENCODING(self, value: System.Text.Encoding) -> None: ...
    def get_RESPONSE_ENCODING(self) -> System.Text.Encoding: ...
    def set_RESPONSE_ENCODING(self, value: System.Text.Encoding) -> None: ...
    def get_KEEP_ALIVE(self) -> bool: ...
    def set_KEEP_ALIVE(self, value: bool) -> None: ...
    def ProxySet(self) -> bool: ...
    def GetProxy(self) -> System.Net.WebProxy: ...
    def IsUserNamePassWordSet(self) -> bool: ...
    def GetCredentials(self, URL: System.Uri) -> System.Net.ICredentials: ...

class ClientInfo:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, that: ClientInfo) -> None: ...
    mHostName: str
    mAppName: str
    mPid: int
    mIpAddress: str
    mClientId: str
    mCount: int

class Algorithm(System.Enum, int):
    NO_HASH: Algorithm = ...
    SHA_256: Algorithm = ...

class RequestData:
    def __init__(self, ) -> None: ...
    startTime: System.Diagnostics.Stopwatch
    sizeOut: int
    sizeIn: int

class CallBackArgs:
    @typing.overload
    def __init__(self, ) -> None: ...
    @typing.overload
    def __init__(self, callerCB: Teamcenter.Soa.Client.FMS_Progress_Callback, args: typing.Any) -> None: ...
    ManagedCB: Teamcenter.Soa.Client.FMS_Progress_Callback
    ManagedClientObject: typing.Any

class FCCWrapper:
    def __init__(self, ) -> None: ...
    @staticmethod
    def CallBack(UID: str, args: typing.Any, bytesDownloaded: int, bytesFileSize: int, continueDownload: bool) -> int: ...
    def Init(self) -> None: ...
    def Term(self) -> None: ...
    def RegisterTicket(self, ticket: str) -> str: ...
    def RegisterTickets(self, tickets: list[str]) -> list[str]: ...
    def DownLoadFileFromPLM(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str) -> str: ...
    def DownLoadFilesFromPLM(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, Uids: list[str]) -> list[str]: ...
    def UploadFileToPlm(self, fileUid: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, filePath: str) -> str: ...
    def UploadFilesToPlm(self, fileUids: list[str], cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, filePaths: list[str]) -> list[str]: ...
    def RollBackFileUploadedToPLM(self, Uid: str, volumeID: str) -> None: ...
    def RollBackFilesUploadedToPLM(self, Uids: list[str], volumeIDs: list[str]) -> None: ...
    @typing.overload
    def DownLoadTransientFile(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str, filePathName: str) -> System.IO.FileInfo: ...
    @typing.overload
    def DownLoadTransientFile(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str, directory: str, fileName: str) -> System.IO.FileInfo: ...
    def UnRegisterTickets(self, tickets: list[str]) -> None: ...
    def UnRegisterTicket(self, ticket: str) -> None: ...
    def StreamUpload(self, UID: str, uploadStream: System.IO.Stream, streamLength: int) -> str: ...
    def StreamDownload(self, UID: str, downloadStream: System.IO.Stream) -> None: ...

class FSCWrapper:
    def __init__(self, clientIP: str, assignedFSCs: list[str], bootStrapURLs: list[str], downloadDir: str) -> None: ...
    def Init(self) -> None: ...
    def Term(self) -> None: ...
    def RegisterTicket(self, ticket: str) -> str: ...
    def RegisterTickets(self, tickets: list[str]) -> list[str]: ...
    def DownLoadFileFromPLM(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str) -> str: ...
    def DownLoadFilesFromPLM(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, Uids: list[str]) -> list[str]: ...
    def UploadFileToPlm(self, fileUid: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, filePath: str) -> str: ...
    def UploadFilesToPlm(self, fileUids: list[str], cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, filePaths: list[str]) -> list[str]: ...
    def RollBackFileUploadedToPLM(self, Uid: str, volumeID: str) -> None: ...
    def RollBackFilesUploadedToPLM(self, Uids: list[str], volumeIDs: list[str]) -> None: ...
    @typing.overload
    def DownLoadTransientFile(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str, filePathName: str) -> System.IO.FileInfo: ...
    @typing.overload
    def DownLoadTransientFile(self, policy: str, cb: Teamcenter.Soa.Client.FMS_Progress_Callback, clientObject: typing.Any, UID: str, directory: str, fileName: str) -> System.IO.FileInfo: ...
    def UnRegisterTickets(self, tickets: list[str]) -> None: ...
    def UnRegisterTicket(self, ticket: str) -> None: ...
    def StreamUpload(self, UID: str, uploadStream: System.IO.Stream, streamLength: int) -> str: ...
    def StreamDownload(self, UID: str, downloadStream: System.IO.Stream) -> None: ...

class FCCCallbackAdapter:
    def ReportProgress(self, clientObject: typing.Any, fileName: str, bytesDownloaded: int, totalBytes: int, currentFile: int, totalFiles: int) -> bool: ...

