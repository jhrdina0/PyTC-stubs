import System
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Client.Model.Strong
import typing

class CreateGSIdentitiesResponse:
    """
    
            The CreateGSIdentitiesResponse structure defines the response from createGSIdentities
            operation.It contains vector of GS identity object references that were created.
            
    """
    def __init__(self, ) -> None: ...
    GsIdentities: list[Teamcenter.Soa.Client.Model.Strong.GSIdentity]
    """A list of GS identity object references."""
    ServiceData: Teamcenter.Soa.Client.Model.ServiceData
    """
            Service data contains the list of created or modified objects and also the partial
            errors.
            """

class GetHashedUIDResponse:
    """
    
            The GetHashedUIDResponse structure defines the response from getHashedUID operation.
            It contains hashed uid generated by taking the hash key and site-id as input.
            
    """
    def __init__(self, ) -> None: ...
    HashedUID: str
    """The hashed uid  generated."""
    ServiceData: Teamcenter.Soa.Client.Model.ServiceData
    """
            Service data contains the list of created or modified objects and also the partial
            errors.
            """

class TIEGSIdentityInput:
    """
    
            The GS identity input structure contains the fields required to create a GS identity
            object.
            
    """
    def __init__(self, ) -> None: ...
    System: str
    """Attribute system of class system GSIdentity.This is the site id of source system."""
    Label: str
    """Attribute label of class GSIdentity"""
    SubLabel: str
    """Attribute subLabel of of class GSIdentity"""
    ClassName: str
    """
            Attribute className of class GSIdentity.This is the className of the Teamcenter BusinessObject
            for which GSId is being created.
            """
    SplitToken: str
    """Attribute split_token of class GSIdentity"""
    Context: str
    """Attribute context of class GSIdentity"""
    ObjectUid: str
    """Attribute object_uid of class GSIdentity.This is 14 digit unique identifier."""
    FactorId: str
    """Attribute factor_id of class GSIdentity"""
    Atomic: bool
    """Attribute atomic of class GSIdentity"""

class ImportExport:
    """
    Interface ImportExport
    """
    def __init__(self , *args: typing.Any) -> None: ...
    def CreateGSIdentities(self, GsIdVect: list[TIEGSIdentityInput]) -> CreateGSIdentitiesResponse:
        """    
             This operation takes array of GSIdentityInput structure as input and creates GSIdentity
             objects in Teamcenter. This operation allows for creation of GSIdentities in bulk
             which is required for GMS co-existence scenarios following bulk load import of legacy
             data into Teamcenter.Whenever an object is exported from a source site the record
             of each imported object is stored in GSIdentity object,which has some basic information
             of the site that owns the object,the type of the class of imported object and 14
             digit Unique Identifier string (UID) represtening the object.Every imported object
             will have a corresponding entry in GSIdentity object.This entry will be used later
             during a re-import or sychronize operations internally by importer module.
             

Use Cases:

             This operation is used by user to create GSIds for objects imported by bulk loader.It
             creates GSIds for non GSId based TcXML objects.
             


Teamcenter Component:

             TcXMLimportexportengine - Capability to import and export XML that follows the TC
             Business Object Model. No hardcoded transformation is done. Transformations when
             needed are supported by the mapper component
             
        :param GsIdVect: 
                         Input to CreateGSIdentities. The GS identity input structure contains the fields
                         required to create a GS identity object.
             
        :return: A list of GS identity object references.Any failure will be returned as partial errors.
        """
        ...
    def GetHashedUID(self, OwnSiteId: int, HashKey: str) -> GetHashedUIDResponse:
        """    
             This operation takes a hash key as input and generates a valid Teamcenter Unique
             Identifier  a 14 character long unique string UID based on it. For migrating data
             from legacy systems to Teamcenter using bulk load import of TC XML, this operation
             can be used to generate UIDs for legacy objects. The UID is composed by using Fowler
             Noll Vo (FNV) hash algorithm for an arbitrary and unique input string.
             

Use Cases:

             This is used during data migration between legacy system such as Enterpise to Teamcenter
             .
             
             Used by the importer to generate a UID.
             

Teamcenter Component:

             TcXMLimportexportengine - Capability to import and export XML that follows the TC
             Business Object Model. No hardcoded transformation is done. Transformations when
             needed are supported by the mapper component
             
        :param OwnSiteId: 
                         The owning site-id or source site Id
             
        :param HashKey: 
                         The input hash key,arbitary unique input string.
             
        :return: A unique hashed uid generated by taking the hash key and site id as input.Any failure
             will be returned as partial errors.
        """
        ...

