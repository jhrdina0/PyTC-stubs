import System
import System.Collections
import Teamcenter.Schemas.Soa._2011_06.Metamodel
import Teamcenter.Services.Loose.Core._2006_03.FileManagement
import Teamcenter.Services.Loose.Core._2006_03.Session
import Teamcenter.Services.Loose.Core._2007_01.FileManagement
import Teamcenter.Services.Loose.Core._2007_01.Session
import Teamcenter.Services.Loose.Core._2007_12.Session
import Teamcenter.Services.Loose.Core._2008_03.Session
import Teamcenter.Services.Loose.Core._2008_06.Session
import Teamcenter.Services.Loose.Core._2010_04.Session
import Teamcenter.Services.Loose.Core._2011_06.Session
import Teamcenter.Services.Loose.Core._2012_02.Session
import Teamcenter.Services.Loose.Core._2015_10.FileManagement
import Teamcenter.Services.Loose.Core._2017_05.FileManagement
import Teamcenter.Services.Loose.Core._2019_06.Session
import Teamcenter.Services.Loose.Core._2021_12.Session
import Teamcenter.Soa.Client
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Common
import typing

class FileManagementRestBindingStub(FileManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def CommitDatasetFiles(self, CommitInput: list[Teamcenter.Services.Loose.Core._2006_03.FileManagement.CommitDatasetFileInfo]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetDatasetWriteTickets(self, Inputs: list[Teamcenter.Services.Loose.Core._2006_03.FileManagement.GetDatasetWriteTicketsInputData]) -> Teamcenter.Services.Loose.Core._2006_03.FileManagement.GetDatasetWriteTicketsResponse: ...
    def GetFileReadTickets(self, Files: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Loose.Core._2006_03.FileManagement.FileTicketsResponse: ...
    def GetTransientFileTicketsForUpload(self, TransientFileInfos: list[Teamcenter.Services.Loose.Core._2007_01.FileManagement.TransientFileInfo]) -> Teamcenter.Services.Loose.Core._2007_01.FileManagement.GetTransientFileTicketsResponse: ...
    def GetDigestInfoForDatasets(self, Datasets: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Loose.Core._2015_10.FileManagement.DatasetDigestInfoResponse: ...
    def GetDigestInfoForFiles(self, Files: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Loose.Core._2015_10.FileManagement.FileDigestInfoResponse: ...
    def CommitDatasetFilesInBulk(self, CommitInput: list[Teamcenter.Services.Loose.Core._2006_03.FileManagement.CommitDatasetFileInfo]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def ReplaceFiles(self, Inputs: list[Teamcenter.Services.Loose.Core._2017_05.FileManagement.ReplaceFileInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class FileManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> FileManagementService: ...
    def CommitDatasetFiles(self, CommitInput: list[Teamcenter.Services.Loose.Core._2006_03.FileManagement.CommitDatasetFileInfo]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetDatasetWriteTickets(self, Inputs: list[Teamcenter.Services.Loose.Core._2006_03.FileManagement.GetDatasetWriteTicketsInputData]) -> Teamcenter.Services.Loose.Core._2006_03.FileManagement.GetDatasetWriteTicketsResponse: ...
    def GetFileReadTickets(self, Files: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Loose.Core._2006_03.FileManagement.FileTicketsResponse: ...
    def GetTransientFileTicketsForUpload(self, TransientFileInfos: list[Teamcenter.Services.Loose.Core._2007_01.FileManagement.TransientFileInfo]) -> Teamcenter.Services.Loose.Core._2007_01.FileManagement.GetTransientFileTicketsResponse: ...
    def GetDigestInfoForDatasets(self, Datasets: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Loose.Core._2015_10.FileManagement.DatasetDigestInfoResponse: ...
    def GetDigestInfoForFiles(self, Files: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Loose.Core._2015_10.FileManagement.FileDigestInfoResponse: ...
    def CommitDatasetFilesInBulk(self, CommitInput: list[Teamcenter.Services.Loose.Core._2006_03.FileManagement.CommitDatasetFileInfo]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def ReplaceFiles(self, Inputs: list[Teamcenter.Services.Loose.Core._2017_05.FileManagement.ReplaceFileInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class SessionRestBindingStub(SessionService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    @typing.overload
    def GetPreferences(self, PrefScope: str, PrefNames: list[str]) -> Teamcenter.Services.Loose.Core._2006_03.Session.PreferencesResponse: ...
    @typing.overload
    def GetPreferences(self, RequestedPrefs: list[Teamcenter.Services.Loose.Core._2007_01.Session.ScopedPreferenceNames]) -> Teamcenter.Services.Loose.Core._2007_01.Session.MultiPreferencesResponse: ...
    def SetPreferences(self, Settings: list[Teamcenter.Services.Loose.Core._2006_03.Session.PrefSetting]) -> Teamcenter.Services.Loose.Core._2006_03.Session.PreferencesResponse: ...
    def GetAvailableServices(self) -> Teamcenter.Services.Loose.Core._2006_03.Session.GetAvailableServicesResponse: ...
    def GetGroupMembership(self) -> Teamcenter.Services.Loose.Core._2006_03.Session.GetGroupMembershipResponse: ...
    def GetSessionGroupMember(self) -> Teamcenter.Services.Loose.Core._2006_03.Session.GetSessionGroupMemberResponse: ...
    @typing.overload
    def Login(self, Username: str, Password: str, Group: str, Role: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def Login(self, Username: str, Password: str, Group: str, Role: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def Login(self, Credentials: Teamcenter.Services.Loose.Core._2011_06.Session.Credentials) -> Teamcenter.Services.Loose.Core._2011_06.Session.LoginResponse: ...
    @typing.overload
    def LoginSSO(self, Username: str, SsoCredentials: str, Group: str, Role: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def LoginSSO(self, Username: str, SsoCredentials: str, Group: str, Role: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def LoginSSO(self, Credentials: Teamcenter.Services.Loose.Core._2011_06.Session.Credentials) -> Teamcenter.Services.Loose.Core._2011_06.Session.LoginResponse: ...
    def Logout(self) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def SetSessionGroupMember(self, GroupMember: Teamcenter.Soa.Client.Model.ModelObject) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetTCSessionInfo(self) -> Teamcenter.Services.Loose.Core._2007_01.Session.GetTCSessionInfoResponse: ...
    @typing.overload
    def SetObjectPropertyPolicy(self, PolicyName: str) -> bool: ...
    @typing.overload
    def SetObjectPropertyPolicy(self, Policy: Teamcenter.Soa.Common.ObjectPropertyPolicy) -> str: ...
    @typing.overload
    def SetObjectPropertyPolicy(self, PolicyName: str, UseRefCounting: bool) -> Teamcenter.Services.Loose.Core._2012_02.Session.SetPolicyResponse: ...
    def RefreshPOMCachePerRequest(self, Refresh: bool) -> bool: ...
    def SetUserSessionState(self, Pairs: list[Teamcenter.Services.Loose.Core._2007_12.Session.StateNameValue]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def SetAndEvaluateIdDisplayRule(self, IdentifiableObjects: list[Teamcenter.Soa.Client.Model.ModelObject], DisplayRule: Teamcenter.Soa.Client.Model.ModelObject, SetRuleAsCurrentInDB: bool) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def Connect(self, FeatureKey: str, Action: str) -> Teamcenter.Services.Loose.Core._2008_03.Session.ConnectResponse: ...
    def GetFavorites(self) -> Teamcenter.Services.Loose.Core._2008_03.Session.FavoritesResponse: ...
    def SetFavorites(self, Input: Teamcenter.Services.Loose.Core._2008_03.Session.FavoritesInfo) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetDisplayStrings(self, Info: list[str]) -> Teamcenter.Services.Loose.Core._2008_06.Session.GetDisplayStringsResponse: ...
    def StartOperation(self) -> str: ...
    def StopOperation(self, OpId: str) -> bool: ...
    def GetPreferences2(self, PreferenceNames: list[Teamcenter.Services.Loose.Core._2007_01.Session.ScopedPreferenceNames]) -> Teamcenter.Services.Loose.Core._2010_04.Session.MultiPreferenceResponse2: ...
    def GetShortcuts(self, ShortcutInputs: System.Collections.Hashtable) -> Teamcenter.Services.Loose.Core._2010_04.Session.GetShortcutsResponse: ...
    def GetClientCacheData(self, Features: list[str]) -> Teamcenter.Services.Loose.Core._2011_06.Session.ClientCacheInfo: ...
    def GetTypeDescriptions(self, TypeNames: list[str]) -> Teamcenter.Schemas.Soa._2011_06.Metamodel.TypeSchema: ...
    def UpdateObjectPropertyPolicy(self, PolicyID: str, AddProperties: list[Teamcenter.Soa.Common.PolicyType], RemoveProperties: list[Teamcenter.Soa.Common.PolicyType]) -> str: ...
    def RegisterState(self, Level: str) -> Teamcenter.Services.Loose.Core._2012_02.Session.RegisterIndex: ...
    def UnregisterState(self, Index: int) -> bool: ...
    def GetTypeDescriptions2(self, TypeNames: list[str], Options: System.Collections.Hashtable) -> Teamcenter.Schemas.Soa._2011_06.Metamodel.TypeSchema: ...
    def SetUserSessionStateAndUpdateDefaults(self, Pairs: list[Teamcenter.Services.Loose.Core._2007_12.Session.StateNameValue]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def SponsoredLogin(self, SponsoringUser: str, Password: str, SponsoredUser: str, SponsoredGroup: str, SponsoredRole: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    def SponsoredLoginSSO(self, SponsoringUser: str, SsoCredentials: str, SponsoredUser: str, SponsoredGroup: str, SponsoredRole: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    def LicenseAdmin(self, LicAdminInput: list[Teamcenter.Services.Loose.Core._2019_06.Session.LicAdminInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def AddObjectPropertyPolicies(self, ClientPolicies: list[Teamcenter.Soa.Common.ObjectPropertyPolicy], NamedPolicies: list[str]) -> Teamcenter.Services.Loose.Core._2021_12.Session.AddPoliciesResponse: ...
    def TcServerSleep(self, Seconds: int) -> str: ...

class SessionService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> SessionService: ...
    @typing.overload
    def GetPreferences(self, PrefScope: str, PrefNames: list[str]) -> Teamcenter.Services.Loose.Core._2006_03.Session.PreferencesResponse: ...
    @typing.overload
    def GetPreferences(self, RequestedPrefs: list[Teamcenter.Services.Loose.Core._2007_01.Session.ScopedPreferenceNames]) -> Teamcenter.Services.Loose.Core._2007_01.Session.MultiPreferencesResponse: ...
    def SetPreferences(self, Settings: list[Teamcenter.Services.Loose.Core._2006_03.Session.PrefSetting]) -> Teamcenter.Services.Loose.Core._2006_03.Session.PreferencesResponse: ...
    def GetAvailableServices(self) -> Teamcenter.Services.Loose.Core._2006_03.Session.GetAvailableServicesResponse: ...
    def GetGroupMembership(self) -> Teamcenter.Services.Loose.Core._2006_03.Session.GetGroupMembershipResponse: ...
    def GetSessionGroupMember(self) -> Teamcenter.Services.Loose.Core._2006_03.Session.GetSessionGroupMemberResponse: ...
    @typing.overload
    def Login(self, Username: str, Password: str, Group: str, Role: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def Login(self, Username: str, Password: str, Group: str, Role: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def Login(self, Credentials: Teamcenter.Services.Loose.Core._2011_06.Session.Credentials) -> Teamcenter.Services.Loose.Core._2011_06.Session.LoginResponse: ...
    @typing.overload
    def LoginSSO(self, Username: str, SsoCredentials: str, Group: str, Role: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def LoginSSO(self, Username: str, SsoCredentials: str, Group: str, Role: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    @typing.overload
    def LoginSSO(self, Credentials: Teamcenter.Services.Loose.Core._2011_06.Session.Credentials) -> Teamcenter.Services.Loose.Core._2011_06.Session.LoginResponse: ...
    def Logout(self) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def SetSessionGroupMember(self, GroupMember: Teamcenter.Soa.Client.Model.ModelObject) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetTCSessionInfo(self) -> Teamcenter.Services.Loose.Core._2007_01.Session.GetTCSessionInfoResponse: ...
    @typing.overload
    def SetObjectPropertyPolicy(self, PolicyName: str) -> bool: ...
    @typing.overload
    def SetObjectPropertyPolicy(self, Policy: Teamcenter.Soa.Common.ObjectPropertyPolicy) -> str: ...
    @typing.overload
    def SetObjectPropertyPolicy(self, PolicyName: str, UseRefCounting: bool) -> Teamcenter.Services.Loose.Core._2012_02.Session.SetPolicyResponse: ...
    def RefreshPOMCachePerRequest(self, Refresh: bool) -> bool: ...
    def SetUserSessionState(self, Pairs: list[Teamcenter.Services.Loose.Core._2007_12.Session.StateNameValue]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def SetAndEvaluateIdDisplayRule(self, IdentifiableObjects: list[Teamcenter.Soa.Client.Model.ModelObject], DisplayRule: Teamcenter.Soa.Client.Model.ModelObject, SetRuleAsCurrentInDB: bool) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def Connect(self, FeatureKey: str, Action: str) -> Teamcenter.Services.Loose.Core._2008_03.Session.ConnectResponse: ...
    def GetFavorites(self) -> Teamcenter.Services.Loose.Core._2008_03.Session.FavoritesResponse: ...
    def SetFavorites(self, Input: Teamcenter.Services.Loose.Core._2008_03.Session.FavoritesInfo) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def GetDisplayStrings(self, Info: list[str]) -> Teamcenter.Services.Loose.Core._2008_06.Session.GetDisplayStringsResponse: ...
    def StartOperation(self) -> str: ...
    def StopOperation(self, OpId: str) -> bool: ...
    def GetPreferences2(self, PreferenceNames: list[Teamcenter.Services.Loose.Core._2007_01.Session.ScopedPreferenceNames]) -> Teamcenter.Services.Loose.Core._2010_04.Session.MultiPreferenceResponse2: ...
    def GetShortcuts(self, ShortcutInputs: System.Collections.Hashtable) -> Teamcenter.Services.Loose.Core._2010_04.Session.GetShortcutsResponse: ...
    def GetClientCacheData(self, Features: list[str]) -> Teamcenter.Services.Loose.Core._2011_06.Session.ClientCacheInfo: ...
    def GetTypeDescriptions(self, TypeNames: list[str]) -> Teamcenter.Schemas.Soa._2011_06.Metamodel.TypeSchema: ...
    def UpdateObjectPropertyPolicy(self, PolicyID: str, AddProperties: list[Teamcenter.Soa.Common.PolicyType], RemoveProperties: list[Teamcenter.Soa.Common.PolicyType]) -> str: ...
    def RegisterState(self, Level: str) -> Teamcenter.Services.Loose.Core._2012_02.Session.RegisterIndex: ...
    def UnregisterState(self, Index: int) -> bool: ...
    def GetTypeDescriptions2(self, TypeNames: list[str], Options: System.Collections.Hashtable) -> Teamcenter.Schemas.Soa._2011_06.Metamodel.TypeSchema: ...
    def SetUserSessionStateAndUpdateDefaults(self, Pairs: list[Teamcenter.Services.Loose.Core._2007_12.Session.StateNameValue]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def SponsoredLogin(self, SponsoringUser: str, Password: str, SponsoredUser: str, SponsoredGroup: str, SponsoredRole: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    def SponsoredLoginSSO(self, SponsoringUser: str, SsoCredentials: str, SponsoredUser: str, SponsoredGroup: str, SponsoredRole: str, Locale: str, SessionDiscriminator: str) -> Teamcenter.Services.Loose.Core._2006_03.Session.LoginResponse: ...
    def LicenseAdmin(self, LicAdminInput: list[Teamcenter.Services.Loose.Core._2019_06.Session.LicAdminInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def AddObjectPropertyPolicies(self, ClientPolicies: list[Teamcenter.Soa.Common.ObjectPropertyPolicy], NamedPolicies: list[str]) -> Teamcenter.Services.Loose.Core._2021_12.Session.AddPoliciesResponse: ...
    def TcServerSleep(self, Seconds: int) -> str: ...

