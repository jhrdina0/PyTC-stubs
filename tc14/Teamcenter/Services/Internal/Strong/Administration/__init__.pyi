import System
import System.Collections
import Teamcenter.Services.Internal.Strong.Administration._2007_06.Authorization
import Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement
import Teamcenter.Services.Internal.Strong.Administration._2008_06.IRM
import Teamcenter.Services.Internal.Strong.Administration._2009_10.PersonManagement
import Teamcenter.Services.Internal.Strong.Administration._2011_06.OrganizationManagement
import Teamcenter.Services.Internal.Strong.Administration._2012_10.OrganizationManagement
import Teamcenter.Services.Internal.Strong.Administration._2013_05.UserManagement
import Teamcenter.Services.Internal.Strong.Administration._2014_10.UserManagement
import Teamcenter.Services.Internal.Strong.Administration._2016_09.VolumeManagement
import Teamcenter.Services.Internal.Strong.Administration._2017_11.IRM
import Teamcenter.Services.Internal.Strong.Administration._2018_11.SiteManagement
import Teamcenter.Services.Internal.Strong.Administration._2019_06.UserManagement
import Teamcenter.Soa.Client
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Client.Model.Strong
import typing

class AuthorizationRestBindingStub(AuthorizationService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def GetAuthorization(self, InputAccessors: list[Teamcenter.Services.Internal.Strong.Administration._2007_06.Authorization.AccessorInfo]) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.Authorization.AccessorAccessibleNamesList: ...
    def SetAuthorization(self, InputAuthorization: list[Teamcenter.Services.Internal.Strong.Administration._2007_06.Authorization.AuthorizationInfo]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class AuthorizationService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> AuthorizationService: ...
    def GetAuthorization(self, InputAccessors: list[Teamcenter.Services.Internal.Strong.Administration._2007_06.Authorization.AccessorInfo]) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.Authorization.AccessorAccessibleNamesList: ...
    def SetAuthorization(self, InputAuthorization: list[Teamcenter.Services.Internal.Strong.Administration._2007_06.Authorization.AuthorizationInfo]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class IRMRestBindingStub(IRMService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def GetACLsByType(self, AclsType: int) -> Teamcenter.Services.Internal.Strong.Administration._2008_06.IRM.ACLInfoResponse: ...
    def GetAccessorsInfo(self, AccessorObjects: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Internal.Strong.Administration._2017_11.IRM.AccessorsInfoResponse: ...

class IRMService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> IRMService: ...
    def GetACLsByType(self, AclsType: int) -> Teamcenter.Services.Internal.Strong.Administration._2008_06.IRM.ACLInfoResponse: ...
    def GetAccessorsInfo(self, AccessorObjects: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Services.Internal.Strong.Administration._2017_11.IRM.AccessorsInfoResponse: ...

class OrganizationManagementRestBindingStub(OrganizationManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def GetOrganizationGroups(self, Inputs: list[Teamcenter.Services.Internal.Strong.Administration._2011_06.OrganizationManagement.GetGroupsForRoleInput]) -> Teamcenter.Services.Internal.Strong.Administration._2011_06.OrganizationManagement.GetOrganizationGroupResponse: ...
    def GetOrganizationGroupMembers(self, Input: Teamcenter.Services.Internal.Strong.Administration._2012_10.OrganizationManagement.OrganizationMembersInput) -> Teamcenter.Services.Internal.Strong.Administration._2012_10.OrganizationManagement.GetOrganizationUserMembersResponse: ...

class OrganizationManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> OrganizationManagementService: ...
    def GetOrganizationGroups(self, Inputs: list[Teamcenter.Services.Internal.Strong.Administration._2011_06.OrganizationManagement.GetGroupsForRoleInput]) -> Teamcenter.Services.Internal.Strong.Administration._2011_06.OrganizationManagement.GetOrganizationGroupResponse: ...
    def GetOrganizationGroupMembers(self, Input: Teamcenter.Services.Internal.Strong.Administration._2012_10.OrganizationManagement.OrganizationMembersInput) -> Teamcenter.Services.Internal.Strong.Administration._2012_10.OrganizationManagement.GetOrganizationUserMembersResponse: ...

class PersonManagementRestBindingStub(PersonManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def GetStringProperties(self, PersonObjects: list[Teamcenter.Soa.Client.Model.ModelObject], Attributes: list[str]) -> Teamcenter.Services.Internal.Strong.Administration._2009_10.PersonManagement.GetPersonPropertiesResponse: ...
    def SetStringProperties(self, PersonObject: list[Teamcenter.Soa.Client.Model.ModelObject], Attributes: System.Collections.Hashtable) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class PersonManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> PersonManagementService: ...
    def GetStringProperties(self, PersonObjects: list[Teamcenter.Soa.Client.Model.ModelObject], Attributes: list[str]) -> Teamcenter.Services.Internal.Strong.Administration._2009_10.PersonManagement.GetPersonPropertiesResponse: ...
    def SetStringProperties(self, PersonObject: list[Teamcenter.Soa.Client.Model.ModelObject], Attributes: System.Collections.Hashtable) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class PreferenceManagementRestBindingStub(PreferenceManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def CreatePreferenceCategories(self, CategoryNames: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def DeletePreferences(self, DeletePrefs: list[Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferencesDeleteInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def ExportPreferences(self, ExportPrefs: Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferencesExportInput) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferenceExportResponse: ...
    def GetModifiedSitePreferences(self) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferenceResponse: ...
    def GetNonSessionPreferences(self, PreferenceScope: str, Object: Teamcenter.Soa.Client.Model.ModelObject) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferenceResponse: ...
    def ImportPreferences(self, ImportPrefs: Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferencesImportInput) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def DeletePreferenceCategories(self, CategoryNames: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class PreferenceManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> PreferenceManagementService: ...
    def CreatePreferenceCategories(self, CategoryNames: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def DeletePreferences(self, DeletePrefs: list[Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferencesDeleteInput]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def ExportPreferences(self, ExportPrefs: Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferencesExportInput) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferenceExportResponse: ...
    def GetModifiedSitePreferences(self) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferenceResponse: ...
    def GetNonSessionPreferences(self, PreferenceScope: str, Object: Teamcenter.Soa.Client.Model.ModelObject) -> Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferenceResponse: ...
    def ImportPreferences(self, ImportPrefs: Teamcenter.Services.Internal.Strong.Administration._2007_06.PreferenceManagement.PreferencesImportInput) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def DeletePreferenceCategories(self, CategoryNames: list[str]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class SiteManagementRestBindingStub(SiteManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def CreateOrUpdateSites(self, SiteInfos: list[Teamcenter.Services.Internal.Strong.Administration._2018_11.SiteManagement.SiteInfo]) -> Teamcenter.Services.Internal.Strong.Administration._2018_11.SiteManagement.CreateOrUpdateSitesResponse: ...

class SiteManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> SiteManagementService: ...
    def CreateOrUpdateSites(self, SiteInfos: list[Teamcenter.Services.Internal.Strong.Administration._2018_11.SiteManagement.SiteInfo]) -> Teamcenter.Services.Internal.Strong.Administration._2018_11.SiteManagement.CreateOrUpdateSitesResponse: ...

class UserManagementRestBindingStub(UserManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    @typing.overload
    def ActivateUsers2(self, ActivateUsers: list[Teamcenter.Services.Internal.Strong.Administration._2013_05.UserManagement.ActivateUserInput]) -> Teamcenter.Services.Internal.Strong.Administration._2013_05.UserManagement.LicenseStatusResponse: ...
    @typing.overload
    def ActivateUsers2(self, ActivateUsers: list[Teamcenter.Services.Internal.Strong.Administration._2014_10.UserManagement.ActivateUserInput]) -> Teamcenter.Services.Internal.Strong.Administration._2013_05.UserManagement.LicenseStatusResponse: ...
    def ResetUserPassword(self, Userid: str, Oldpassword: str, Newpassword: str) -> bool: ...
    def GetGroupRoleViewModelRows(self, Input: Teamcenter.Services.Internal.Strong.Administration._2019_06.UserManagement.GetGroupRoleViewModelInput) -> Teamcenter.Services.Internal.Strong.Administration._2019_06.UserManagement.GetGroupRoleViewModelResponse: ...

class UserManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> UserManagementService: ...
    @typing.overload
    def ActivateUsers2(self, ActivateUsers: list[Teamcenter.Services.Internal.Strong.Administration._2013_05.UserManagement.ActivateUserInput]) -> Teamcenter.Services.Internal.Strong.Administration._2013_05.UserManagement.LicenseStatusResponse: ...
    @typing.overload
    def ActivateUsers2(self, ActivateUsers: list[Teamcenter.Services.Internal.Strong.Administration._2014_10.UserManagement.ActivateUserInput]) -> Teamcenter.Services.Internal.Strong.Administration._2013_05.UserManagement.LicenseStatusResponse: ...
    def ResetUserPassword(self, Userid: str, Oldpassword: str, Newpassword: str) -> bool: ...
    def GetGroupRoleViewModelRows(self, Input: Teamcenter.Services.Internal.Strong.Administration._2019_06.UserManagement.GetGroupRoleViewModelInput) -> Teamcenter.Services.Internal.Strong.Administration._2019_06.UserManagement.GetGroupRoleViewModelResponse: ...

class VolumeManagementRestBindingStub(VolumeManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def GetAccessibleVolumes(self, User: Teamcenter.Soa.Client.Model.Strong.User, Group: Teamcenter.Soa.Client.Model.Strong.Group) -> Teamcenter.Services.Internal.Strong.Administration._2016_09.VolumeManagement.VolumeInfoResponse: ...

class VolumeManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> VolumeManagementService: ...
    def GetAccessibleVolumes(self, User: Teamcenter.Soa.Client.Model.Strong.User, Group: Teamcenter.Soa.Client.Model.Strong.Group) -> Teamcenter.Services.Internal.Strong.Administration._2016_09.VolumeManagement.VolumeInfoResponse: ...

