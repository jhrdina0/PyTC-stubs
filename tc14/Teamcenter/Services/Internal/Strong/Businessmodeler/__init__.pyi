import System
import Teamcenter.Services.Internal.Strong.Businessmodeler._2007_01.DataModelManagement
import Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement
import Teamcenter.Services.Internal.Strong.Businessmodeler._2010_09.DataModelManagement
import Teamcenter.Services.Internal.Strong.Businessmodeler._2011_06.DataModelManagement
import Teamcenter.Services.Internal.Strong.Businessmodeler._2013_05.DynamicLOVQuery
import Teamcenter.Soa.Client

class DataModelManagementRestBindingStub(DataModelManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def ExportDataModel(self, Mode: str) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2007_01.DataModelManagement.ExportDataModelResponse: ...
    def ImportDataModel(self, CustTemplateFileTicket: str, CustDependencyFileTicket: str, UpdateOption: str, RunMode: str) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2007_01.DataModelManagement.ImportDataModelResponse: ...
    def DeployDataModel(self, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.DataModelDeploymentInput], DeployOption: str, UpdaterUpdateOption: str, UpdaterModeOption: str) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2007_01.DataModelManagement.ImportDataModelResponse: ...
    def GetChangedTemplateFiles(self, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.ChangedTemplateFileInput], RetrieveFiles: bool) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.TemplateFilesResponse: ...
    def GetTemplateFiles(self, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.TemplateFileInput]) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.TemplateFilesResponse: ...
    def DeployDataModel2(self, DeployOption: str, UpdaterUpdateOption: str, UpdaterModeOption: str, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.DataModelDeploymentInput]) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_09.DataModelManagement.DeployDataModelResponse: ...
    def GetSiteTemplateDeployInfo(self, TemplateNames: list[str]) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_09.DataModelManagement.SiteTemplateDeployInfoResponse: ...
    def UpdateClientMetaCache(self, Option: int) -> str: ...
    def UpdateServerMetaCache(self, Option: int) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2011_06.DataModelManagement.ServerCacheResponse: ...

class DataModelManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> DataModelManagementService: ...
    def ExportDataModel(self, Mode: str) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2007_01.DataModelManagement.ExportDataModelResponse: ...
    def ImportDataModel(self, CustTemplateFileTicket: str, CustDependencyFileTicket: str, UpdateOption: str, RunMode: str) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2007_01.DataModelManagement.ImportDataModelResponse: ...
    def DeployDataModel(self, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.DataModelDeploymentInput], DeployOption: str, UpdaterUpdateOption: str, UpdaterModeOption: str) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2007_01.DataModelManagement.ImportDataModelResponse: ...
    def GetChangedTemplateFiles(self, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.ChangedTemplateFileInput], RetrieveFiles: bool) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.TemplateFilesResponse: ...
    def GetTemplateFiles(self, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.TemplateFileInput]) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.TemplateFilesResponse: ...
    def DeployDataModel2(self, DeployOption: str, UpdaterUpdateOption: str, UpdaterModeOption: str, Inputs: list[Teamcenter.Services.Internal.Strong.Businessmodeler._2010_04.DataModelManagement.DataModelDeploymentInput]) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_09.DataModelManagement.DeployDataModelResponse: ...
    def GetSiteTemplateDeployInfo(self, TemplateNames: list[str]) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2010_09.DataModelManagement.SiteTemplateDeployInfoResponse: ...
    def UpdateClientMetaCache(self, Option: int) -> str: ...
    def UpdateServerMetaCache(self, Option: int) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2011_06.DataModelManagement.ServerCacheResponse: ...

class DynamicLOVQueryRestBindingStub(DynamicLOVQueryService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def ExecuteDynamicLOVQuery(self, QueryData: Teamcenter.Services.Internal.Strong.Businessmodeler._2013_05.DynamicLOVQuery.QueryData) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2013_05.DynamicLOVQuery.LOVSearchResults: ...

class DynamicLOVQueryService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> DynamicLOVQueryService: ...
    def ExecuteDynamicLOVQuery(self, QueryData: Teamcenter.Services.Internal.Strong.Businessmodeler._2013_05.DynamicLOVQuery.QueryData) -> Teamcenter.Services.Internal.Strong.Businessmodeler._2013_05.DynamicLOVQuery.LOVSearchResults: ...

