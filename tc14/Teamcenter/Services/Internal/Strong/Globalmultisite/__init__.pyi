import System
import Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Briefcase
import Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport
import Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer
import Teamcenter.Services.Internal.Strong.Globalmultisite._2008_06.Synchronizer
import Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer
import Teamcenter.Services.Internal.Strong.Globalmultisite._2017_05.ImportExport
import Teamcenter.Services.Internal.Strong.Globalmultisite._2018_11.Briefcase
import Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase
import Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery
import Teamcenter.Services.Strong.Globalmultisite._2007_12.ImportExport
import Teamcenter.Soa.Client
import Teamcenter.Soa.Client.Model
import typing

class BriefcaseRestBindingStub(BriefcaseService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def PackageBriefcaseContents(self, PackageBriefcaseContentsInfo: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Briefcase.PackageBriefcaseContentsInfo) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Briefcase.PackageBriefcaseContentsResponse: ...
    def UnpackBriefcaseContents(self, UidOfBriefcaseTcFile: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Briefcase.UnpackBriefcaseContentsResponse: ...
    def CheckBriefcaseLicense(self) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2018_11.Briefcase.CheckBriefcaseLicenseResponse: ...
    def GetBriefcasePreviewData(self, OldBriefcaseFMSTicket: str, OldBriefcaseUID: str, NewBriefcaseFMSTicket: str, NewBriefcaseUID: str, OptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2018_11.Briefcase.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2018_11.Briefcase.GetBriefcaePreviewDataResponse: ...
    def AddMarkOTForCurrentUser(self, Objects: list[str], TargetSiteId: int, AppId: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.AddMarkOTResponse: ...
    def GetObjectsLockInfo(self, Objects: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.GetObjectsLockInfoResponse: ...
    def QueryMarkOT(self, Objects: list[str], UserId: str, TargetSiteId: int, NeedHelperObjects: bool, AppId: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.QueryMarkOTResponse: ...
    def RemoveMarkOTForCurrentUser(self, Objects: list[str], AppId: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.RemoveMarkOTResponse: ...

class BriefcaseService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> BriefcaseService: ...
    def PackageBriefcaseContents(self, PackageBriefcaseContentsInfo: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Briefcase.PackageBriefcaseContentsInfo) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Briefcase.PackageBriefcaseContentsResponse: ...
    def UnpackBriefcaseContents(self, UidOfBriefcaseTcFile: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Briefcase.UnpackBriefcaseContentsResponse: ...
    def CheckBriefcaseLicense(self) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2018_11.Briefcase.CheckBriefcaseLicenseResponse: ...
    def GetBriefcasePreviewData(self, OldBriefcaseFMSTicket: str, OldBriefcaseUID: str, NewBriefcaseFMSTicket: str, NewBriefcaseUID: str, OptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2018_11.Briefcase.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2018_11.Briefcase.GetBriefcaePreviewDataResponse: ...
    def AddMarkOTForCurrentUser(self, Objects: list[str], TargetSiteId: int, AppId: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.AddMarkOTResponse: ...
    def GetObjectsLockInfo(self, Objects: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.GetObjectsLockInfoResponse: ...
    def QueryMarkOT(self, Objects: list[str], UserId: str, TargetSiteId: int, NeedHelperObjects: bool, AppId: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.QueryMarkOTResponse: ...
    def RemoveMarkOTForCurrentUser(self, Objects: list[str], AppId: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.Briefcase.RemoveMarkOTResponse: ...

class ImportExportRestBindingStub(ImportExportService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def ConfirmExport(self, TargetSite: int, TcGSMessageId: str, FmsTicketOfFailedObjs: str, Commit: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.ConfirmExportResponse: ...
    def DryRunExport(self, TargetSites: list[int], ExpObjList: list[str], TcGSMessageId: str, InputData: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.TransferFormula) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.DryRunExportResponse: ...
    def ExportObjects(self, TargetSites: list[int], ExpObjList: list[str], TcGSMessageId: str, InputData: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.TransferFormula, Synchronize: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.ExportObjectsResponse: ...
    def ImportObjects(self, MasterSite: int, TcGSMessageId: str, FmsTickets: list[str], InputData: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.TransferFormula, Synchronize: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.ImportObjectsResponse: ...
    def RequestExportToRemoteSites(self, Reason: str, Sites: list[Teamcenter.Soa.Client.Model.ModelObject], Objects: list[Teamcenter.Soa.Client.Model.ModelObject], OptionSet: Teamcenter.Soa.Client.Model.ModelObject, OptionNameAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues], SessionOptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.CallToRemoteSiteResponse: ...
    def RequestImportFromRemoteSites(self, Reason: str, OwningSitesAndObjs: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.OwningSiteAndObjs], OptionSet: Teamcenter.Soa.Client.Model.ModelObject, OptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues], SessionOptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.CallToRemoteSiteResponse: ...
    def TransformData(self, InputFileTickets: list[str], RuleFileNamesOrTickets: list[str], SessionOptions: list[Teamcenter.Services.Strong.Globalmultisite._2007_12.ImportExport.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2017_05.ImportExport.TransformDataResponse: ...

class ImportExportService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> ImportExportService: ...
    def ConfirmExport(self, TargetSite: int, TcGSMessageId: str, FmsTicketOfFailedObjs: str, Commit: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.ConfirmExportResponse: ...
    def DryRunExport(self, TargetSites: list[int], ExpObjList: list[str], TcGSMessageId: str, InputData: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.TransferFormula) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.DryRunExportResponse: ...
    def ExportObjects(self, TargetSites: list[int], ExpObjList: list[str], TcGSMessageId: str, InputData: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.TransferFormula, Synchronize: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.ExportObjectsResponse: ...
    def ImportObjects(self, MasterSite: int, TcGSMessageId: str, FmsTickets: list[str], InputData: Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.TransferFormula, Synchronize: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.ImportObjectsResponse: ...
    def RequestExportToRemoteSites(self, Reason: str, Sites: list[Teamcenter.Soa.Client.Model.ModelObject], Objects: list[Teamcenter.Soa.Client.Model.ModelObject], OptionSet: Teamcenter.Soa.Client.Model.ModelObject, OptionNameAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues], SessionOptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.CallToRemoteSiteResponse: ...
    def RequestImportFromRemoteSites(self, Reason: str, OwningSitesAndObjs: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.OwningSiteAndObjs], OptionSet: Teamcenter.Soa.Client.Model.ModelObject, OptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues], SessionOptionNamesAndValues: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.ImportExport.CallToRemoteSiteResponse: ...
    def TransformData(self, InputFileTickets: list[str], RuleFileNamesOrTickets: list[str], SessionOptions: list[Teamcenter.Services.Strong.Globalmultisite._2007_12.ImportExport.NamesAndValues]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2017_05.ImportExport.TransformDataResponse: ...

class LowlevelOwnershipTransferRestBindingStub(LowlevelOwnershipTransferService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    @typing.overload
    def GetObjectsForOwnershipTransfer(self, TcGSMessageId: str, ChangeOwnershipToSite: int, Dryrun: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.ObjectsForOwnershipTransferResponse: ...
    @typing.overload
    def GetObjectsForOwnershipTransfer(self, TcGSMessageId: str, ChangeOwnershipToSite: int, Dryrun: bool, StartDate: str, EndDate: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.ObjectsForOwnershipTransferResponse: ...
    def TransferOwnership(self, TcGSMessageId: str, Dryrun: bool, IsSrcSiteExtinct: bool, FmsTicketOfObjs: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.TransferOwnershipResponse: ...
    def UpdateOwnershipTransfer(self, TcGSMessageId: str, ChangeOwnershipToSite: int, Dryrun: bool, IsSrcSiteExtinct: bool, FmsTicketOfObjs: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.UpdateOwnershipTransferResponse: ...

class LowlevelOwnershipTransferService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> LowlevelOwnershipTransferService: ...
    @typing.overload
    def GetObjectsForOwnershipTransfer(self, TcGSMessageId: str, ChangeOwnershipToSite: int, Dryrun: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.ObjectsForOwnershipTransferResponse: ...
    @typing.overload
    def GetObjectsForOwnershipTransfer(self, TcGSMessageId: str, ChangeOwnershipToSite: int, Dryrun: bool, StartDate: str, EndDate: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.ObjectsForOwnershipTransferResponse: ...
    def TransferOwnership(self, TcGSMessageId: str, Dryrun: bool, IsSrcSiteExtinct: bool, FmsTicketOfObjs: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.TransferOwnershipResponse: ...
    def UpdateOwnershipTransfer(self, TcGSMessageId: str, ChangeOwnershipToSite: int, Dryrun: bool, IsSrcSiteExtinct: bool, FmsTicketOfObjs: str) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2010_02.LowlevelOwnershipTransfer.UpdateOwnershipTransferResponse: ...

class OwnershipRecoveryRestBindingStub(OwnershipRecoveryService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def DeleteOtTransaction(self, TransactionId: str) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def FindOtTransactions(self, OtSearchInfo: Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.OtSearchInfo) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.OtTransactionResponse: ...
    def RecoverOwnership(self, TransactionId: str, DryRun: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.RecoverOwnershipResponse: ...
    def RecoverOwnershipUsingBriefcase(self, BriefcaseUid: str, DryRun: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.RecoverOwnershipResponse: ...

class OwnershipRecoveryService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> OwnershipRecoveryService: ...
    def DeleteOtTransaction(self, TransactionId: str) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def FindOtTransactions(self, OtSearchInfo: Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.OtSearchInfo) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.OtTransactionResponse: ...
    def RecoverOwnership(self, TransactionId: str, DryRun: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.RecoverOwnershipResponse: ...
    def RecoverOwnershipUsingBriefcase(self, BriefcaseUid: str, DryRun: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2020_01.OwnershipRecovery.RecoverOwnershipResponse: ...

class SynchronizerRestBindingStub(SynchronizerService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def CheckReplicaSyncState(self, ReplicaSite: int, SyncType: str, RevisionRule: str, InputReplicaGSIdentityList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.CheckSyncStateResponse: ...
    def CreateExportRecordOnStubReplication(self, ReplicaSite: int, TransferFormula: str, TransactionID: str, InputReplicaGSIdentityList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.StubReplicationMasterUpdateResponse: ...
    def GetCandidatesToSynchronizeForListOfClasses(self, TargetSite: int, ClassList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def GetCandidatesToSynchronizeForListOfObjects(self, TargetSite: int, ObjectsListToProcess: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.ObjectsByClass]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def UpdateMasterObjectsOnReplicaDeletion(self, ReplicaSite: int, InputReplicaGSIdentityList: list[str], ConvertToStub: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.ReplicaDeletionMasterUpdateResponse: ...
    def UpdateObjectsOnOwnershipChange(self, NewOwningSite: int, InputReplicaGSIdentityList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.OwnershipChangeReplicaUpdateResponse: ...
    def GetCandidatesForClasseswOpts(self, TargetSite: int, ClassList: list[str], TransferFormula: Teamcenter.Services.Internal.Strong.Globalmultisite._2008_06.Synchronizer.TransferFormula) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def GetCandidatesForObjectswOpts(self, TargetSite: int, ObjectList: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.ObjectsByClass], TransferFormula: Teamcenter.Services.Internal.Strong.Globalmultisite._2008_06.Synchronizer.TransferFormula) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def GetExportedObjects(self, TargetSiteId: int, ClassList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2008_06.Synchronizer.GetExportedObjectsResponse: ...

class SynchronizerService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> SynchronizerService: ...
    def CheckReplicaSyncState(self, ReplicaSite: int, SyncType: str, RevisionRule: str, InputReplicaGSIdentityList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.CheckSyncStateResponse: ...
    def CreateExportRecordOnStubReplication(self, ReplicaSite: int, TransferFormula: str, TransactionID: str, InputReplicaGSIdentityList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.StubReplicationMasterUpdateResponse: ...
    def GetCandidatesToSynchronizeForListOfClasses(self, TargetSite: int, ClassList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def GetCandidatesToSynchronizeForListOfObjects(self, TargetSite: int, ObjectsListToProcess: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.ObjectsByClass]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def UpdateMasterObjectsOnReplicaDeletion(self, ReplicaSite: int, InputReplicaGSIdentityList: list[str], ConvertToStub: bool) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.ReplicaDeletionMasterUpdateResponse: ...
    def UpdateObjectsOnOwnershipChange(self, NewOwningSite: int, InputReplicaGSIdentityList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.OwnershipChangeReplicaUpdateResponse: ...
    def GetCandidatesForClasseswOpts(self, TargetSite: int, ClassList: list[str], TransferFormula: Teamcenter.Services.Internal.Strong.Globalmultisite._2008_06.Synchronizer.TransferFormula) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def GetCandidatesForObjectswOpts(self, TargetSite: int, ObjectList: list[Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.ObjectsByClass], TransferFormula: Teamcenter.Services.Internal.Strong.Globalmultisite._2008_06.Synchronizer.TransferFormula) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2007_06.Synchronizer.SyncResponse: ...
    def GetExportedObjects(self, TargetSiteId: int, ClassList: list[str]) -> Teamcenter.Services.Internal.Strong.Globalmultisite._2008_06.Synchronizer.GetExportedObjectsResponse: ...

