import System
import Teamcenter.Services.Internal.Strong.Changemanagement._2012_10.ChangeManagement
import Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement
import Teamcenter.Services.Internal.Strong.Changemanagement._2020_01.MassUpdate
import Teamcenter.Services.Internal.Strong.Changemanagement._2022_12.ChangeManagement
import Teamcenter.Soa.Client
import Teamcenter.Soa.Client.Model
import Teamcenter.Soa.Client.Model.Strong

class ChangeManagementRestBindingStub(ChangeManagementService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def GetCreatableChangeTypes(self, Inputs: list[Teamcenter.Services.Internal.Strong.Changemanagement._2012_10.ChangeManagement.ContextDataInput]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2012_10.ChangeManagement.CreatableChangeTypesResponse: ...
    def ConnectChangeNoticeToContext(self, Input: list[Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.ConnectChangeNoticeToContextInElem]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.ConnectChangeNoticeToContextResp: ...
    def CreateOrUpdatePreviousEffectivity(self, Input: list[Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.PreviousEffectivity]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.CreateOrUpdatePreviousEffResp: ...
    def DisconnectChangeNoticeFromContext(self, Input: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def RemovePrevEffectivityFromChgNotice(self, Input: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def UpdateChangeNoticeRelations(self, Inputs: list[Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.UpdateChangeNoticeRelationsIn]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.UpdateChangeNoticeRelationsResp: ...
    def CreateAndSubmitChangeObjects(self, Input: list[Teamcenter.Services.Internal.Strong.Changemanagement._2022_12.ChangeManagement.CreateAndSubmitChangeInput]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2022_12.ChangeManagement.CreateAndSubmitChangeResponse: ...

class ChangeManagementService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> ChangeManagementService: ...
    def GetCreatableChangeTypes(self, Inputs: list[Teamcenter.Services.Internal.Strong.Changemanagement._2012_10.ChangeManagement.ContextDataInput]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2012_10.ChangeManagement.CreatableChangeTypesResponse: ...
    def ConnectChangeNoticeToContext(self, Input: list[Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.ConnectChangeNoticeToContextInElem]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.ConnectChangeNoticeToContextResp: ...
    def CreateOrUpdatePreviousEffectivity(self, Input: list[Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.PreviousEffectivity]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.CreateOrUpdatePreviousEffResp: ...
    def DisconnectChangeNoticeFromContext(self, Input: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def RemovePrevEffectivityFromChgNotice(self, Input: list[Teamcenter.Soa.Client.Model.ModelObject]) -> Teamcenter.Soa.Client.Model.ServiceData: ...
    def UpdateChangeNoticeRelations(self, Inputs: list[Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.UpdateChangeNoticeRelationsIn]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2015_03.ChangeManagement.UpdateChangeNoticeRelationsResp: ...
    def CreateAndSubmitChangeObjects(self, Input: list[Teamcenter.Services.Internal.Strong.Changemanagement._2022_12.ChangeManagement.CreateAndSubmitChangeInput]) -> Teamcenter.Services.Internal.Strong.Changemanagement._2022_12.ChangeManagement.CreateAndSubmitChangeResponse: ...

class MassUpdateRestBindingStub(MassUpdateService):
    def __init__(self, connection: Teamcenter.Soa.Client.Connection) -> None: ...
    def HasActiveMarkupAssociated(self, ChangeObject: Teamcenter.Soa.Client.Model.Strong.ItemRevision) -> Teamcenter.Services.Internal.Strong.Changemanagement._2020_01.MassUpdate.HasActiveMarkupAssociatedOut: ...
    def SaveImpactedAssemblies(self, ChangeObject: Teamcenter.Soa.Client.Model.Strong.ItemRevision, ImpactedObjectsInfo: list[Teamcenter.Services.Internal.Strong.Changemanagement._2020_01.MassUpdate.SaveImpactedAssembliesIn]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

class MassUpdateService:
    @staticmethod
    def getService(connection: Teamcenter.Soa.Client.Connection) -> MassUpdateService: ...
    def HasActiveMarkupAssociated(self, ChangeObject: Teamcenter.Soa.Client.Model.Strong.ItemRevision) -> Teamcenter.Services.Internal.Strong.Changemanagement._2020_01.MassUpdate.HasActiveMarkupAssociatedOut: ...
    def SaveImpactedAssemblies(self, ChangeObject: Teamcenter.Soa.Client.Model.Strong.ItemRevision, ImpactedObjectsInfo: list[Teamcenter.Services.Internal.Strong.Changemanagement._2020_01.MassUpdate.SaveImpactedAssembliesIn]) -> Teamcenter.Soa.Client.Model.ServiceData: ...

